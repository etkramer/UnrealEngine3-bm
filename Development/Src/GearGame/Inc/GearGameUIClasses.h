/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


#include "GearGameUIGlobalIncludes.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_UI_ENUMS
#define INCLUDED_GEARGAME_UI_ENUMS 1

enum GearScoreboardStatType
{
    eGSStat_Deaths          =0,
    eGSStat_Downs           =1,
    eGSStat_Kills           =2,
    eGSStat_Revives         =3,
    eGSStat_AnnexCap        =4,
    eGSStat_AnnexBreak      =5,
    eGSStat_MeatflagCap     =6,
    eGSStat_MAX             =7,
};
enum EGearDescriptionDockType
{
    eGEARDESCDOCK_None      =0,
    eGEARDESCDOCK_Left      =1,
    eGEARDESCDOCK_Right     =2,
    eGEARDESCDOCK_Top       =3,
    eGEARDESCDOCK_Bottom    =4,
    eGEARDESCDOCK_MAX       =5,
};
enum EGearNavigationIconType
{
    eGEARNAVICON_NewStuff   =0,
    eGEARNAVICON_Complete   =1,
    eGEARNAVICON_MAX        =2,
};
enum GearSaveSlotReturnType
{
    eGEARSAVE_None          =0,
    eGEARSAVE_Cancel        =1,
    eGEARSAVE_NewCampaign   =2,
    eGEARSAVE_UseCheckpoint =3,
    eGEARSAVE_MAX           =4,
};

#endif // !INCLUDED_GEARGAME_UI_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetGametypeFriendlyName)
AUTOGENERATE_NAME(GetMapNameString)
AUTOGENERATE_NAME(OnDeviceMemoryCheckComplete)
AUTOGENERATE_NAME(OnGearUISceneTick)
AUTOGENERATE_NAME(OnToolTipTimerExpired)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_UI_CLASSES
#define INCLUDED_GEARGAME_UI_CLASSES 1

class UGearUIDataProvider_OnlineFriends : public UUIDataProvider_OnlineFriends
{
public:
    //## BEGIN PROPS GearUIDataProvider_OnlineFriends
    FStringNoInit bHasInvited;
    //## END PROPS GearUIDataProvider_OnlineFriends

    DECLARE_CLASS(UGearUIDataProvider_OnlineFriends,UUIDataProvider_OnlineFriends,0|CLASS_Transient,GearGame)
	/* === IUIListElement interface === */

	/**
	 * Returns the names of the exposed members in OnlineFriend
	 *
	 * @see OnlineFriend structure in OnlineSubsystem
	 */
	virtual void GetElementCellTags(FName FieldName, TMap<FName,FString>& CellTags)
	{
		CellTags.Set(FName(TEXT("bHasInvited")),*bHasInvited);
		Super::GetElementCellTags(FieldName, CellTags);
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	FieldName		the name of the field the desired cell tags are associated with.  Used for cases where a single data provider
	 *							instance provides element cells for multiple collection data fields.
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( FName FieldName, const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

};

struct FDescriptionLabelParams
{
    FStringNoInit StringToBind;
    class UUIScreenObject* WidgetToDockTo;
    BYTE GearDockType;
    FLOAT DockPadding;

    /** Constructors */
    FDescriptionLabelParams() {}
    FDescriptionLabelParams(EEventParm)
    {
        appMemzero(this, sizeof(FDescriptionLabelParams));
    }
};

struct FGearDescriptionData
{
    FStringNoInit LocalizationPath;
    BYTE FaceToDockTo;
    FName WidgetToDescribeName;
    FName WidgetToDockToName;
    FLOAT DockPadding;
    class UUIObject* WidgetToDescribe;
    class UUIObject* WidgetToDockTo;

    /** Constructors */
    FGearDescriptionData() {}
    FGearDescriptionData(EEventParm)
    {
        appMemzero(this, sizeof(FGearDescriptionData));
    }
};

#define UCONST_GEAR_SCENE_PRIORITY_TUTORIAL -10
#define UCONST_GEAR_SCENE_PRIORITY_MPSCENE 0
#define UCONST_GEAR_SCENE_PRIORITY_DISCOVERABLES 0
#define UCONST_GEAR_SCENE_PRIORITY_COOPSPECTATE 9
#define UCONST_GEAR_SCENE_PRIORITY_GAMEOVER 11
#define UCONST_GEAR_SCENE_PRIORITY_NORMAL 10
#define UCONST_GEAR_SCENE_PRIORITY_BLOCKASYNC 20
#define UCONST_GEAR_SCENE_PRIORITY_NOTIFICATION 40

struct GearUIScene_Base_eventGetMapNameString_Parms
{
    FString MapName;
    FString ReturnValue;
    GearUIScene_Base_eventGetMapNameString_Parms(EEventParm)
    {
    }
};
struct GearUIScene_Base_eventGetGametypeFriendlyName_Parms
{
    FString GameName;
    FString ReturnValue;
    GearUIScene_Base_eventGetGametypeFriendlyName_Parms(EEventParm)
    {
    }
};
struct GearUIScene_Base_eventOnDeviceMemoryCheckComplete_Parms
{
    UBOOL bWasSuccessful;
    GearUIScene_Base_eventOnDeviceMemoryCheckComplete_Parms(EEventParm)
    {
    }
};
struct GearUIScene_Base_eventOnGearUISceneTick_Parms
{
    FLOAT DeltaTime;
    GearUIScene_Base_eventOnGearUISceneTick_Parms(EEventParm)
    {
    }
};
struct GearUIScene_Base_eventOnToolTipTimerExpired_Parms
{
    GearUIScene_Base_eventOnToolTipTimerExpired_Parms(EEventParm)
    {
    }
};
class UGearUIScene_Base : public UUIScene
{
public:
    //## BEGIN PROPS GearUIScene_Base
    struct FDescriptionLabelParams UpdateDescriptionLabelParams;
    FStringNoInit GameToMapConjunction;
    class UUILabel* SelectionHintLabel;
    class UUILabel* DescriptionLabel;
    class UUILabel* TooltipLabelFader;
    class UUIImage* DescriptionBGImage;
    class UUIImage* DescriptionArrowImage;
    TArrayNoInit<struct FGearDescriptionData> DescriptionList;
    INT CurrentDescriptionListIndex;
    FLOAT ToolTipTimerTimeRemaining;
    BITFIELD bOpeningAnimationCompleted:1;
    BITFIELD bRequiresProfile:1;
    BITFIELD bAllowPlayerJoin:1;
    BITFIELD bAllowSigninChanges:1;
    FScriptDelegate __OnToolTipTimerExpired__Delegate;
    FScriptDelegate __OnGearUISceneTick__Delegate;
    FScriptDelegate __OnDeviceMemoryCheckComplete__Delegate;
    //## END PROPS GearUIScene_Base

    FString eventGetMapNameString(const FString& MapName)
    {
        GearUIScene_Base_eventGetMapNameString_Parms Parms(EC_EventParm);
        Parms.MapName=MapName;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetMapNameString),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetGametypeFriendlyName(const FString& GameName)
    {
        GearUIScene_Base_eventGetGametypeFriendlyName_Parms Parms(EC_EventParm);
        Parms.GameName=GameName;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetGametypeFriendlyName),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnDeviceMemoryCheckComplete(UBOOL bWasSuccessful)
    {
        GearUIScene_Base_eventOnDeviceMemoryCheckComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(GEARGAME_OnDeviceMemoryCheckComplete,&__OnDeviceMemoryCheckComplete__Delegate,&Parms);
    }
    void delegateOnGearUISceneTick(FLOAT DeltaTime)
    {
        GearUIScene_Base_eventOnGearUISceneTick_Parms Parms(EC_EventParm);
        Parms.DeltaTime=DeltaTime;
        ProcessDelegate(GEARGAME_OnGearUISceneTick,&__OnGearUISceneTick__Delegate,&Parms);
    }
    void delegateOnToolTipTimerExpired()
    {
        ProcessDelegate(GEARGAME_OnToolTipTimerExpired,&__OnToolTipTimerExpired__Delegate,NULL);
    }
    DECLARE_ABSTRACT_CLASS(UGearUIScene_Base,UUIScene,0|CLASS_Config,GearGame)
	/** Overloaded to call our update function */
	virtual void Tick( FLOAT DeltaTime );
};

class UGearUISceneFrontEnd_Base : public UGearUIScene_Base
{
public:
    //## BEGIN PROPS GearUISceneFrontEnd_Base
    class UGearCoopGameSettings* CoopSettings;
    //## END PROPS GearUISceneFrontEnd_Base

    DECLARE_ABSTRACT_CLASS(UGearUISceneFrontEnd_Base,UGearUIScene_Base,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGearUISceneFrontEnd_Base)
};

class UGearUISceneFE_Title : public UGearUISceneFrontEnd_Base
{
public:
    //## BEGIN PROPS GearUISceneFE_Title
    //## END PROPS GearUISceneFE_Title

    DECLARE_CLASS(UGearUISceneFE_Title,UGearUISceneFrontEnd_Base,0|CLASS_Config,GearGame)
	/**
	 * This notification is sent to the topmost scene when a different scene is about to become the topmost scene.
	 * Provides scenes with a single location to perform any cleanup for its children.
	 *
	 * @param	NewTopScene		the scene that is about to become the topmost scene.
	 */
	virtual void NotifyTopSceneChanged( UUIScene* NewTopScene );

	/**
	 * Perform all initialization for this widget. Called on all widgets when a scene is opened,
	 * once the scene has been completely initialized.
	 * For widgets added at runtime, called after the widget has been inserted into its parent's
	 * list of children.
	 *
	 * @param	inOwnerScene	the scene to add this widget to.
	 * @param	inOwner			the container widget that will contain this widget.  Will be NULL if the widget
	 *							is being added to the scene's list of children.
	 */
	virtual void Initialize( UUIScene* inOwnerScene, UUIObject* inOwner=NULL );
};

class UGearUISceneMP_Base : public UGearUIScene_Base
{
public:
    //## BEGIN PROPS GearUISceneMP_Base
    //## END PROPS GearUISceneMP_Base

    DECLARE_ABSTRACT_CLASS(UGearUISceneMP_Base,UGearUIScene_Base,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGearUISceneMP_Base)
};

class UGearUIScene_PathChoice : public UUIScene
{
public:
    //## BEGIN PROPS GearUIScene_PathChoice
    class USeqAct_DisplayPathChoice* PathChoiceAction;
    //## END PROPS GearUIScene_PathChoice

    DECLARE_CLASS(UGearUIScene_PathChoice,UUIScene,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGearUIScene_PathChoice)
};

#endif // !INCLUDED_GEARGAME_UI_CLASSES
#endif // !NAMES_ONLY


#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_UI_NATIVE_DEFS
#define GEARGAME_UI_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,UGearUIDataProvider_OnlineFriends);
DECLARE_NATIVE_TYPE(GearGame,UGearUIScene_Base);
DECLARE_NATIVE_TYPE(GearGame,UGearUIScene_PathChoice);
DECLARE_NATIVE_TYPE(GearGame,UGearUISceneFE_Title);
DECLARE_NATIVE_TYPE(GearGame,UGearUISceneFrontEnd_Base);
DECLARE_NATIVE_TYPE(GearGame,UGearUISceneMP_Base);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_UI \
	UGearUIDataProvider_OnlineFriends::StaticClass(); \
	UGearUIScene_Base::StaticClass(); \
	UGearUIScene_PathChoice::StaticClass(); \
	UGearUISceneFE_Title::StaticClass(); \
	UGearUISceneFrontEnd_Base::StaticClass(); \
	UGearUISceneMP_Base::StaticClass(); \

#endif // GEARGAME_UI_NATIVE_DEFS

#ifdef NATIVES_ONLY
#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,GearUIDataProvider_OnlineFriends,bHasInvited)
VERIFY_CLASS_SIZE_NODIE(UGearUIDataProvider_OnlineFriends)
VERIFY_CLASS_OFFSET_NODIE(U,GearUIScene_Base,UpdateDescriptionLabelParams)
VERIFY_CLASS_OFFSET_NODIE(U,GearUIScene_Base,__OnDeviceMemoryCheckComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UGearUIScene_Base)
VERIFY_CLASS_OFFSET_NODIE(U,GearUIScene_PathChoice,PathChoiceAction)
VERIFY_CLASS_SIZE_NODIE(UGearUIScene_PathChoice)
VERIFY_CLASS_SIZE_NODIE(UGearUISceneFE_Title)
VERIFY_CLASS_OFFSET_NODIE(U,GearUISceneFrontEnd_Base,CoopSettings)
VERIFY_CLASS_SIZE_NODIE(UGearUISceneFrontEnd_Base)
VERIFY_CLASS_SIZE_NODIE(UGearUISceneMP_Base)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
