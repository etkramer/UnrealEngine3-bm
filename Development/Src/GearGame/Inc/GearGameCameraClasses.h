/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_CAMERA_ENUMS
#define INCLUDED_GEARGAME_CAMERA_ENUMS 1

enum EGearPlayerCameraType
{
    GCT_None                =0,
    GCT_GamePlay            =1,
    GCT_Spectating          =2,
    GCT_DebugFaceCam        =3,
    GCT_Fixed               =4,
    GCT_Screenshot          =5,
    GCT_MAX                 =6,
};
enum ECameraAnimOption
{
    CAO_None                =0,
    CAO_TranslateDelta      =1,
    CAO_TranslateRotateDelta=2,
    CAO_Absolute            =3,
    CAO_MAX                 =4,
};
enum EAltDefaultCameraModes
{
    DefaultCam_Normal       =0,
    DefaultCam_MAX          =1,
};
enum EGearCam_ViewportTypes
{
    CVT_16to9_Full          =0,
    CVT_16to9_VertSplit     =1,
    CVT_16to9_HorizSplit    =2,
    CVT_4to3_Full           =3,
    CVT_4to3_HorizSplit     =4,
    CVT_4to3_VertSplit      =5,
    CVT_MAX                 =6,
};
enum EAutoFramingPawnTracePoint
{
    PawnTrace_Head          =0,
    PawnTrace_Above         =1,
    PawnTrace_Left          =2,
    PawnTrace_Right         =3,
    PawnTrace_MAX           =4,
};

#endif // !INCLUDED_GEARGAME_CAMERA_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetCameraWorstCaseLoc)
AUTOGENERATE_NAME(GetDesiredFOV)
AUTOGENERATE_NAME(GetPawnRelativeOffset)
AUTOGENERATE_NAME(ModifyPostProcessSettings)
AUTOGENERATE_NAME(UpdateFocusPoint)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_CAMERA_CLASSES
#define INCLUDED_GEARGAME_CAMERA_CLASSES 1

class ACameraVolume : public AVolume
{
public:
    //## BEGIN PROPS CameraVolume
    BITFIELD bActive:1 GCC_BITFIELD_MAGIC;
    BITFIELD bAutomaticFraming:1;
    BITFIELD bForcePlayerToWalk:1;
    class ACameraActor* CameraActor;
    //## END PROPS CameraVolume

    DECLARE_CLASS(ACameraVolume,AVolume,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(ACameraVolume)
};

class AGearPlayerCamera : public AAnimatedCamera
{
public:
    //## BEGIN PROPS GearPlayerCamera
    BYTE CamType;
    BYTE LastCameraType;
    class UGearGameplayCamera* GameplayCam;
    class UGearSpectatorCamera* SpectatorCam;
    class UGearDebugFaceCamera* DebugFaceCam;
    class UGearFixedCamera* FixedCam;
    class UGearScreenshotCamera* ScreenshotCam;
    class UGearCameraBase* CurrentCamera;
    class UGearCameraModifier* GearCamMod_CameraBone;
    class UGearCamMod_ScreenShake* GearCamMod_ScreenShake;
    BITFIELD bUseForcedCamFOV:1;
    BITFIELD bInterpolateCamChanges:1;
    BITFIELD bResetInterp:1;
    FLOAT ForcedCamFOV;
    TArrayNoInit<class AEmit_CameraLensEffectBase*> CameraLensEffects;
    class AActor* LastViewTarget;
    FLOAT SplitScreenShakeScale;
    class APawn* ShakyCamAnimNodeCachePawn;
    TArrayNoInit<FName> StandingIdleSequenceNodeNames;
    TArrayNoInit<class UAnimNodeSequence*> StandingIdleSequenceNodes;
    class AActor* LastTargetBase;
    FMatrix LastTargetBaseTM;
    //## END PROPS GearPlayerCamera

    virtual void CacheLastTargetBaseInfo(class AActor* TargetBase);
    void AddGearPawnToHiddenActorsArray(class APawn* PawnToHide);
    void RemoveGearPawnFromHiddenActorsArray(class APawn* PawnToShow);
    FLOAT AdjustFOVForViewport(FLOAT inHorizFOV,class APawn* CameraTargetPawn);
    DECLARE_FUNCTION(execCacheLastTargetBaseInfo)
    {
        P_GET_OBJECT(AActor,TargetBase);
        P_FINISH;
        CacheLastTargetBaseInfo(TargetBase);
    }
    DECLARE_FUNCTION(execAddGearPawnToHiddenActorsArray)
    {
        P_GET_OBJECT(APawn,PawnToHide);
        P_FINISH;
        AddGearPawnToHiddenActorsArray(PawnToHide);
    }
    DECLARE_FUNCTION(execRemoveGearPawnFromHiddenActorsArray)
    {
        P_GET_OBJECT(APawn,PawnToShow);
        P_FINISH;
        RemoveGearPawnFromHiddenActorsArray(PawnToShow);
    }
    DECLARE_FUNCTION(execAdjustFOVForViewport)
    {
        P_GET_FLOAT(inHorizFOV);
        P_GET_OBJECT(APawn,CameraTargetPawn);
        P_FINISH;
        *(FLOAT*)Result=AdjustFOVForViewport(inHorizFOV,CameraTargetPawn);
    }
    DECLARE_CLASS(AGearPlayerCamera,AAnimatedCamera,0,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

	virtual void ModifyPostProcessSettings(FPostProcessSettings& PPSettings) const;
};

class UGearCamMod_CameraBone : public UGearCameraModifier
{
public:
    //## BEGIN PROPS GearCamMod_CameraBone
    FName CameraBoneName;
    FName CameraBoneRootName;
    class AGearPawn* Pawn;
    BITFIELD bInitialized:1;
    BITFIELD bDisableAmbientCameraMotion:1;
    BITFIELD bOXMShakyCamDampening:1;
    class USkeletalMeshComponent* Mesh;
    FLOAT InCombatAlphaBonus;
    FLOAT AlphaWhenIdle;
    FVector MaxTranslation;
    FLOAT AlphaInterpSpeed;
    BYTE CameraAnimOption;
    FLOAT OXMShakyCamDampeningFactor;
    FLOAT RoadieRunShakyCamDampeningFactor;
    //## END PROPS GearCamMod_CameraBone

    UBOOL Initialize();
    FRotator FixCamBone(FRotator R);
    FRotator CalcDeltaRot(FRotator CameraRootRot,FRotator CameraBoneRot,FRotator PawnRot);
    virtual UBOOL ModifyCamera(class ACamera* Camera,FLOAT DeltaTime,FTPOV& OutPOV);
    virtual FLOAT GetTargetAlpha(class ACamera* Camera);
    virtual void UpdateAlpha(class ACamera* Camera,FLOAT DeltaTime);
    DECLARE_FUNCTION(execInitialize)
    {
        P_FINISH;
        *(UBOOL*)Result=Initialize();
    }
    DECLARE_FUNCTION(execFixCamBone)
    {
        P_GET_STRUCT(FRotator,R);
        P_FINISH;
        *(FRotator*)Result=FixCamBone(R);
    }
    DECLARE_FUNCTION(execCalcDeltaRot)
    {
        P_GET_STRUCT(FRotator,CameraRootRot);
        P_GET_STRUCT(FRotator,CameraBoneRot);
        P_GET_STRUCT(FRotator,PawnRot);
        P_FINISH;
        *(FRotator*)Result=CalcDeltaRot(CameraRootRot,CameraBoneRot,PawnRot);
    }
    DECLARE_CLASS(UGearCamMod_CameraBone,UGearCameraModifier,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGearCamMod_CameraBone)
};

class UFixedCam_AutoFraming : public UObject
{
public:
    //## BEGIN PROPS FixedCam_AutoFraming
    class UGearFixedCamera* FixedCam;
    FLOAT RelativeWeight_TargetPawn;
    FLOAT RelativeWeight_Speaker;
    FLOAT RelativeWeight_Normal;
    FVector LastLookat;
    FLOAT LookatInterpSpeed;
    FLOAT LastFOV;
    FLOAT FOVInterpSpeed;
    BITFIELD bDoFOVAdj:1;
    //## END PROPS FixedCam_AutoFraming

    virtual void UpdateCamera(class ACameraActor* CamActor,class APawn* TargetPawn,FLOAT DeltaTime,struct FTViewTarget& OutVT);
    DECLARE_FUNCTION(execUpdateCamera)
    {
        P_GET_OBJECT(ACameraActor,CamActor);
        P_GET_OBJECT(APawn,TargetPawn);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(struct FTViewTarget,OutVT);
        P_FINISH;
        UpdateCamera(CamActor,TargetPawn,DeltaTime,OutVT);
    }
    DECLARE_CLASS(UFixedCam_AutoFraming,UObject,0,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

    NO_DEFAULT_CONSTRUCTOR(UFixedCam_AutoFraming)
};

struct GearCameraBase_eventModifyPostProcessSettings_Parms
{
    struct FPostProcessSettings PP;
    GearCameraBase_eventModifyPostProcessSettings_Parms(EEventParm)
    {
    }
};
class UGearCameraBase : public UObject
{
public:
    //## BEGIN PROPS GearCameraBase
    class AGearPlayerCamera* PlayerCamera;
    BITFIELD bResetCameraInterpolation:1;
    //## END PROPS GearCameraBase

    void eventModifyPostProcessSettings(struct FPostProcessSettings& PP)
    {
        GearCameraBase_eventModifyPostProcessSettings_Parms Parms(EC_EventParm);
        Parms.PP=PP;
        ProcessEvent(FindFunctionChecked(GEARGAME_ModifyPostProcessSettings),&Parms);
        PP=Parms.PP;
    }
    DECLARE_ABSTRACT_CLASS(UGearCameraBase,UObject,0,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

    NO_DEFAULT_CONSTRUCTOR(UGearCameraBase)
};

struct FCamFocusPointParams
{
    class AActor* FocusActor;
    FName FocusBoneName;
    FVector FocusWorldLoc;
    FLOAT CameraFOV;
    FVector2D InterpSpeedRange;
    FVector2D InFocusFOV;
    BITFIELD bAlwaysFocus:1;
    BITFIELD bAdjustCamera:1;
    BITFIELD bIgnoreTrace:1;
    FLOAT FocusPitchOffsetDeg;

    /** Constructors */
    FCamFocusPointParams() {}
    FCamFocusPointParams(EEventParm)
    {
        appMemzero(this, sizeof(FCamFocusPointParams));
    }
};

struct FPenetrationAvoidanceFeeler
{
    FRotator AdjustmentRot;
    FLOAT WorldWeight;
    FLOAT PawnWeight;
    FVector Extent;

    /** Constructors */
    FPenetrationAvoidanceFeeler() {}
    FPenetrationAvoidanceFeeler(EEventParm)
    {
        appMemzero(this, sizeof(FPenetrationAvoidanceFeeler));
    }
};

struct GearGameplayCamera_eventUpdateFocusPoint_Parms
{
    class APawn* P;
    GearGameplayCamera_eventUpdateFocusPoint_Parms(EEventParm)
    {
    }
};
struct GearGameplayCamera_eventGetDesiredFOV_Parms
{
    class APawn* ViewedPawn;
    FLOAT ReturnValue;
    GearGameplayCamera_eventGetDesiredFOV_Parms(EEventParm)
    {
    }
};
class UGearGameplayCamera : public UGearCameraBase
{
public:
    //## BEGIN PROPS GearGameplayCamera
    FVector LastActualCameraOrigin;
    FLOAT WorstLocBlockedPct;
    FLOAT WorstLocPenetrationExtentScale;
    FLOAT PenetrationBlendOutTime;
    FLOAT PenetrationBlendInTime;
    FLOAT PenetrationBlockedPct;
    FLOAT PenetrationExtentScale;
    FVector LastActualOriginOffset;
    FRotator LastActualCameraOriginRot;
    FLOAT OriginOffsetInterpSpeed;
    FVector LastViewOffset;
    FLOAT LastCamFOV;
    class UGearGameplayCameraMode* GearCamDefault;
    class UGearGameplayCameraMode* GearCamCover;
    class UGearGameplayCameraMode* GearCamCoverTargeting;
    class UGearGameplayCameraMode* GearCamCoverTargetingGrenade;
    class UGearGameplayCameraMode* GearCamCrouch;
    class UGearGameplayCameraMode* GearCamRoadie;
    class UGearGameplayCameraMode* GearCamTargeting;
    class UGearGameplayCameraMode* GearCamTargetingGrenade;
    class UGearGameplayCameraMode* GearCamDBNO;
    class UGearGameplayCameraMode* GearCamDeath;
    class UGearGameplayCameraMode* GearCamRagdoll;
    class UGearGameplayCameraMode* GearCamVehicle;
    class UGearGameplayCameraMode* GearCamVehicleTurret;
    class UGearGameplayCameraMode* GearCamVehicleTurretTargeting;
    class UGearGameplayCameraMode* GearCamVehicleRideReaver;
    class UGearGameplayCameraMode* GearCamCentaurDeath;
    class UGearGameplayCameraMode* GearCamTurret;
    class UGearGameplayCameraMode* GearCamTurretTargeting;
    class UGearGameplayCameraMode* GearCamConversation;
    class UGearGameplayCameraMode* GearCamMountedHeavyWeapon;
    class UGearGameplayCameraMode* GearCamDeployedShield;
    class UGearGameplayCameraMode* GearCamBrumakDriver;
    class UGearGameplayCameraMode* GearCamBrumakGunner;
    class UGearGameplayCameraMode* GearCamBrumakDriverTargeting;
    class UGearGameplayCameraMode* GearCamBrumakGunnerTargeting;
    class UGearGameplayCameraMode* GearCamBrumakDeath;
    class UGearGameplayCameraMode* GearCamSniperZoom;
    class UGearGameplayCameraMode* GearCamMantle;
    class UGearGameplayCameraMode* CustomDefaultCamMode;
    class UGearGameplayCameraMode* CurrentCamMode;
    FLOAT LastHeightAdjustment;
    FLOAT LastPitchAdjustment;
    FLOAT LastYawAdjustment;
    FLOAT LeftoverPitchAdjustment;
    FLOAT Focus_BackOffStrength;
    FLOAT Focus_StepHeightAdjustment;
    INT Focus_MaxTries;
    FLOAT Focus_FastAdjustKickInTime;
    FLOAT LastFocusChangeTime;
    FVector ActualFocusPointWorldLoc;
    FVector LastFocusPointLoc;
    struct FCamFocusPointParams FocusPoint;
    BITFIELD bFocusPointSet:1;
    BITFIELD bFocusPointSuccessful:1;
    BITFIELD bDoingACameraTurn:1;
    BITFIELD bTurnAlignTargetWhenFinished:1;
    BITFIELD bCamDebug:1;
    BITFIELD bDoingDirectLook:1;
    BITFIELD bConversationMode:1;
    FLOAT TurnCurTime;
    INT TurnStartAngle;
    INT TurnEndAngle;
    FLOAT TurnTotalTime;
    FLOAT TurnDelay;
    INT LastPostCamTurnYaw;
    INT DirectLookYaw;
    FLOAT DirectLookInterpSpeed;
    FLOAT WorstLocInterpSpeed;
    FVector LastWorstLocationLocal;
    FRotator LastPreModifierCameraRot;
    FLOAT SpectatorCameraRotInterpSpeed;
    TArrayNoInit<struct FPenetrationAvoidanceFeeler> PenetrationAvoidanceFeelers;
    //## END PROPS GearGameplayCamera

    void PlayerUpdateCameraNative(class APawn* P,FLOAT DeltaTime,struct FTViewTarget& OutVT);
    void EndTurn();
    DECLARE_FUNCTION(execPlayerUpdateCameraNative)
    {
        P_GET_OBJECT(APawn,P);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(struct FTViewTarget,OutVT);
        P_FINISH;
        PlayerUpdateCameraNative(P,DeltaTime,OutVT);
    }
    DECLARE_FUNCTION(execEndTurn)
    {
        P_FINISH;
        EndTurn();
    }
    void eventUpdateFocusPoint(class APawn* P)
    {
        GearGameplayCamera_eventUpdateFocusPoint_Parms Parms(EC_EventParm);
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(GEARGAME_UpdateFocusPoint),&Parms);
    }
    FLOAT eventGetDesiredFOV(class APawn* ViewedPawn)
    {
        GearGameplayCamera_eventGetDesiredFOV_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.ViewedPawn=ViewedPawn;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetDesiredFOV),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGearGameplayCamera,UGearCameraBase,0,GearGame)
protected:
	/** Returns the focus location, adjusted to compensate for the third-person camera offset. */
	FVector GetEffectiveFocusLoc(const FVector& CamLoc, const FVector& FocusLoc, const FVector& ViewOffset);
	void AdjustToFocusPointKeepingTargetInView(class APawn* P, FLOAT DeltaTime, FVector& CamLoc, FRotator& CamRot, const FVector& ViewOffset);
	void AdjustToFocusPoint(class APawn* P, FLOAT DeltaTime, FVector& CamLoc, FRotator& CamRot);
	void PreventCameraPenetration(class APawn* P, const FVector& WorstLocation, FVector& DesiredLocation, FLOAT DeltaTime, FLOAT& DistBlockedPct, FLOAT CameraExtentScale, UBOOL bSingleRayOnly=FALSE);
	void UpdateForMovingBase(class AActor* BaseActor);

public:

};

class UGearSpectatorCamera : public UGearCameraBase
{
public:
    //## BEGIN PROPS GearSpectatorCamera
    class USpectatorCam_AutoFraming* AutoFramingCam;
    FLOAT DefaultFOV;
    FLOAT ControlInfo_LookRight;
    FLOAT ControlInfo_LookUp;
    FLOAT ControlInfo_Zoom;
    //## END PROPS GearSpectatorCamera

    DECLARE_CLASS(UGearSpectatorCamera,UGearCameraBase,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGearSpectatorCamera)
};

struct FViewOffsetData
{
    FVector OffsetHigh;
    FVector OffsetMid;
    FVector OffsetLow;

    /** Constructors */
    FViewOffsetData() {}
    FViewOffsetData(EEventParm)
    {
        appMemzero(this, sizeof(FViewOffsetData));
    }
};

struct GearGameplayCameraMode_eventGetCameraWorstCaseLoc_Parms
{
    class APawn* TargetPawn;
    FVector ReturnValue;
    GearGameplayCameraMode_eventGetCameraWorstCaseLoc_Parms(EEventParm)
    {
    }
};
struct GearGameplayCameraMode_eventGetPawnRelativeOffset_Parms
{
    class APawn* P;
    FVector ReturnValue;
    GearGameplayCameraMode_eventGetPawnRelativeOffset_Parms(EEventParm)
    {
    }
};
class UGearGameplayCameraMode : public UObject
{
public:
    //## BEGIN PROPS GearGameplayCameraMode
    class UGearGameplayCamera* GameplayCam;
    FVector PawnRelativeOffset;
    FLOAT FOVAngle;
    FLOAT BlendTime;
    BITFIELD bLockedToViewTarget:1;
    BITFIELD bDirectLook:1;
    BITFIELD bFollowTarget:1;
    BITFIELD bInterpLocation:1;
    BITFIELD bUsePerAxisLocInterp:1;
    BITFIELD bInterpRotation:1;
    BITFIELD bDoPredictiveAvoidance:1;
    BITFIELD bValidateWorstLoc:1;
    BITFIELD bSkipCameraCollision:1;
    BITFIELD bAdjustDOF:1;
    BITFIELD bDOFUpdated:1;
    FLOAT FollowingInterpSpeed_Pitch;
    FLOAT FollowingInterpSpeed_Yaw;
    FLOAT FollowingInterpSpeed_Roll;
    FLOAT FollowingCameraVelThreshold;
    FLOAT InterpLocSpeed;
    FVector PerAxisLocInterpSpeed;
    FLOAT InterpRotSpeed;
    FVector StrafeLeftAdjustment;
    FVector StrafeRightAdjustment;
    FLOAT StrafeOffsetScalingThreshold;
    FLOAT StrafeOffsetInterpSpeedIn;
    FLOAT StrafeOffsetInterpSpeedOut;
    FVector LastStrafeOffset;
    FVector RunFwdAdjustment;
    FVector RunBackAdjustment;
    FLOAT RunOffsetScalingThreshold;
    FLOAT RunOffsetInterpSpeedIn;
    FLOAT RunOffsetInterpSpeedOut;
    FVector LastRunOffset;
    FVector WorstLocOffset;
    FVector TargetRelativeCameraOriginOffset;
    struct FViewOffsetData ViewOffset;
    struct FViewOffsetData ViewOffset_ViewportAdjustments[6];
    FLOAT DOF_FalloffExponent;
    FLOAT DOF_BlurKernelSize;
    FLOAT DOF_FocusInnerRadius;
    FLOAT DOF_MaxNearBlurAmount;
    FLOAT DOF_MaxFarBlurAmount;
    FLOAT LastDOFRadius;
    FLOAT LastDOFDistance;
    FLOAT DOFDistanceInterpSpeed;
    FVector DOFTraceExtent;
    FLOAT DOF_RadiusFalloff;
    FVector2D DOF_RadiusRange;
    FVector2D DOF_RadiusDistRange;
    //## END PROPS GearGameplayCameraMode

    FVector eventGetCameraWorstCaseLoc(class APawn* TargetPawn)
    {
        GearGameplayCameraMode_eventGetCameraWorstCaseLoc_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.TargetPawn=TargetPawn;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetCameraWorstCaseLoc),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetPawnRelativeOffset(class APawn* P)
    {
        GearGameplayCameraMode_eventGetPawnRelativeOffset_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetPawnRelativeOffset),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGearGameplayCameraMode,UObject,0|CLASS_Config,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

	// GearGameplayCameraMode interface

	/**
	 * Calculates and returns the ideal view offset for the specified camera mode.
	 * The offset is relative to the Camera's pos/rot and calculated by interpolating
	 * 2 ideal view points based on the player view pitch.
	 *
	 * @param	ViewedPawn			Camera target pawn
	 * @param	DeltaTime			Delta time since last frame.
	 * @param	ViewRotation		Rot of the camera
	 */
	FVector GetViewOffset(class APawn* ViewedPawn, FLOAT DeltaTime, const FRotator& ViewRotation);

	/** Returns View relative offsets */
	virtual void GetBaseViewOffsets(class APawn* ViewedPawn, BYTE ViewportConfig, FLOAT DeltaTime, FVector& out_Low, FVector& out_Mid, FVector& out_High);

	/** Returns true if mode should be using direct-look mode, false otherwise */
	virtual UBOOL UseDirectLookMode(class APawn* CameraTarget);

	/** Returns true if mode should lock camera to view target, false otherwise */
	virtual UBOOL LockedToViewTarget(class APawn* CameraTarget);

	/**
	 * Returns true if this mode should do target following.  If true is returned, interp speeds are filled in.
	 * If false is returned, interp speeds are not altered.
	 */
	virtual UBOOL ShouldFollowTarget(class APawn* CameraTarget, FLOAT& PitchInterpSpeed, FLOAT& YawInterpSpeed, FLOAT& RollInterpSpeed);

	/** Returns an offset, in pawn-local space, to be applied to the camera origin. */
	virtual FVector GetTargetRelativeOriginOffset(class APawn* TargetPawn);

	/**
	 * Returns location and rotation, in world space, of the camera's basis point.  The camera will rotate
	 * around this point, offsets are applied from here, etc.
	 */
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);

	/** Returns time to interpolate location/rotation changes. */
	virtual FLOAT GetBlendTime(class APawn* Pawn);

	/** Returns time to interpolate FOV changes. */
	virtual FLOAT GetFOVBlendTime(class APawn* Pawn);
};

class UGameplayCam_BrumakDriver : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_BrumakDriver
    //## END PROPS GameplayCam_BrumakDriver

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    virtual UBOOL UseDirectLookMode(class APawn* CameraTarget);
    virtual UBOOL LockedToViewTarget(class APawn* CameraTarget);
    virtual UBOOL ShouldFollowTarget(class APawn* CameraTarget,FLOAT& PitchInterpSpeed,FLOAT& YawInterpSpeed,FLOAT& RollInterpSpeed);
    DECLARE_FUNCTION(execGetBaseViewOffsets)
    {
        P_GET_OBJECT(APawn,ViewedPawn);
        P_GET_BYTE(ViewportConfig);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(FVector,out_Low);
        P_GET_STRUCT_REF(FVector,out_Mid);
        P_GET_STRUCT_REF(FVector,out_High);
        P_FINISH;
        GetBaseViewOffsets(ViewedPawn,ViewportConfig,DeltaTime,out_Low,out_Mid,out_High);
    }
    DECLARE_FUNCTION(execUseDirectLookMode)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_FINISH;
        *(UBOOL*)Result=UseDirectLookMode(CameraTarget);
    }
    DECLARE_FUNCTION(execLockedToViewTarget)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_FINISH;
        *(UBOOL*)Result=LockedToViewTarget(CameraTarget);
    }
    DECLARE_FUNCTION(execShouldFollowTarget)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_GET_FLOAT_REF(PitchInterpSpeed);
        P_GET_FLOAT_REF(YawInterpSpeed);
        P_GET_FLOAT_REF(RollInterpSpeed);
        P_FINISH;
        *(UBOOL*)Result=ShouldFollowTarget(CameraTarget,PitchInterpSpeed,YawInterpSpeed,RollInterpSpeed);
    }
    DECLARE_CLASS(UGameplayCam_BrumakDriver,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_BrumakDeath : public UGameplayCam_BrumakDriver
{
public:
    //## BEGIN PROPS GameplayCam_BrumakDeath
    //## END PROPS GameplayCam_BrumakDeath

    DECLARE_CLASS(UGameplayCam_BrumakDeath,UGameplayCam_BrumakDriver,0|CLASS_Config,GearGame)
	/** Returns View relative offsets */
	virtual void GetBaseViewOffsets(class APawn* ViewedPawn, BYTE ViewportConfig, FLOAT DeltaTime, FVector& out_Low, FVector& out_Mid, FVector& out_High);
};

class UGameplayCam_BrumakTargeting : public UGameplayCam_BrumakDriver
{
public:
    //## BEGIN PROPS GameplayCam_BrumakTargeting
    //## END PROPS GameplayCam_BrumakTargeting

    DECLARE_CLASS(UGameplayCam_BrumakTargeting,UGameplayCam_BrumakDriver,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_BrumakTargeting)
};

class UGameplayCam_Conversation : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_Conversation
    class AActor* LastFocusActor;
    class AActor* CameraTarget;
    FVector2D CameraInterpSpeedRange;
    FVector2D CameraInFocusFOV;
    BITFIELD bSetFocusPointNextTick:1;
    //## END PROPS GameplayCam_Conversation

    virtual void GetCameraOrigin(class APawn* TargetPawn,FVector& OriginLoc,FRotator& OriginRot);
    DECLARE_FUNCTION(execGetCameraOrigin)
    {
        P_GET_OBJECT(APawn,TargetPawn);
        P_GET_STRUCT_REF(FVector,OriginLoc);
        P_GET_STRUCT_REF(FRotator,OriginRot);
        P_FINISH;
        GetCameraOrigin(TargetPawn,OriginLoc,OriginRot);
    }
    DECLARE_CLASS(UGameplayCam_Conversation,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_Conversation)
};

class UGameplayCam_Cover : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_Cover
    FVector PawnRel_Posture_Standing;
    FVector PawnRel_Posture_MidLevel;
    FVector PawnRel_Mod_MidLvlBlindUp;
    FVector PawnRel_Mod_PopUp_MidLevel;
    FVector PawnRel_Mod_360Aim_PopUp;
    FVector PawnRel_Mod_Lean_Standing;
    FVector PawnRel_Mod_Lean_MidLevel;
    FVector PawnRel_Mod_Lean_360Aim_Standing;
    FVector PawnRel_Mod_Lean_360Aim_MidLevel;
    FVector PawnRel_Mod_CoverEdge;
    FRotator ViewMaxLimit;
    FRotator ViewMaxLimit_Lean;
    FRotator ViewMaxLimit_Circular;
    FRotator ViewMinLimit;
    FRotator ViewMinLimit_Lean;
    FRotator ViewMinLimit_Circular;
    INT LastCoverYaw;
    FVector WorstLocOffsetLow;
    FLOAT CoverAngLimit;
    FLOAT MaxYawAdjRate;
    BITFIELD bTemporaryOriginRotInterp:1;
    FLOAT TemporaryOriginRotInterpSpeed;
    //## END PROPS GameplayCam_Cover

    DECLARE_CLASS(UGameplayCam_Cover,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	/**
	 * Returns location and rotation, in world space, of the camera's basis point.  The camera will rotate
	 * around this point, offsets are applied from here, etc.
	 */
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_CoverTargeting : public UGameplayCam_Cover
{
public:
    //## BEGIN PROPS GameplayCam_CoverTargeting
    FVector LeanOriginOffset;
    FVector LeanOriginOffsetLow;
    BYTE LastCoverAction;
    FLOAT LeanTo360AimingBlendTime;
    //## END PROPS GameplayCam_CoverTargeting

    virtual FVector GetTargetRelativeOriginOffset(class APawn* TargetPawn);
    DECLARE_FUNCTION(execGetTargetRelativeOriginOffset)
    {
        P_GET_OBJECT(APawn,TargetPawn);
        P_FINISH;
        *(FVector*)Result=GetTargetRelativeOriginOffset(TargetPawn);
    }
    DECLARE_CLASS(UGameplayCam_CoverTargeting,UGameplayCam_Cover,0|CLASS_Config,GearGame)
	/** Returns time to interpolate FOV changes. */
	virtual FLOAT GetBlendTime(class APawn* Pawn);
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_CoverTargetingGrenade : public UGameplayCam_Cover
{
public:
    //## BEGIN PROPS GameplayCam_CoverTargetingGrenade
    FVector2D GrenadeCamPitchLimit;
    //## END PROPS GameplayCam_CoverTargetingGrenade

    DECLARE_CLASS(UGameplayCam_CoverTargetingGrenade,UGameplayCam_Cover,0|CLASS_Config,GearGame)
	// GearGameplayCameraMode interface
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_Default : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_Default
    FVector EvadePawnRelativeOffset;
    FLOAT WorstLocAimingZOffset;
    BITFIELD bTemporaryOriginRotInterp:1;
    FLOAT TemporaryOriginRotInterpSpeed;
    //## END PROPS GameplayCam_Default

    DECLARE_CLASS(UGameplayCam_Default,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	/**
	 * Returns location and rotation, in world space, of the camera's basis point.  The camera will rotate
	 * around this point, offsets are applied from here, etc.
	 */
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_Death : public UGameplayCam_Default
{
public:
    //## BEGIN PROPS GameplayCam_Death
    //## END PROPS GameplayCam_Death

    DECLARE_CLASS(UGameplayCam_Death,UGameplayCam_Default,0|CLASS_Config,GearGame)
	/**
	* Returns location and rotation, in world space, of the camera's basis point.  The camera will rotate
	* around this point, offsets are applied from here, etc.
	*/
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_DeployedShield : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_DeployedShield
    //## END PROPS GameplayCam_DeployedShield

    DECLARE_CLASS(UGameplayCam_DeployedShield,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_DeployedShield)
};

class UGameplayCam_MountedHeavyWeapon : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_MountedHeavyWeapon
    //## END PROPS GameplayCam_MountedHeavyWeapon

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    DECLARE_FUNCTION(execGetBaseViewOffsets)
    {
        P_GET_OBJECT(APawn,ViewedPawn);
        P_GET_BYTE(ViewportConfig);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(FVector,out_Low);
        P_GET_STRUCT_REF(FVector,out_Mid);
        P_GET_STRUCT_REF(FVector,out_High);
        P_FINISH;
        GetBaseViewOffsets(ViewedPawn,ViewportConfig,DeltaTime,out_Low,out_Mid,out_High);
    }
    DECLARE_CLASS(UGameplayCam_MountedHeavyWeapon,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_MountedHeavyWeapon)
};

class UGameplayCam_SniperZoom : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_SniperZoom
    //## END PROPS GameplayCam_SniperZoom

    DECLARE_CLASS(UGameplayCam_SniperZoom,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_TargetingGrenade : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_TargetingGrenade
    FVector2D GrenadeCamPitchLimit;
    //## END PROPS GameplayCam_TargetingGrenade

    DECLARE_CLASS(UGameplayCam_TargetingGrenade,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	// GearGameplayCameraMode interface
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_Turret : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_Turret
    //## END PROPS GameplayCam_Turret

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    DECLARE_FUNCTION(execGetBaseViewOffsets)
    {
        P_GET_OBJECT(APawn,ViewedPawn);
        P_GET_BYTE(ViewportConfig);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(FVector,out_Low);
        P_GET_STRUCT_REF(FVector,out_Mid);
        P_GET_STRUCT_REF(FVector,out_High);
        P_FINISH;
        GetBaseViewOffsets(ViewedPawn,ViewportConfig,DeltaTime,out_Low,out_Mid,out_High);
    }
    DECLARE_CLASS(UGameplayCam_Turret,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_Turret)
};

class UGameplayCam_TurretTargeting : public UGameplayCam_Turret
{
public:
    //## BEGIN PROPS GameplayCam_TurretTargeting
    //## END PROPS GameplayCam_TurretTargeting

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    DECLARE_CLASS(UGameplayCam_TurretTargeting,UGameplayCam_Turret,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_TurretTargeting)
};

class UGameplayCam_Vehicle : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_Vehicle
    //## END PROPS GameplayCam_Vehicle

    virtual UBOOL UseDirectLookMode(class APawn* CameraTarget);
    virtual UBOOL LockedToViewTarget(class APawn* CameraTarget);
    virtual UBOOL ShouldFollowTarget(class APawn* CameraTarget,FLOAT& PitchInterpSpeed,FLOAT& YawInterpSpeed,FLOAT& RollInterpSpeed);
    DECLARE_FUNCTION(execUseDirectLookMode)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_FINISH;
        *(UBOOL*)Result=UseDirectLookMode(CameraTarget);
    }
    DECLARE_FUNCTION(execLockedToViewTarget)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_FINISH;
        *(UBOOL*)Result=LockedToViewTarget(CameraTarget);
    }
    DECLARE_FUNCTION(execShouldFollowTarget)
    {
        P_GET_OBJECT(APawn,CameraTarget);
        P_GET_FLOAT_REF(PitchInterpSpeed);
        P_GET_FLOAT_REF(YawInterpSpeed);
        P_GET_FLOAT_REF(RollInterpSpeed);
        P_FINISH;
        *(UBOOL*)Result=ShouldFollowTarget(CameraTarget,PitchInterpSpeed,YawInterpSpeed,RollInterpSpeed);
    }
    DECLARE_CLASS(UGameplayCam_Vehicle,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
	/** Returns View relative offsets */
	virtual void GetBaseViewOffsets(class APawn* ViewedPawn, BYTE ViewportConfig, FLOAT DeltaTime, FVector& out_Low, FVector& out_Mid, FVector& out_High);

	/**
	 * Returns location and rotation, in world space, of the camera's basis point.  The camera will rotate
	 * around this point, offsets are applied from here, etc.
	 */
	virtual void GetCameraOrigin(class APawn* TargetPawn, FVector& OriginLoc, FRotator& OriginRot);
};

class UGameplayCam_CentaurDeath : public UGameplayCam_Vehicle
{
public:
    //## BEGIN PROPS GameplayCam_CentaurDeath
    //## END PROPS GameplayCam_CentaurDeath

    DECLARE_CLASS(UGameplayCam_CentaurDeath,UGameplayCam_Vehicle,0|CLASS_Config,GearGame)
	/** Returns View relative offsets */
	virtual void GetBaseViewOffsets(class APawn* ViewedPawn, BYTE ViewportConfig, FLOAT DeltaTime, FVector& out_Low, FVector& out_Mid, FVector& out_High);
};

class UGameplayCam_Vehicle_RideReaver : public UGameplayCam_Vehicle
{
public:
    //## BEGIN PROPS GameplayCam_Vehicle_RideReaver
    FLOAT FOVBlendTime;
    FLOAT OnLandAdjustZ;
    //## END PROPS GameplayCam_Vehicle_RideReaver

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    virtual void GetCameraOrigin(class APawn* TargetPawn,FVector& OriginLoc,FRotator& OriginRot);
    DECLARE_FUNCTION(execGetBaseViewOffsets)
    {
        P_GET_OBJECT(APawn,ViewedPawn);
        P_GET_BYTE(ViewportConfig);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(FVector,out_Low);
        P_GET_STRUCT_REF(FVector,out_Mid);
        P_GET_STRUCT_REF(FVector,out_High);
        P_FINISH;
        GetBaseViewOffsets(ViewedPawn,ViewportConfig,DeltaTime,out_Low,out_Mid,out_High);
    }
    DECLARE_FUNCTION(execGetCameraOrigin)
    {
        P_GET_OBJECT(APawn,TargetPawn);
        P_GET_STRUCT_REF(FVector,OriginLoc);
        P_GET_STRUCT_REF(FRotator,OriginRot);
        P_FINISH;
        GetCameraOrigin(TargetPawn,OriginLoc,OriginRot);
    }
    DECLARE_CLASS(UGameplayCam_Vehicle_RideReaver,UGameplayCam_Vehicle,0|CLASS_Config,GearGame)
	virtual FLOAT GetFOVBlendTime(class APawn* Pawn);
	virtual FLOAT GetBlendTime(class APawn* Pawn);
};

class UGameplayCam_VehicleTurret : public UGearGameplayCameraMode
{
public:
    //## BEGIN PROPS GameplayCam_VehicleTurret
    //## END PROPS GameplayCam_VehicleTurret

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    DECLARE_FUNCTION(execGetBaseViewOffsets)
    {
        P_GET_OBJECT(APawn,ViewedPawn);
        P_GET_BYTE(ViewportConfig);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(FVector,out_Low);
        P_GET_STRUCT_REF(FVector,out_Mid);
        P_GET_STRUCT_REF(FVector,out_High);
        P_FINISH;
        GetBaseViewOffsets(ViewedPawn,ViewportConfig,DeltaTime,out_Low,out_Mid,out_High);
    }
    DECLARE_CLASS(UGameplayCam_VehicleTurret,UGearGameplayCameraMode,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_VehicleTurret)
};

class UGameplayCam_VehicleTurretTargeting : public UGameplayCam_VehicleTurret
{
public:
    //## BEGIN PROPS GameplayCam_VehicleTurretTargeting
    //## END PROPS GameplayCam_VehicleTurretTargeting

    virtual void GetBaseViewOffsets(class APawn* ViewedPawn,BYTE ViewportConfig,FLOAT DeltaTime,FVector& out_Low,FVector& out_Mid,FVector& out_High);
    DECLARE_CLASS(UGameplayCam_VehicleTurretTargeting,UGameplayCam_VehicleTurret,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGameplayCam_VehicleTurretTargeting)
};

struct FAutoframingWatchedPawn
{
    class AGearPawn* GP;
    FVector LookatLoc;
    FLOAT LastRelevantTime;
    BYTE LastTracePoint;
    FLOAT NormalizedWeight;
    BITFIELD bNoRelevanceLag:1;

    /** Constructors */
    FAutoframingWatchedPawn() {}
    FAutoframingWatchedPawn(EEventParm)
    {
        appMemzero(this, sizeof(FAutoframingWatchedPawn));
    }
};

class USpectatorCam_AutoFraming : public UObject
{
public:
    //## BEGIN PROPS SpectatorCam_AutoFraming
    class UGearSpectatorCamera* SpectatorCam;
    FLOAT LastFOV;
    FLOAT FOVInterpSpeed;
    FLOAT FOVInterpSpeed_MovingCamera;
    FRotator LastDeltaRot;
    FLOAT RotInterpSpeed;
    FLOAT RotInterpSpeed_MovingCamera;
    BITFIELD bLastLookatIsValid:1;
    BITFIELD bDebugSkipFOVAdj:1;
    BITFIELD bDebugShowWatchedPawns:1;
    BITFIELD bWasInterpolating:1;
    FVector LastLookat;
    FLOAT LookatInterpSpeed;
    FLOAT LookatInterpSpeed_MovingCamera;
    FVector2D WorldPitchRange;
    FVector2D RelativeYawRange;
    FVector2D AcceptableFOVRange;
    FLOAT BorderBufferPercentage_Horizontal;
    FLOAT BorderBufferPercentage_Vertical;
    FLOAT ZoomFOVAdjustmentMag;
    FLOAT ZoomBufferAdjustmentMag;
    FLOAT DirSelectionWeightMultiplier_Good;
    FLOAT DirSelectionWeightMultiplier_Bad;
    FVector LastCamActorLoc;
    TArrayNoInit<struct FAutoframingWatchedPawn> RelevantPawnList;
    FLOAT RelevanceLagTime;
    FLOAT RelevanceFadeTime;
    FLOAT PawnTraceRadius;
    FLOAT VelBiasFactor;
    //## END PROPS SpectatorCam_AutoFraming

    virtual void UpdateCamera(class ACameraActor* CamActor,FLOAT DeltaTime,struct FTViewTarget& OutVT);
    DECLARE_FUNCTION(execUpdateCamera)
    {
        P_GET_OBJECT(ACameraActor,CamActor);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(struct FTViewTarget,OutVT);
        P_FINISH;
        UpdateCamera(CamActor,DeltaTime,OutVT);
    }
    DECLARE_CLASS(USpectatorCam_AutoFraming,UObject,0,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Camera");}

protected:
	FAutoframingWatchedPawn* FindRelevantPawnEntry(AGearPawn const* GP);
	FLOAT FindOptimalFOV(TArray<FAutoframingWatchedPawn> const& VisiblePawnList, FVector const& BaseLoc, FRotator const& BaseRot) const;
	FLOAT CalcHFovFromVFov(FLOAT VFovRad) const;
	FLOAT CalcVFovFromHFov(FLOAT HFovRad) const;
	void UpdateRelevantPawnList(FVector& OutCentroid, FVector const& BaseLoc, FRotator const& BaseRot, UBOOL bInterpolating);
public:
};

#endif // !INCLUDED_GEARGAME_CAMERA_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UFixedCam_AutoFraming,-1,execUpdateCamera);
AUTOGENERATE_FUNCTION(UGameplayCam_BrumakDriver,-1,execShouldFollowTarget);
AUTOGENERATE_FUNCTION(UGameplayCam_BrumakDriver,-1,execLockedToViewTarget);
AUTOGENERATE_FUNCTION(UGameplayCam_BrumakDriver,-1,execUseDirectLookMode);
AUTOGENERATE_FUNCTION(UGameplayCam_BrumakDriver,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_Conversation,-1,execGetCameraOrigin);
AUTOGENERATE_FUNCTION(UGameplayCam_CoverTargeting,-1,execGetTargetRelativeOriginOffset);
AUTOGENERATE_FUNCTION(UGameplayCam_MountedHeavyWeapon,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_Turret,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_TurretTargeting,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_Vehicle,-1,execShouldFollowTarget);
AUTOGENERATE_FUNCTION(UGameplayCam_Vehicle,-1,execLockedToViewTarget);
AUTOGENERATE_FUNCTION(UGameplayCam_Vehicle,-1,execUseDirectLookMode);
AUTOGENERATE_FUNCTION(UGameplayCam_Vehicle_RideReaver,-1,execGetCameraOrigin);
AUTOGENERATE_FUNCTION(UGameplayCam_Vehicle_RideReaver,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_VehicleTurret,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGameplayCam_VehicleTurretTargeting,-1,execGetBaseViewOffsets);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execUpdateAlpha);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execGetTargetAlpha);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execModifyCamera);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execCalcDeltaRot);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execFixCamBone);
AUTOGENERATE_FUNCTION(UGearCamMod_CameraBone,-1,execInitialize);
AUTOGENERATE_FUNCTION(UGearGameplayCamera,-1,execEndTurn);
AUTOGENERATE_FUNCTION(UGearGameplayCamera,-1,execPlayerUpdateCameraNative);
AUTOGENERATE_FUNCTION(AGearPlayerCamera,-1,execAdjustFOVForViewport);
AUTOGENERATE_FUNCTION(AGearPlayerCamera,-1,execRemoveGearPawnFromHiddenActorsArray);
AUTOGENERATE_FUNCTION(AGearPlayerCamera,-1,execAddGearPawnToHiddenActorsArray);
AUTOGENERATE_FUNCTION(AGearPlayerCamera,-1,execCacheLastTargetBaseInfo);
AUTOGENERATE_FUNCTION(USpectatorCam_AutoFraming,-1,execUpdateCamera);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_CAMERA_NATIVE_DEFS
#define GEARGAME_CAMERA_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,ACameraVolume);
DECLARE_NATIVE_TYPE(GearGame,UFixedCam_AutoFraming);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_BrumakDeath);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_BrumakDriver);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_BrumakTargeting);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_CentaurDeath);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Conversation);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Cover);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_CoverTargeting);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_CoverTargetingGrenade);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Death);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Default);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_DeployedShield);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_MountedHeavyWeapon);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_SniperZoom);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_TargetingGrenade);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Turret);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_TurretTargeting);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Vehicle);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_Vehicle_RideReaver);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_VehicleTurret);
DECLARE_NATIVE_TYPE(GearGame,UGameplayCam_VehicleTurretTargeting);
DECLARE_NATIVE_TYPE(GearGame,UGearCameraBase);
DECLARE_NATIVE_TYPE(GearGame,UGearCamMod_CameraBone);
DECLARE_NATIVE_TYPE(GearGame,UGearGameplayCamera);
DECLARE_NATIVE_TYPE(GearGame,UGearGameplayCameraMode);
DECLARE_NATIVE_TYPE(GearGame,AGearPlayerCamera);
DECLARE_NATIVE_TYPE(GearGame,UGearSpectatorCamera);
DECLARE_NATIVE_TYPE(GearGame,USpectatorCam_AutoFraming);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_CAMERA \
	ACameraVolume::StaticClass(); \
	UFixedCam_AutoFraming::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUFixedCam_AutoFramingNative; \
	UGameplayCam_BrumakDeath::StaticClass(); \
	UGameplayCam_BrumakDriver::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_BrumakDriverNative; \
	UGameplayCam_BrumakTargeting::StaticClass(); \
	UGameplayCam_CentaurDeath::StaticClass(); \
	UGameplayCam_Conversation::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_ConversationNative; \
	UGameplayCam_Cover::StaticClass(); \
	UGameplayCam_CoverTargeting::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_CoverTargetingNative; \
	UGameplayCam_CoverTargetingGrenade::StaticClass(); \
	UGameplayCam_Death::StaticClass(); \
	UGameplayCam_Default::StaticClass(); \
	UGameplayCam_DeployedShield::StaticClass(); \
	UGameplayCam_MountedHeavyWeapon::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_MountedHeavyWeaponNative; \
	UGameplayCam_SniperZoom::StaticClass(); \
	UGameplayCam_TargetingGrenade::StaticClass(); \
	UGameplayCam_Turret::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_TurretNative; \
	UGameplayCam_TurretTargeting::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_TurretTargetingNative; \
	UGameplayCam_Vehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_VehicleNative; \
	UGameplayCam_Vehicle_RideReaver::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_Vehicle_RideReaverNative; \
	UGameplayCam_VehicleTurret::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_VehicleTurretNative; \
	UGameplayCam_VehicleTurretTargeting::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGameplayCam_VehicleTurretTargetingNative; \
	UGearCameraBase::StaticClass(); \
	UGearCamMod_CameraBone::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGearCamMod_CameraBoneNative; \
	UGearGameplayCamera::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGearGameplayCameraNative; \
	UGearGameplayCameraMode::StaticClass(); \
	AGearPlayerCamera::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGearPlayerCameraNative; \
	UGearSpectatorCamera::StaticClass(); \
	USpectatorCam_AutoFraming::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSpectatorCam_AutoFramingNative; \

#endif // GEARGAME_CAMERA_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UFixedCam_AutoFraming) GGearGameUFixedCam_AutoFramingNatives[] = 
{ 
	MAP_NATIVE(UFixedCam_AutoFraming,execUpdateCamera)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UFixedCam_AutoFraming);

NATIVE_INFO(UGameplayCam_BrumakDriver) GGearGameUGameplayCam_BrumakDriverNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_BrumakDriver,execShouldFollowTarget)
	MAP_NATIVE(UGameplayCam_BrumakDriver,execLockedToViewTarget)
	MAP_NATIVE(UGameplayCam_BrumakDriver,execUseDirectLookMode)
	MAP_NATIVE(UGameplayCam_BrumakDriver,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_BrumakDriver);

NATIVE_INFO(UGameplayCam_Conversation) GGearGameUGameplayCam_ConversationNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_Conversation,execGetCameraOrigin)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_Conversation);

NATIVE_INFO(UGameplayCam_CoverTargeting) GGearGameUGameplayCam_CoverTargetingNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_CoverTargeting,execGetTargetRelativeOriginOffset)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_CoverTargeting);

NATIVE_INFO(UGameplayCam_MountedHeavyWeapon) GGearGameUGameplayCam_MountedHeavyWeaponNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_MountedHeavyWeapon,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_MountedHeavyWeapon);

NATIVE_INFO(UGameplayCam_Turret) GGearGameUGameplayCam_TurretNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_Turret,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_Turret);

NATIVE_INFO(UGameplayCam_TurretTargeting) GGearGameUGameplayCam_TurretTargetingNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_TurretTargeting,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_TurretTargeting);

NATIVE_INFO(UGameplayCam_Vehicle) GGearGameUGameplayCam_VehicleNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_Vehicle,execShouldFollowTarget)
	MAP_NATIVE(UGameplayCam_Vehicle,execLockedToViewTarget)
	MAP_NATIVE(UGameplayCam_Vehicle,execUseDirectLookMode)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_Vehicle);

NATIVE_INFO(UGameplayCam_Vehicle_RideReaver) GGearGameUGameplayCam_Vehicle_RideReaverNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_Vehicle_RideReaver,execGetCameraOrigin)
	MAP_NATIVE(UGameplayCam_Vehicle_RideReaver,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_Vehicle_RideReaver);

NATIVE_INFO(UGameplayCam_VehicleTurret) GGearGameUGameplayCam_VehicleTurretNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_VehicleTurret,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_VehicleTurret);

NATIVE_INFO(UGameplayCam_VehicleTurretTargeting) GGearGameUGameplayCam_VehicleTurretTargetingNatives[] = 
{ 
	MAP_NATIVE(UGameplayCam_VehicleTurretTargeting,execGetBaseViewOffsets)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGameplayCam_VehicleTurretTargeting);

NATIVE_INFO(UGearCamMod_CameraBone) GGearGameUGearCamMod_CameraBoneNatives[] = 
{ 
	MAP_NATIVE(UGearCamMod_CameraBone,execUpdateAlpha)
	MAP_NATIVE(UGearCamMod_CameraBone,execGetTargetAlpha)
	MAP_NATIVE(UGearCamMod_CameraBone,execModifyCamera)
	MAP_NATIVE(UGearCamMod_CameraBone,execCalcDeltaRot)
	MAP_NATIVE(UGearCamMod_CameraBone,execFixCamBone)
	MAP_NATIVE(UGearCamMod_CameraBone,execInitialize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGearCamMod_CameraBone);

NATIVE_INFO(UGearGameplayCamera) GGearGameUGearGameplayCameraNatives[] = 
{ 
	MAP_NATIVE(UGearGameplayCamera,execEndTurn)
	MAP_NATIVE(UGearGameplayCamera,execPlayerUpdateCameraNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGearGameplayCamera);

NATIVE_INFO(AGearPlayerCamera) GGearGameAGearPlayerCameraNatives[] = 
{ 
	MAP_NATIVE(AGearPlayerCamera,execAdjustFOVForViewport)
	MAP_NATIVE(AGearPlayerCamera,execRemoveGearPawnFromHiddenActorsArray)
	MAP_NATIVE(AGearPlayerCamera,execAddGearPawnToHiddenActorsArray)
	MAP_NATIVE(AGearPlayerCamera,execCacheLastTargetBaseInfo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGearPlayerCamera);

NATIVE_INFO(USpectatorCam_AutoFraming) GGearGameUSpectatorCam_AutoFramingNatives[] = 
{ 
	MAP_NATIVE(USpectatorCam_AutoFraming,execUpdateCamera)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USpectatorCam_AutoFraming);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,CameraVolume,CameraActor)
VERIFY_CLASS_SIZE_NODIE(ACameraVolume)
VERIFY_CLASS_OFFSET_NODIE(U,FixedCam_AutoFraming,FixedCam)
VERIFY_CLASS_OFFSET_NODIE(U,FixedCam_AutoFraming,FOVInterpSpeed)
VERIFY_CLASS_SIZE_NODIE(UFixedCam_AutoFraming)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_BrumakDeath)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_BrumakDriver)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_BrumakTargeting)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_CentaurDeath)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Conversation,LastFocusActor)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Conversation,CameraInFocusFOV)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Conversation)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Cover,PawnRel_Posture_Standing)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Cover,TemporaryOriginRotInterpSpeed)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Cover)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_CoverTargeting,LeanOriginOffset)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_CoverTargeting,LeanTo360AimingBlendTime)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_CoverTargeting)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_CoverTargetingGrenade,GrenadeCamPitchLimit)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_CoverTargetingGrenade)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Death)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Default,EvadePawnRelativeOffset)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Default,TemporaryOriginRotInterpSpeed)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Default)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_DeployedShield)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_MountedHeavyWeapon)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_SniperZoom)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_TargetingGrenade,GrenadeCamPitchLimit)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_TargetingGrenade)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Turret)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_TurretTargeting)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Vehicle)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Vehicle_RideReaver,FOVBlendTime)
VERIFY_CLASS_OFFSET_NODIE(U,GameplayCam_Vehicle_RideReaver,OnLandAdjustZ)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_Vehicle_RideReaver)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_VehicleTurret)
VERIFY_CLASS_SIZE_NODIE(UGameplayCam_VehicleTurretTargeting)
VERIFY_CLASS_OFFSET_NODIE(U,GearCameraBase,PlayerCamera)
VERIFY_CLASS_SIZE_NODIE(UGearCameraBase)
VERIFY_CLASS_OFFSET_NODIE(U,GearCamMod_CameraBone,CameraBoneName)
VERIFY_CLASS_OFFSET_NODIE(U,GearCamMod_CameraBone,RoadieRunShakyCamDampeningFactor)
VERIFY_CLASS_SIZE_NODIE(UGearCamMod_CameraBone)
VERIFY_CLASS_OFFSET_NODIE(U,GearGameplayCamera,LastActualCameraOrigin)
VERIFY_CLASS_OFFSET_NODIE(U,GearGameplayCamera,PenetrationAvoidanceFeelers)
VERIFY_CLASS_SIZE_NODIE(UGearGameplayCamera)
VERIFY_CLASS_OFFSET_NODIE(U,GearGameplayCameraMode,GameplayCam)
VERIFY_CLASS_OFFSET_NODIE(U,GearGameplayCameraMode,DOF_RadiusDistRange)
VERIFY_CLASS_SIZE_NODIE(UGearGameplayCameraMode)
VERIFY_CLASS_OFFSET_NODIE(A,GearPlayerCamera,CamType)
VERIFY_CLASS_OFFSET_NODIE(A,GearPlayerCamera,LastTargetBaseTM)
VERIFY_CLASS_SIZE_NODIE(AGearPlayerCamera)
VERIFY_CLASS_OFFSET_NODIE(U,GearSpectatorCamera,AutoFramingCam)
VERIFY_CLASS_OFFSET_NODIE(U,GearSpectatorCamera,ControlInfo_Zoom)
VERIFY_CLASS_SIZE_NODIE(UGearSpectatorCamera)
VERIFY_CLASS_OFFSET_NODIE(U,SpectatorCam_AutoFraming,SpectatorCam)
VERIFY_CLASS_OFFSET_NODIE(U,SpectatorCam_AutoFraming,VelBiasFactor)
VERIFY_CLASS_SIZE_NODIE(USpectatorCam_AutoFraming)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
