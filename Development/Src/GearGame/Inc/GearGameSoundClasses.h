/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_SOUND_ENUMS
#define INCLUDED_GEARGAME_SOUND_ENUMS 1

enum EGUDRole
{
    GUDRole_None            =0,
    GUDRole_Instigator      =1,
    GUDRole_Recipient       =2,
    GUDRole_EnemyWitness    =3,
    GUDRole_TeammateWitness =4,
    GUDRole_ReferencedPawn  =5,
    GUDRole_MAX             =6,
};
enum EGUDActionID
{
    GUDAction_None          =0,
    GUDAction_EnteredCombat_I=1,
    GUDAction_LostTarget_I  =2,
    GUDAction_FoundTarget_I =3,
    GUDAction_FoundTarget_R =4,
    GUDAction_KilledEnemyGeneric_I=5,
    GUDAction_KilledEnemyGeneric_TW=6,
    GUDAction_KilledEnemyChainsaw_I=7,
    GUDAction_KilledEnemyChainsaw_TW=8,
    GUDAction_KilledEnemyHeadShot_I=9,
    GUDAction_KilledEnemyHeadShot_TW=10,
    GUDAction_KilledEnemyMelee_I=11,
    GUDAction_KilledEnemyMelee_TW=12,
    GUDAction_KilledEnemyCurbstomp_I=13,
    GUDAction_KilledEnemyExecution_I=14,
    GUDAction_KilledEnemyHOD_I=15,
    GUDAction_KilledEnemyHOD_TW=16,
    GUDAction_DamagedEnemy_I=17,
    GUDAction_DamagedEnemy_R=18,
    GUDAction_DamagedEnemyHeavy_I=19,
    GUDAction_DamagedEnemyHeavy_R=20,
    GUDAction_DamageTeammate_I=21,
    GUDAction_DamageTeammate_R=22,
    GUDAction_CauseEnemyStumble_I=23,
    GUDAction_CauseEnemyStumble_R=24,
    GUDAction_TransToFleeAI_I=25,
    GUDAction_TransToFleeAI_EW=26,
    GUDAction_TransToRetreatAI_I=27,
    GUDAction_TransToRetreatAI_EW=28,
    GUDAction_TransToHoldAI_I=29,
    GUDAction_TransToHoldAI_EW=30,
    GUDAction_TransToAdvanceAI_I=31,
    GUDAction_TransToAdvanceAI_EW=32,
    GUDAction_TransToKamikazeAI_I=33,
    GUDAction_TransToKamikazeAI_EW=34,
    GUDAction_TransToMeleeAI_I=35,
    GUDAction_TransToMeleeAI_EW=36,
    GUDAction_TransToFlankAI_I=37,
    GUDAction_TransToFlankAI_EW=38,
    GUDAction_TransToFleeHODAI_I=39,
    GUDAction_TransToFleeHODAI_EW=40,
    GUDAction_ThrowingSmokeGrenade_I=41,
    GUDAction_ThrowingSmokeGrenade_EW=42,
    GUDAction_ThrowingFragGrenade_I=43,
    GUDAction_ThrowingFragGrenade_EW=44,
    GUDAction_BlockingMovement_I=45,
    GUDAction_BlockingMovement_R=46,
    GUDAction_BlockingMovement_TW=47,
    GUDAction_NoRecentDamage_I=48,
    GUDAction_FailedActiveReload_I=49,
    GUDAction_SucceededActiveReload_I=50,
    GUDAction_Reloaded_I    =51,
    GUDAction_PickedUpAmmo_I=52,
    GUDAction_PickedUpNewWeapon_I=53,
    GUDAction_PickedUpCollectible_I=54,
    GUDAction_PickedUpGrenades_I=55,
    GUDAction_PlayerHasntMoved_I=56,
    GUDAction_PlayerHasntMoved_TW=57,
    GUDAction_MysteriousEvent_TW=58,
    GUDAction_SurprisingEvent_TW=59,
    GUDAction_DangerousEvent_TW=60,
    GUDAction_NeedAmmo_I    =61,
    GUDAction_NeedAmmoGrenade_I=62,
    GUDAction_GenericWentDown_I=63,
    GUDAction_GenericWentDown_TW=64,
    GUDAction_MarcusWentDown_I=65,
    GUDAction_MarcusWentDown_TW=66,
    GUDAction_DomWentDown_I =67,
    GUDAction_DomWentDown_TW=68,
    GUDAction_BairdWentDown_I=69,
    GUDAction_BairdWentDown_TW=70,
    GUDAction_MinhWentDown_I=71,
    GUDAction_MinhWentDown_TW=72,
    GUDAction_GusWentDown_I =73,
    GUDAction_GusWentDown_TW=74,
    GUDAction_HoffmanWentDown_I=75,
    GUDAction_HoffmanWentDown_TW=76,
    GUDAction_CarmineWentDown_I=77,
    GUDAction_CarmineWentDown_TW=78,
    GUDAction_GenericNeedsRevived_I=79,
    GUDAction_GenericNeedsRevived_TW=80,
    GUDAction_MarcusNeedsRevived_I=81,
    GUDAction_MarcusNeedsRevived_TW=82,
    GUDAction_DomNeedsRevived_I=83,
    GUDAction_DomNeedsRevived_TW=84,
    GUDAction_BairdNeedsRevived_I=85,
    GUDAction_BairdNeedsRevived_TW=86,
    GUDAction_MinhNeedsRevived_I=87,
    GUDAction_MinhNeedsRevived_TW=88,
    GUDAction_GusNeedsRevived_I=89,
    GUDAction_GusNeedsRevived_TW=90,
    GUDAction_HoffmanNeedsRevived_I=91,
    GUDAction_HoffmanNeedsRevived_TW=92,
    GUDAction_CarmineNeedsRevived_I=93,
    GUDAction_CarmineNeedsRevived_TW=94,
    GUDAction_Revived_I     =95,
    GUDAction_Revived_R     =96,
    GUDAction_Attack_I      =97,
    GUDAction_NoticedTwoEnemies_TW=98,
    GUDAction_NoticedThreeEnemies_TW=99,
    GUDAction_NoticedFourEnemies_TW=100,
    GUDAction_NoticedManyEnemies_TW=101,
    GUDAction_NoticedDrone_TW=102,
    GUDAction_NoticedBoomer_TW=103,
    GUDAction_NoticedTheron_TW=104,
    GUDAction_NoticedPalaceGuard_TW=105,
    GUDAction_NoticedWretch_TW=106,
    GUDAction_NoticedHunter_TW=107,
    GUDAction_NoticedKantus_TW=108,
    GUDAction_NoticedMauler_TW=109,
    GUDAction_NoticedGrinder_TW=110,
    GUDAction_NoticedBloodmounts_TW=111,
    GUDAction_NoticedTickers_TW=112,
    GUDAction_NoticedSnipers_TW=113,
    GUDAction_NoticedEnemyGeneric_TW=114,
    GUDAction_NoticedReinforcements_TW=115,
    GUDAction_EnemiesReducedToZero_TW=116,
    GUDAction_EnemiesReducedToOne_TW=117,
    GUDAction_EnemiesReducedToTwo_TW=118,
    GUDAction_EnemiesReducedToThree_TW=119,
    GUDAction_EnemiesReducedToFour_TW=120,
    GUDAction_CombatLull_TW =121,
    GUDAction_CombatLull_EW =122,
    GUDAction_EHoleOpened_TW=123,
    GUDAction_EHoleOpenReminder_TW=124,
    GUDAction_EHoleClosedWithGrenade_I=125,
    GUDAction_EHoleClosedWithGrenade_TW=126,
    GUDAction_EHoleGrenadeMissed_I=127,
    GUDAction_EHoleGrenadeMissed_TW=128,
    GUDAction_VersusRoundBegunCOG_TW=129,
    GUDAction_VersusRoundBegunLocust_EW=130,
    GUDAction_EnemySpottedResponse_TW=131,
    GUDAction_EnemyDirAnnouncedResponse_TW=132,
    GUDAction_EnemyLocationCallout_Above=133,
    GUDAction_EnemyLocationCallout_Below=134,
    GUDAction_EnemyLocationCallout_Right=135,
    GUDAction_EnemyLocationCallout_Left=136,
    GUDAction_EnemyLocationCallout_Ahead=137,
    GUDAction_EnemyLocationCallout_Behind=138,
    GUDAction_EnemyLocationCallout_InWindow=139,
    GUDAction_EnemyLocationCallout_InDoorway=140,
    GUDAction_EnemyLocationCallout_BehindCar=141,
    GUDAction_EnemyLocationCallout_BehindTruck=142,
    GUDAction_EnemyLocationCallout_OnTruck=143,
    GUDAction_EnemyLocationCallout_BehindBarrier=144,
    GUDAction_EnemyLocationCallout_BehindColumn=145,
    GUDAction_EnemyLocationCallout_BehindCrate=146,
    GUDAction_EnemyLocationCallout_BehindWall=147,
    GUDAction_EnemyLocationCallout_BehindStatue=148,
    GUDAction_EnemyLocationCallout_BehindSandbags=149,
    GUDAction_EnemyLocationCallout_InTheOpen=150,
    GUDAction_MeatflagWentDBNO_R=151,
    GUDAction_MeatFlagGrabbedByCOG_R=152,
    GUDAction_MeatFlagGrabbedByLocust_R=153,
    GUDAction_MeatFlagStillHeldByCOG_R=154,
    GUDAction_MeatFlagStillHeldByLocust_R=155,
    GUDAction_MeatFlagReleasedByCOG_R=156,
    GUDAction_MeatFlagReleasedByLocust_R=157,
    GUDAction_MeatFlagCapturedByCOG_R=158,
    GUDAction_MeatFlagCapturedByLocust_R=159,
    GUDAction_MeatFlagKilledFormerCOGCaptor_I=160,
    GUDAction_MeatFlagKilledFormerLocustCaptor_I=161,
    GUDAction_PickedUpMeatShield_I=162,
    GUDAction_PickedUpMeatShield_R=163,
    GUDAction_KilledEnemyFlamethrower_I=164,
    GUDAction_KilledEnemyFlamethrower_TW=165,
    GUDAction_PickedUpFlamethrower_I=166,
    GUDAction_GatlingOverheated_I=167,
    GUDAction_MortarLaunched_EW=168,
    GUDAction_ThrowingInkGrenade_I=169,
    GUDAction_ThrowingInkGrenade_EW=170,
    GUDAction_StuckExplosiveToEnemy_I=171,
    GUDAction_StuckExplosiveToEnemy_R=172,
    GUDAction_GrenadeTrapSet_I=173,
    GUDAction_ExecutedMeatShield_I=174,
    GUDAction_DBNOPawnCrawlingAway_EW=175,
    GUDAction_NotifyHODEnabled=176,
    GUDAction_NotifyHODDisabled=177,
    GUDAction_NoticedACollectible=178,
    GUDAction_MeatFlagRoundBegun=179,
    GUDAction_MAX           =180,
};
enum EGUDEventID
{
    GUDEvent_None           =0,
    GUDEvent_EnteredCombat  =1,
    GUDEvent_LostTarget     =2,
    GUDEvent_FoundTarget    =3,
    GUDEvent_KilledEnemyGeneric=4,
    GUDEvent_KilledEnemyChainsaw=5,
    GUDEvent_KilledEnemyHeadShot=6,
    GUDEvent_KilledEnemyMelee=7,
    GUDEvent_KilledEnemyCurbstomp=8,
    GUDEvent_KilledEnemyExecution=9,
    GUDEvent_KilledEnemyHOD =10,
    GUDEvent_DamagedEnemy   =11,
    GUDEvent_DamagedEnemyHeavy=12,
    GUDEvent_DamageTeammate =13,
    GUDEvent_CauseEnemyStumble=14,
    GUDEvent_TransToRetreatAI=15,
    GUDEvent_TransToHoldAI  =16,
    GUDEvent_TransToAdvanceAI=17,
    GUDEvent_TransToKamikazeAI=18,
    GUDEvent_TransToMeleeAI =19,
    GUDEvent_TransToMeleeAIOffscreen=20,
    GUDEvent_TransToFlankAI =21,
    GUDEvent_TransToFleeHODAI=22,
    GUDEvent_ThrowingSmokeGrenade=23,
    GUDEvent_ThrowingFragGrenade=24,
    GUDEvent_FailedActiveReload=25,
    GUDEvent_SucceededActiveReload=26,
    GUDEvent_Reloaded       =27,
    GUDEvent_PickedUpAmmo   =28,
    GUDEvent_PickedUpNewWeapon=29,
    GUDEvent_PickedUpCollectible=30,
    GUDEvent_PickedUpGrenades=31,
    GUDEvent_PlayerHasntMoved=32,
    GUDEvent_NeedAmmo       =33,
    GUDEvent_NeedAmmoGrenade=34,
    GUDEvent_GenericWentDown=35,
    GUDEvent_MarcusWentDown =36,
    GUDEvent_DomWentDown    =37,
    GUDEvent_BairdWentDown  =38,
    GUDEvent_MinhWentDown   =39,
    GUDEvent_GusWentDown    =40,
    GUDEvent_HoffmanWentDown=41,
    GUDEvent_CarmineWentDown=42,
    GUDEvent_GenericNeedsRevived=43,
    GUDEvent_MarcusNeedsRevived=44,
    GUDEvent_DomNeedsRevived=45,
    GUDEvent_BairdNeedsRevived=46,
    GUDEvent_MinhNeedsRevived=47,
    GUDEvent_GusNeedsRevived=48,
    GUDEvent_HoffmanNeedsRevived=49,
    GUDEvent_CarmineNeedsRevived=50,
    GUDEvent_Revived        =51,
    GUDEvent_Attack         =52,
    GUDEvent_NoticedManyEnemies=53,
    GUDEvent_NoticedDrone   =54,
    GUDEvent_NoticedBoomer  =55,
    GUDEvent_NoticedTheron  =56,
    GUDEvent_NoticedPalaceGuard=57,
    GUDEvent_NoticedWretch  =58,
    GUDEvent_NoticedHunter  =59,
    GUDEvent_NoticedKantus  =60,
    GUDEvent_NoticedMauler  =61,
    GUDEvent_NoticedGrinder =62,
    GUDEvent_NoticedBloodmounts=63,
    GUDEvent_NoticedTickers =64,
    GUDEvent_NoticedSnipers =65,
    GUDEvent_NoticedEnemyGeneric=66,
    GUDEvent_NoticedReinforcements=67,
    GUDEvent_CombatLull     =68,
    GUDEvent_EHoleOpened    =69,
    GUDEvent_EHoleOpenReminder=70,
    GUDEvent_EHoleClosedWithGrenade=71,
    GUDEvent_EHoleGrenadeMissed=72,
    GUDEvent_VersusRoundBegunCOG=73,
    GUDEvent_VersusRoundBegunLocust=74,
    GUDEvent_TeammateAnnouncedEnemySpotted=75,
    GUDEvent_TeammateAnnouncedEnemyDir=76,
    GUDEvent_EnteredCover   =77,
    GUDEvent_TeammateRequestedEnemyLocDesc=78,
    GUDEvent_TeammateRequestedEnemyDir=79,
    GUDEvent_DecidedToAnounceEnemyLocDesc=80,
    GUDEvent_DecidedToAnounceEnemyDir=81,
    GUDEvent_MeatFlagWentDBNO=82,
    GUDEvent_MeatFlagGrabbedByCOG=83,
    GUDEvent_MeatFlagGrabbedByLocust=84,
    GUDEvent_MeatFlagStillHeldByCOG=85,
    GUDEvent_MeatFlagStillHeldByLocust=86,
    GUDEvent_MeatFlagReleasedByCOG=87,
    GUDEvent_MeatFlagReleasedByLocust=88,
    GUDEvent_MeatFlagCapturedByCOG=89,
    GUDEvent_MeatFlagCapturedByLocust=90,
    GUDEvent_MeatFlagKilledFormerCOGCaptor=91,
    GUDEvent_MeatFlagKilledFormerLocustCaptor=92,
    GUDEvent_PickedUpMeatShield=93,
    GUDEvent_KilledEnemyFlamethrower=94,
    GUDEvent_PickedUpFlamethrower=95,
    GUDEvent_GatlingOverheated=96,
    GUDEvent_MortarLaunched =97,
    GUDEvent_ThrowingInkGrenade=98,
    GUDEvent_StuckExplosiveToEnemy=99,
    GUDEvent_GrenadeTrapSet =100,
    GUDEvent_ExecutedMeatShield=101,
    GUDEvent_DBNOPawnCrawlingAway=102,
    GUDEvent_MAX            =103,
};
enum GearFoleyID
{
    GearFoley_None          =0,
    GearFoley_EvadeImpactFX =1,
    GearFoley_BodyMovement_RunningFX=2,
    GearFoley_BodyMovement_RoadieRunFX=3,
    GearFoley_BodyTurnFX    =4,
    GearFoley_EnterCoverLowFX=5,
    GearFoley_ExitCoverLowFX=6,
    GearFoley_EnterCoverHighFX=7,
    GearFoley_ExitCoverHighFX=8,
    GearFoley_ToCrouchFX    =9,
    GearFoley_FromCrouchFX  =10,
    GearFoley_BodyWallImpactFX=11,
    GearFoley_MeleeAttackHitFleshFX=12,
    GearFoley_MeleeAttackHitArmorFX=13,
    GearFoley_MeleeAttackFX =14,
    GearFoley_FastHeartbeat =15,
    GearFoley_SlowHeartbeat =16,
    GearFoley_RevivingFlatliningSound=17,
    GearFoley_Body_CoverSlip=18,
    GearFoley_Body_Mantle   =19,
    GearFoley_Body_ClimbUp  =20,
    GearFoley_Body_SwatTurn =21,
    GearFoley_Body_Popup    =22,
    GearFoley_Body_Lean     =23,
    GearFoley_Body_Aim      =24,
    GearFoley_MAX           =25,
};
enum GearVoiceEffortID
{
    GearEffort_None         =0,
    GearEffort_PainSmall    =1,
    GearEffort_PainMedium   =2,
    GearEffort_PainLarge    =3,
    GearEffort_PainHuge     =4,
    GearEffort_BoloReleaseEffort=5,
    GearEffort_DeathBreathe =6,
    GearEffort_NearDeathBreathe=7,
    GearEffort_RoadieRunBreathe=8,
    GearEffort_ChainSawAttackEffort=9,
    GearEffort_CoverSlamEffort=10,
    GearEffort_CrouchEffort =11,
    GearEffort_DeathScream  =12,
    GearEffort_SuddenDeathScream=13,
    GearEffort_DoorPullEffort=14,
    GearEffort_ShortFallEffort=15,
    GearEffort_KickEffort   =16,
    GearEffort_LandLightEffort=17,
    GearEffort_MantleEffort =18,
    GearEffort_MeleeAttackLargeEffort=19,
    GearEffort_MeleeAttackMediumEffort=20,
    GearEffort_MeleeAttackSmallEffort=21,
    GearEffort_EvadeEffort  =22,
    GearEffort_EvadeImpactEffort=23,
    GearEffort_LiftHeavyWeaponEffort=24,
    GearEffort_InSmokeCough =25,
    GearEffort_ImpactCough  =26,
    GearEffort_InInkCough   =27,
    GearEffort_OnFirePain   =28,
    GearEffort_OnFireDeath  =29,
    GearEffort_ChainsawDuel =30,
    GearEffort_BoltokLongExecutionEffort=31,
    GearEffort_TorquebowLongExecutionEffort=32,
    GearEffort_PunchFaceLongExecutionEffort=33,
    GearEffort_CurbStompLongExecutionEffort=34,
    GearEffort_SniperLongExecutionEffort=35,
    GearEffort_ShotgunQuickExecutionEffort=36,
    GearEffort_SniperQuickExecutionEffort=37,
    GearEffort_BoomshotQuickExecutionEffort=38,
    GearEffort_TorquebowQuickExecutionEffort=39,
    GearEffort_MeatbagExecutionEffort=40,
    GearEffort_GrapplingHookMantleOverEffort=41,
    GearEffort_FellOffGrapplingHook=42,
    GearEffort_MAX          =43,
};
enum GUDChooseActionMethod
{
    GUDChooseMethod_Normal  =0,
    GUDChooseMethod_Directional=1,
    GUDChooseMethod_LocationDescription=2,
    GUDChooseMethod_MAX     =3,
};
enum GUDActionMap_LocationDescription
{
    GUDActionMap_LocDesc_None=0,
    GUDActionMap_LocDesc_InWindow=1,
    GUDActionMap_LocDesc_InDoorway=2,
    GUDActionMap_LocDesc_BehindCar=3,
    GUDActionMap_LocDesc_BehindTruck=4,
    GUDActionMap_LocDesc_OnTruck=5,
    GUDActionMap_LocDesc_BehindBarrier=6,
    GUDActionMap_LocDesc_BehindColumn=7,
    GUDActionMap_LocDesc_BehindCrate=8,
    GUDActionMap_LocDesc_BehindWall=9,
    GUDActionMap_LocDesc_BehindStatue=10,
    GUDActionMap_LocDesc_BehindSandbags=11,
    GUDActionMap_LocDesc_InTheOpen=12,
    GUDActionMap_LocDesc_MAX=13,
};
enum GUDEventActionMap_Directional
{
    GUDActionMap_Dir_Above  =0,
    GUDActionMap_Dir_Below  =1,
    GUDActionMap_Dir_Right  =2,
    GUDActionMap_Dir_Left   =3,
    GUDActionMap_Dir_Ahead  =4,
    GUDActionMap_Dir_Behind =5,
    GUDActionMap_Dir_MAX    =6,
};
enum GUDEventActionMap_Normal
{
    GUDActionMap_Instigator =0,
    GUDActionMap_Recipient  =1,
    GUDActionMap_TeamWitness=2,
    GUDActionMap_EnemyWitness=3,
    GUDActionMap_MAX        =4,
};

#endif // !INCLUDED_GEARGAME_SOUND_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetActionName)
AUTOGENERATE_NAME(GetEventName)
AUTOGENERATE_NAME(GUDBrowserGetCurrentGUDLineIndex)
AUTOGENERATE_NAME(IsSameTeam)
AUTOGENERATE_NAME(NotifyDialogueStart)
AUTOGENERATE_NAME(RegisterAIFactory)
AUTOGENERATE_NAME(RemoteSpeakLine)
AUTOGENERATE_NAME(RemoteSpeakLineFinished)
AUTOGENERATE_NAME(UnRegisterAIFactory)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_SOUND_CLASSES
#define INCLUDED_GEARGAME_SOUND_CLASSES 1

class UGUDTypes : public UObject
{
public:
    //## BEGIN PROPS GUDTypes
    //## END PROPS GUDTypes

    DECLARE_ABSTRACT_CLASS(UGUDTypes,UObject,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGUDTypes)
};

struct FGUDLine
{
    class USoundCue* Audio;
    BYTE Addressee;
    BYTE ReferringTo;
    BYTE bAlwaysLoad;
    BYTE bCookerProcessed;
    TArray<BYTE> ResponseEventIDs;

    /** Constructors */
    FGUDLine() {}
    FGUDLine(EEventParm)
    {
        appMemzero(this, sizeof(FGUDLine));
    }
};

struct FGUDAction
{
    TArrayNoInit<INT> CombatOnlyLineIndices;
    TArrayNoInit<INT> NonCombatOnlyLineIndices;
    TArrayNoInit<INT> LineIndices;

    /** Constructors */
    FGUDAction() {}
    FGUDAction(EEventParm)
    {
        appMemzero(this, sizeof(FGUDAction));
    }
};

class UGUDBank : public UObject
{
public:
    //## BEGIN PROPS GUDBank
    TArrayNoInit<struct FGUDLine> GUDLines;
    TArrayNoInit<struct FGUDAction> GUDActions;
    FStringNoInit SourceGUDBankPath;
    //## END PROPS GUDBank

    DECLARE_CLASS(UGUDBank,UObject,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGUDBank)
};

struct FGearFoleyEntry
{
    BYTE Id;
    TArrayNoInit<class USoundCue*> Sounds;

    /** Constructors */
    FGearFoleyEntry() {}
    FGearFoleyEntry(EEventParm)
    {
        appMemzero(this, sizeof(FGearFoleyEntry));
    }
};

struct FGearVoiceEffortEntry
{
    BYTE Id;
    TArrayNoInit<class USoundCue*> Sounds;

    /** Constructors */
    FGearVoiceEffortEntry() {}
    FGearVoiceEffortEntry(EEventParm)
    {
        appMemzero(this, sizeof(FGearVoiceEffortEntry));
    }
};

class UGearSoundGroup : public UObject
{
public:
    //## BEGIN PROPS GearSoundGroup
    INT ClassVersion;
    INT ObjVersion;
    class UGearSoundGroup* Parent;
    TArrayNoInit<struct FGearFoleyEntry> FoleySoundFX;
    TArrayNoInit<struct FGearVoiceEffortEntry> VoiceEfforts;
    TArrayNoInit<INT> LastEffortIdx;
    //## END PROPS GearSoundGroup

    virtual class USoundCue* FindEffortCue(BYTE EffortID);
    virtual class USoundCue* FindFoleyCue(BYTE FoleyID) const;
    virtual void DumpMemoryUsage(UBOOL bDetailed=FALSE);
    DECLARE_FUNCTION(execFindEffortCue)
    {
        P_GET_BYTE(EffortID);
        P_FINISH;
        *(class USoundCue**)Result=FindEffortCue(EffortID);
    }
    DECLARE_FUNCTION(execFindFoleyCue)
    {
        P_GET_BYTE(FoleyID);
        P_FINISH;
        *(class USoundCue**)Result=FindFoleyCue(FoleyID);
    }
    DECLARE_FUNCTION(execDumpMemoryUsage)
    {
        P_GET_UBOOL_OPTX(bDetailed,FALSE);
        P_FINISH;
        DumpMemoryUsage(bDetailed);
    }
    DECLARE_CLASS(UGearSoundGroup,UObject,0,GearGame)
protected:
	void ValidateData();

public:
	virtual void PostLoad();
	virtual void PostEditChange( class FEditPropertyChain& PropertyThatChanged );
};

struct FGUDEventProperties
{
    FLOAT ChanceToPlay;
    FLOAT ChanceToPlayMP;
    FLOAT MinTimeBetweenSec;
    FLOAT TimeLastPlayed;
    TArrayNoInit<BYTE> ActionIDs;
    BYTE ChooseActionMethod;
    FLOAT ObserverDelay;
    TArrayNoInit<BYTE> LinkedEvents;
    BYTE MPBroadcastFilter;
    BYTE ForcedSpeakerRole;
    FLOAT MaxWitnessDistSq;

    /** Constructors */
    FGUDEventProperties() {}
    FGUDEventProperties(EEventParm)
    {
        appMemzero(this, sizeof(FGUDEventProperties));
    }
};

struct FGUDEvent
{
    class AGearPawn* Instigator;
    class AGearPawn* Recipient;
    BYTE Id;
    FLOAT DelayTimeRemainingSec;
    class AGearPawn* ReferencedPawn;
    BITFIELD bIsResponseEvent:1;

    /** Constructors */
    FGUDEvent() {}
    FGUDEvent(EEventParm)
    {
        appMemzero(this, sizeof(FGUDEvent));
    }
};

struct FLoadedGUDAsset
{
    FLOAT LoadTime;
    class UGUDBank* Bank;
    class UFaceFXAnimSet* AnimSet;

		virtual void Serialize(FArchive& Ar)
		{
			Ar << LoadTime;
			Ar << Bank;
			Ar << AnimSet;
		}

		friend FArchive& operator<<(FArchive& Ar, FLoadedGUDAsset& LoadedAsset)
		{
			return Ar << LoadedAsset.LoadTime << LoadedAsset.Bank << LoadedAsset.AnimSet;
		}
	
};

struct FGUDBankCollection
{
    FLOAT ZeroRefCountTime;
    INT NumAvailableBanks;
    TArrayNoInit<struct FLoadedGUDAsset> LoadedAssets;
    TArrayNoInit<class AActor*> Speakers;

		virtual void Serialize(FArchive& Ar)
		{
			Ar << ZeroRefCountTime;
			Ar << NumAvailableBanks;
			Ar << LoadedAssets;
			Ar << Speakers;
		}

		friend FArchive& operator<<(FArchive& Ar, FGUDBankCollection& Collection)
		{
			return Ar << Collection.ZeroRefCountTime
					  << Collection.NumAvailableBanks
					  << Collection.LoadedAssets
					  << Collection.Speakers;
		}
	
};

struct FGUDSpeakers
{
    FStringNoInit GUDBankName;
    FStringNoInit LoadGUDBankName;
    TArrayNoInit<class AActor*> Speakers;
    INT ApproxLoadBankSize;
    INT VarietyIndex;

		virtual void Serialize(FArchive& Ar)
		{
			Ar << GUDBankName;
			Ar << LoadGUDBankName;
			Ar << Speakers;
			Ar << ApproxLoadBankSize;
			Ar << VarietyIndex;
		}

		friend FArchive& operator<<(FArchive& Ar, FGUDSpeakers& Source)
		{
			return Ar << Source.GUDBankName << Source.LoadGUDBankName << Source.Speakers << Source.ApproxLoadBankSize << Source.VarietyIndex;
		}
	
};

struct FGUDBrowserCharType
{
    FName Name;
    FName SetPlayerCharName;
    FStringNoInit MasterBankClassName;
    TArrayNoInit<class UFaceFXAnimSet*> LoadedFaceFXAnimSets;

    /** Constructors */
    FGUDBrowserCharType() {}
    FGUDBrowserCharType(EEventParm)
    {
        appMemzero(this, sizeof(FGUDBrowserCharType));
    }
};

struct FEffortBrowserCharType
{
    FName SetPlayerCharName;
    FStringNoInit SoundGroupObjectName;
    class UFaceFXAnimSet* LoadedFaceFXAnimSet;

    /** Constructors */
    FEffortBrowserCharType() {}
    FEffortBrowserCharType(EEventParm)
    {
        appMemzero(this, sizeof(FEffortBrowserCharType));
    }
};

#define UCONST_EFFORTSBROWSER_LOOKSBAD 0.994f
#define UCONST_EFFORTSBROWSER_LOOKSGOOD 1.019f
#define UCONST_GUDBROWSER_LOOKSBAD 134
#define UCONST_GUDBROWSER_LOOKSGOOD 133

struct GUDManager_eventGetActionName_Parms
{
    BYTE Id;
    FString ReturnValue;
    GUDManager_eventGetActionName_Parms(EEventParm)
    {
    }
};
struct GUDManager_eventGetEventName_Parms
{
    BYTE Id;
    FString ReturnValue;
    GUDManager_eventGetEventName_Parms(EEventParm)
    {
    }
};
struct GUDManager_eventGUDBrowserGetCurrentGUDLineIndex_Parms
{
    INT ReturnValue;
    GUDManager_eventGUDBrowserGetCurrentGUDLineIndex_Parms(EEventParm)
    {
    }
};
class AGUDManager : public AActor
{
public:
    //## BEGIN PROPS GUDManager
    TArrayNoInit<struct FGUDEventProperties> EventProperties;
    TArrayNoInit<struct FGUDEvent> QueuedEvents;
    class UGUDToC* TableOfContents;
    TMap<FString,FGUDBankCollection> GUDBankCollectionsMap;
    INT ApproxTotalUsedMemory;
    TMap<FString,FGUDSpeakers> PendingGUDBanksMap;
    TMap<FString,FString> PendingGUDBanksToPawnGUDBanksMap;
    TMap<FString,FGUDSpeakers> PendingGUDLoadsMap;
    TMap<FString,FGUDSpeakers> PendingGUDLocalizedLoadsMap;
    BITFIELD bDebugGUDEvents:1;
    BITFIELD bDebugGUDSLogging:1;
    BITFIELD bShowGUDDebugText:1;
    BITFIELD bDisabled:1;
    BITFIELD bForceInCombatGUDS:1;
    BITFIELD GUDBrowser_CurrentMP:1;
    BITFIELD bEnableGUDSBrowsing:1;
    BITFIELD bEnableEffortsBrowsing:1;
    BITFIELD bDisableGUDSStreaming:1;
    FLOAT GlobalChanceToPlayMultiplier;
    BYTE TeamChannel[3];
    TArrayNoInit<class AActor*> DeferredSpeakerRegistrations;
    INT GUDBrowser_CurrentAction;
    INT GUDBrowser_CurrentLine;
    class UClass* GUDBrowser_CurrentMasterBankClass;
    TArrayNoInit<struct FGUDBrowserCharType> GUDBrowserChars;
    INT GUDBrowser_CurrentCharType;
    TArrayNoInit<struct FEffortBrowserCharType> EffortsBrowserChars;
    INT EffortsBrowser_CurrentCharType;
    INT EffortsBrowser_CurrentEffortID;
    INT EffortsBrowser_CurrentSoundIdx;
    class UGearSoundGroup* EffortsBrowser_CurrentGSG;
    FLOAT LastStreamingUpdateTime;
    FLOAT StreamingUpdateIntervalSec;
    FLOAT LastVarietyBankSwapTime;
    FLOAT VarietyBankSwapIntervalSec;
    INT GUDSMemoryBudget;
    FLOAT OrphanedRootBankUnloadDelay;
    INT VarietyBankCap;
    //## END PROPS GUDManager

    virtual UBOOL RegisterSpeaker(class AActor* Speaker);
    virtual UBOOL UnregisterSpeaker(class AActor* Speaker);
    virtual FString GetSpeakerGUDBankName(class AActor* Speaker);
    virtual UBOOL LoadRandomVarietyBanks(class AActor* Speaker,INT BankCount,UBOOL bUnloadEqualNumber);
    virtual UBOOL UnloadOldestVarietyBanks(class AActor* Speaker,INT BankCount);
    virtual UBOOL UnloadAllVarietyBanks(class AActor* Speaker);
    virtual UBOOL FlushOutAllVarietyBanks();
    void NotifyExclusiveSpeech(class AGearPawn* WP,class USoundCue* Audio,BYTE SpeechPriority);
    UBOOL IsOkToPlayGUDSLine(INT TeamNum,UBOOL bResponseEvent=FALSE) const;
    void TriggerGUDEventInternal(BYTE Id,class APawn* InInstigator,class APawn* Recipient,class APawn* ReferringTo,FLOAT DelaySec,UBOOL bResponseEvent);
    class AGearPawn* GetGUDSPawn(class APawn* P) const;
    void ChooseLineFromAction(BYTE ActionID,class AActor* Speaker,struct FGUDLine& Line,class AGearPawn** Addressee=NULL,class AGearPawn** ReferringTo=NULL,const struct FGUDEvent* Event=NULL);
    void ChooseLineFromEvent(const struct FGUDEvent& Event,struct FGUDLine& Line,class AActor*& Speaker,class AGearPawn*& Addressee,class AGearPawn*& ReferringTo,BYTE& Action);
    void PlayGUDSAction(BYTE ActionID,class AActor* Speaker,class AGearPawn* Addressee=NULL,class AGearPawn* ReferringTo=NULL,BYTE MPBroadcastFilter=0);
    void HandleGUDEvent(const struct FGUDEvent& Event);
    UBOOL PlayGUDSLineInternal(const struct FGUDLine& LineToPlay,class AActor* Speaker,class AGearPawn* Addressee,class AGearPawn* ReferringTo,FLOAT DelaySec=0,BYTE MPBroadcastFilter=0);
    void ReplicateLoadedGUDBanks(class AGearPC* PC);
    virtual void DoDeferredSpeakerRegistrations();
    virtual void GUDBrowserMarkLineLooksGood();
    virtual void GUDBrowserMarkLineLooksBad();
    virtual void DrawDebugStreaming(class UCanvas* Canvas);
    DECLARE_FUNCTION(execRegisterSpeaker)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_FINISH;
        *(UBOOL*)Result=RegisterSpeaker(Speaker);
    }
    DECLARE_FUNCTION(execUnregisterSpeaker)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_FINISH;
        *(UBOOL*)Result=UnregisterSpeaker(Speaker);
    }
    DECLARE_FUNCTION(execGetSpeakerGUDBankName)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_FINISH;
        *(FString*)Result=GetSpeakerGUDBankName(Speaker);
    }
    DECLARE_FUNCTION(execLoadRandomVarietyBanks)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_GET_INT(BankCount);
        P_GET_UBOOL(bUnloadEqualNumber);
        P_FINISH;
        *(UBOOL*)Result=LoadRandomVarietyBanks(Speaker,BankCount,bUnloadEqualNumber);
    }
    DECLARE_FUNCTION(execUnloadOldestVarietyBanks)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_GET_INT(BankCount);
        P_FINISH;
        *(UBOOL*)Result=UnloadOldestVarietyBanks(Speaker,BankCount);
    }
    DECLARE_FUNCTION(execUnloadAllVarietyBanks)
    {
        P_GET_OBJECT(AActor,Speaker);
        P_FINISH;
        *(UBOOL*)Result=UnloadAllVarietyBanks(Speaker);
    }
    DECLARE_FUNCTION(execFlushOutAllVarietyBanks)
    {
        P_FINISH;
        *(UBOOL*)Result=FlushOutAllVarietyBanks();
    }
    DECLARE_FUNCTION(execNotifyExclusiveSpeech)
    {
        P_GET_OBJECT(AGearPawn,WP);
        P_GET_OBJECT(USoundCue,Audio);
        P_GET_BYTE(SpeechPriority);
        P_FINISH;
        NotifyExclusiveSpeech(WP,Audio,SpeechPriority);
    }
    DECLARE_FUNCTION(execIsOkToPlayGUDSLine)
    {
        P_GET_INT(TeamNum);
        P_GET_UBOOL_OPTX(bResponseEvent,FALSE);
        P_FINISH;
        *(UBOOL*)Result=IsOkToPlayGUDSLine(TeamNum,bResponseEvent);
    }
    DECLARE_FUNCTION(execTriggerGUDEventInternal)
    {
        P_GET_BYTE(Id);
        P_GET_OBJECT(APawn,InInstigator);
        P_GET_OBJECT(APawn,Recipient);
        P_GET_OBJECT(APawn,ReferringTo);
        P_GET_FLOAT(DelaySec);
        P_GET_UBOOL(bResponseEvent);
        P_FINISH;
        TriggerGUDEventInternal(Id,InInstigator,Recipient,ReferringTo,DelaySec,bResponseEvent);
    }
    DECLARE_FUNCTION(execGetGUDSPawn)
    {
        P_GET_OBJECT(APawn,P);
        P_FINISH;
        *(class AGearPawn**)Result=GetGUDSPawn(P);
    }
    DECLARE_FUNCTION(execChooseLineFromAction)
    {
        P_GET_BYTE(ActionID);
        P_GET_OBJECT(AActor,Speaker);
        P_GET_STRUCT_INIT_REF(struct FGUDLine,Line);
        P_GET_OBJECT_OPTX_REF(AGearPawn,Addressee,NULL);
        P_GET_OBJECT_OPTX_REF(AGearPawn,ReferringTo,NULL);
        P_GET_STRUCT_OPTX_REF(struct FGUDEvent,Event,FGUDEvent(EC_EventParm));
        P_FINISH;
        ChooseLineFromAction(ActionID,Speaker,Line,pAddressee ? &Addressee : NULL,pReferringTo ? &ReferringTo : NULL,pEvent ? &Event : NULL);
    }
    DECLARE_FUNCTION(execChooseLineFromEvent)
    {
        P_GET_STRUCT_REF(struct FGUDEvent,Event);
        P_GET_STRUCT_INIT_REF(struct FGUDLine,Line);
        P_GET_OBJECT_REF(AActor,Speaker);
        P_GET_OBJECT_REF(AGearPawn,Addressee);
        P_GET_OBJECT_REF(AGearPawn,ReferringTo);
        P_GET_BYTE_REF(Action);
        P_FINISH;
        ChooseLineFromEvent(Event,Line,Speaker,Addressee,ReferringTo,Action);
    }
    DECLARE_FUNCTION(execPlayGUDSAction)
    {
        P_GET_BYTE(ActionID);
        P_GET_OBJECT(AActor,Speaker);
        P_GET_OBJECT_OPTX(AGearPawn,Addressee,NULL);
        P_GET_OBJECT_OPTX(AGearPawn,ReferringTo,NULL);
        P_GET_BYTE_OPTX(MPBroadcastFilter,0);
        P_FINISH;
        PlayGUDSAction(ActionID,Speaker,Addressee,ReferringTo,MPBroadcastFilter);
    }
    DECLARE_FUNCTION(execHandleGUDEvent)
    {
        P_GET_STRUCT_REF(struct FGUDEvent,Event);
        P_FINISH;
        HandleGUDEvent(Event);
    }
    DECLARE_FUNCTION(execPlayGUDSLineInternal)
    {
        P_GET_STRUCT_INIT_REF(struct FGUDLine,LineToPlay);
        P_GET_OBJECT(AActor,Speaker);
        P_GET_OBJECT(AGearPawn,Addressee);
        P_GET_OBJECT(AGearPawn,ReferringTo);
        P_GET_FLOAT_OPTX(DelaySec,0);
        P_GET_BYTE_OPTX(MPBroadcastFilter,0);
        P_FINISH;
        *(UBOOL*)Result=PlayGUDSLineInternal(LineToPlay,Speaker,Addressee,ReferringTo,DelaySec,MPBroadcastFilter);
    }
    DECLARE_FUNCTION(execReplicateLoadedGUDBanks)
    {
        P_GET_OBJECT(AGearPC,PC);
        P_FINISH;
        ReplicateLoadedGUDBanks(PC);
    }
    DECLARE_FUNCTION(execDoDeferredSpeakerRegistrations)
    {
        P_FINISH;
        DoDeferredSpeakerRegistrations();
    }
    DECLARE_FUNCTION(execGUDBrowserMarkLineLooksGood)
    {
        P_FINISH;
        GUDBrowserMarkLineLooksGood();
    }
    DECLARE_FUNCTION(execGUDBrowserMarkLineLooksBad)
    {
        P_FINISH;
        GUDBrowserMarkLineLooksBad();
    }
    DECLARE_FUNCTION(execDrawDebugStreaming)
    {
        P_GET_OBJECT(UCanvas,Canvas);
        P_FINISH;
        DrawDebugStreaming(Canvas);
    }
    FString eventGetActionName(BYTE Id)
    {
        GUDManager_eventGetActionName_Parms Parms(EC_EventParm);
        Parms.Id=Id;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetActionName),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetEventName(BYTE Id)
    {
        GUDManager_eventGetEventName_Parms Parms(EC_EventParm);
        Parms.Id=Id;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetEventName),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGUDBrowserGetCurrentGUDLineIndex()
    {
        GUDManager_eventGUDBrowserGetCurrentGUDLineIndex_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GEARGAME_GUDBrowserGetCurrentGUDLineIndex),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AGUDManager,AActor,0|CLASS_Config,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

public:
	virtual void AddReferencedObjects( TArray<UObject*>& ObjectArray );
	virtual void Serialize(FArchive& Ar);

	// AActor interface...
	virtual void Spawned();
	/**
	 *	TickSpecial	- called by AActor::Tick
	 *	@param	DeltaSeconds	The time since the last tick.
	 */
	virtual void TickSpecial(FLOAT DeltaSeconds);

protected:
	UBOOL IsObserverLine(EGUDEventID EventID, EGUDActionID ActionID) const;
	UBOOL SpeakerHasLineForAction(AActor& Speaker, UINT ActionID) const;
	EGUDActionID ChooseActionToPlay_Normal(const struct FGUDEvent& Event, class AActor*& Speaker) const;
	EGUDActionID ChooseActionToPlay_Directional(const struct FGUDEvent& Event, class AActor*& Speaker) const;
	EGUDActionID ChooseActionToPlay_LocationDescription(const struct FGUDEvent& Event, class AActor*& Speaker) const;
	AActor* FindWitnessSpeaker(FGUDEvent const& Event, UINT ActionID, UBOOL bIncludeTeammates, UBOOL bIncludeEnemies, UBOOL bIncludeRemoteSpeakers) const;

	UBOOL LoadGUDBank(AActor* Speaker, const FString& GUDBankName, const FString& FaceFXAnimSetName);
	UBOOL UnloadGUDBank(AActor* Speaker);

	INT GetAvailableGUDSMemory() const;

public:
	/**
	 *	Process the given package, treating it as the TableOfContents.
	 *
	 *	@param	InToCPackage	The ToC package.
	 *	@return	UBOOL			TRUE if ToC was loaded; FALSE otherwise.
	 */
	UBOOL ProcessTableOfContentsPackage(UObject* InToCPackage);

	/**
	 *	Process the given package, treating it as a LocalizedGUDBank.
	 *
	 *	@param	InLocalizedGUDBank	The package to process.
	 *	@return	UBOOL				TRUE if it was processed; FALSE otherwise.
	 */
	UBOOL ProcessLocalizedGUDBankPackage(UObject* InLocalizedGUDBank);

	/**
	 *	Process the given package, treating it as a GUDBank.
	 *
	 *	@param	InGUDBank		The package to process.
	 *	@return	UBOOL			TRUE if it was processed; FALSE otherwise.
	 */
	UBOOL ProcessGUDBankPackage(UObject* InGUDBank);

	/**
	 *	Kick off a load of the localized version of the given GUDBank package...
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *	@param	LoadGUDBankName		The load (package) name of the GUDBank.
	 *	@param	Speaker				The speaker to register for it.
	 *	@param	Speakers			The array of speakers to register for it.
	 *	@param	VarietyIndex		The variety index being loaded, or -1 for root.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed (ie, there is no loc version).
	 */
	UBOOL LoadLocalizedPackage(const FString& GUDBankName, const FString& GUDBankLoadName, AActor* Speaker, TArrayNoInit<AActor*>* Speakers, INT VarietyIndex=-1);

	/**
	 *	Kick off a load of the given GUDBank package...
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *	@param	LoadGUDBankName		The load (package) name of the GUDBank.
	 *	@param	Speaker				The speaker to register for it.
	 *	@param	Speakers			The array of speakers to register for it.
	 *	@param	VarietyIndex		The variety index being loaded, or -1 for root.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed.
	 */
	UBOOL LoadGUDBankPackage(const FString& GUDBankName, const FString& LoadGUDBankName, AActor* Speaker, TArrayNoInit<AActor*>* Speakers, INT VarietyIndex=-1);

	/**
	 *	Completely remove the given GUDBank.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if not.
	 */
	UBOOL FlushGUDBank(const FString& GUDBankName);

	/**
	 *	See if the given variety bank is loaded.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *	@param	VarietyIndex		The index of the bank to check.
	 *
	 *	@return	UBOOL				TRUE if loaded; FALSE if not.
	 */
	UBOOL IsVarietyBankLoaded(const FString& GUDBankName, INT VarietyIndex);

	/**
	 *	Load the given variety bank for the GUDBankName collection.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *	@param	VarietyIndex		The index of the bank to load. If -1, pick a random one.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed.
	 */
	UBOOL LoadVarietyGUDBank(const FString& GUDBankName, INT VarietyIndex);

	/**
	 *	Unload the given variety bank for the GUDBankName collection.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *	@param	VarietyIndex		The index of the bank to load.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed.
	 */
	UBOOL UnloadVarietyGUDBank(const FString& GUDBankName, INT VarietyIndex);

	/**
	 *	Load all the variety banks for the given source GUDBank.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed.
	 */
	UBOOL LoadAllVarietyBanks(const FString& GUDBankName);

	/**
	 *	Unload all the variety banks for the given source GUDBank.
	 *
	 *	@param	GUDBankName			The name of the GUDBank.
	 *
	 *	@return	UBOOL				TRUE if successful; FALSE if it failed.
	 */
	UBOOL UnloadAllVarietyBanks(const FString& GUDBankName);

	// Test function...
	void RunTest(const FString& InPawnName, TArray<FString>& Tokens);

	/** This will log out all of the currently loaded guds data to the passed in FOutputDevice **/
	void LogoutStreamedPackageData( FOutputDevice& Ar );
};

struct FBattleStatusStruct
{
    TArrayNoInit<class AGearPawn*> KnownEnemies;
    FVector ToEnemyCentroid;
    BITFIELD bSpawnerIsActive:1;
    TArrayNoInit<class USeqAct_AIFactory*> AIFactories;

    /** Constructors */
    FBattleStatusStruct() {}
    FBattleStatusStruct(EEventParm)
    {
        appMemzero(this, sizeof(FBattleStatusStruct));
    }
};

struct FRecentEnemyNotice
{
    class AGearPawn* Enemy;
    TArrayNoInit<class AGearPawn*> WhoNoticed;

    /** Constructors */
    FRecentEnemyNotice() {}
    FRecentEnemyNotice(EEventParm)
    {
        appMemzero(this, sizeof(FRecentEnemyNotice));
    }
};

struct BattleStatusMonitor_eventUnRegisterAIFactory_Parms
{
    class USeqAct_AIFactory* Factory;
    BattleStatusMonitor_eventUnRegisterAIFactory_Parms(EEventParm)
    {
    }
};
struct BattleStatusMonitor_eventRegisterAIFactory_Parms
{
    class USeqAct_AIFactory* Factory;
    BattleStatusMonitor_eventRegisterAIFactory_Parms(EEventParm)
    {
    }
};
class ABattleStatusMonitor : public AActor
{
public:
    //## BEGIN PROPS BattleStatusMonitor
    struct FBattleStatusStruct COGBattleStatus;
    FLOAT CombatLullNotifyTime;
    FLOAT LastCombalLullEvent;
    TArrayNoInit<struct FRecentEnemyNotice> RecentNoticeQueue;
    FLOAT LastZeroKnownEnemiesTime;
    BITFIELD bNoGUDSNextUpdate:1;
    //## END PROPS BattleStatusMonitor

    void eventUnRegisterAIFactory(class USeqAct_AIFactory* Factory)
    {
        BattleStatusMonitor_eventUnRegisterAIFactory_Parms Parms(EC_EventParm);
        Parms.Factory=Factory;
        ProcessEvent(FindFunctionChecked(GEARGAME_UnRegisterAIFactory),&Parms);
    }
    void eventRegisterAIFactory(class USeqAct_AIFactory* Factory)
    {
        BattleStatusMonitor_eventRegisterAIFactory_Parms Parms(EC_EventParm);
        Parms.Factory=Factory;
        ProcessEvent(FindFunctionChecked(GEARGAME_RegisterAIFactory),&Parms);
    }
    DECLARE_CLASS(ABattleStatusMonitor,AActor,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(ABattleStatusMonitor)
};

struct FActiveDialogueLine
{
    class AActor* Speaker;
    class AActor* Addressee;
    class USoundCue* Audio;
    BYTE Priority;

    /** Constructors */
    FActiveDialogueLine() {}
    FActiveDialogueLine(EEventParm)
    {
        appMemzero(this, sizeof(FActiveDialogueLine));
    }
};

struct GearSpeechManager_eventNotifyDialogueStart_Parms
{
    class AActor* Speaker;
    class AActor* Addressee;
    class USoundCue* Audio;
    BYTE PRI;
    GearSpeechManager_eventNotifyDialogueStart_Parms(EEventParm)
    {
    }
};
class AGearSpeechManager : public AActor
{
public:
    //## BEGIN PROPS GearSpeechManager
    FLOAT LastUpdateTime;
    FLOAT TimeBetweenUpdates;
    TArrayNoInit<struct FActiveDialogueLine> DialogueStack;
    BITFIELD bTrackDialogue:1;
    //## END PROPS GearSpeechManager

    void eventNotifyDialogueStart(class AActor* Speaker,class AActor* Addressee,class USoundCue* Audio,BYTE PRI)
    {
        GearSpeechManager_eventNotifyDialogueStart_Parms Parms(EC_EventParm);
        Parms.Speaker=Speaker;
        Parms.Addressee=Addressee;
        Parms.Audio=Audio;
        Parms.PRI=PRI;
        ProcessEvent(FindFunctionChecked(GEARGAME_NotifyDialogueStart),&Parms);
    }
    DECLARE_CLASS(AGearSpeechManager,AActor,0,GearGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

struct FRemoteSpeakerDelayedLine
{
    class AGearPawn* Addressee;
    class USoundCue* Audio;
    BITFIELD bSuppressSubtitle:1;
    FLOAT DelayTime;
    BYTE MPBroadcastFilter;
    FStringNoInit DebugText;
    BYTE Priority;

    /** Constructors */
    FRemoteSpeakerDelayedLine() {}
    FRemoteSpeakerDelayedLine(EEventParm)
    {
        appMemzero(this, sizeof(FRemoteSpeakerDelayedLine));
    }
};

struct GearRemoteSpeaker_eventIsSameTeam_Parms
{
    class APawn* P;
    UBOOL ReturnValue;
    GearRemoteSpeaker_eventIsSameTeam_Parms(EEventParm)
    {
    }
};
struct GearRemoteSpeaker_eventRemoteSpeakLineFinished_Parms
{
    GearRemoteSpeaker_eventRemoteSpeakLineFinished_Parms(EEventParm)
    {
    }
};
struct GearRemoteSpeaker_eventRemoteSpeakLine_Parms
{
    class AGearPawn* Addressee;
    class USoundCue* Audio;
    FString DebugText;
    FLOAT DelaySec;
    UBOOL bSuppressSubtitle;
    BYTE MPBroadcastFilter;
    BYTE Priority;
    UBOOL ReturnValue;
    GearRemoteSpeaker_eventRemoteSpeakLine_Parms(EEventParm)
    {
    }
};
class AGearRemoteSpeaker : public AReplicationInfo
{
public:
    //## BEGIN PROPS GearRemoteSpeaker
    TArrayNoInit<FString> MasterGUDBankClassNames;
    INT LoadedGUDBank;
    BITFIELD bSpeaking:1;
    BITFIELD bEnabled:1;
    BITFIELD bMuteGUDS:1;
    struct FRemoteSpeakerDelayedLine DelayedLineParams;
    class UAudioComponent* CurrentlySpeakingLine;
    INT TeamIndex;
    //## END PROPS GearRemoteSpeaker

    UBOOL eventIsSameTeam(class APawn* P)
    {
        GearRemoteSpeaker_eventIsSameTeam_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(GEARGAME_IsSameTeam),&Parms);
        return Parms.ReturnValue;
    }
    void eventRemoteSpeakLineFinished()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_RemoteSpeakLineFinished),NULL);
    }
    UBOOL eventRemoteSpeakLine(class AGearPawn* Addressee,class USoundCue* Audio,const FString& DebugText,FLOAT DelaySec=0,UBOOL bSuppressSubtitle=FALSE,BYTE MPBroadcastFilter=0,BYTE Priority=0)
    {
        GearRemoteSpeaker_eventRemoteSpeakLine_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Addressee=Addressee;
        Parms.Audio=Audio;
        Parms.DebugText=DebugText;
        Parms.DelaySec=DelaySec;
        Parms.bSuppressSubtitle=bSuppressSubtitle ? FIRST_BITFIELD : FALSE;
        Parms.MPBroadcastFilter=MPBroadcastFilter;
        Parms.Priority=Priority;
        ProcessEvent(FindFunctionChecked(GEARGAME_RemoteSpeakLine),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AGearRemoteSpeaker,AReplicationInfo,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(AGearRemoteSpeaker)
};

class ARemoteSpeaker_COGAnya : public AGearRemoteSpeaker
{
public:
    //## BEGIN PROPS RemoteSpeaker_COGAnya
    //## END PROPS RemoteSpeaker_COGAnya

    DECLARE_CLASS(ARemoteSpeaker_COGAnya,AGearRemoteSpeaker,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(ARemoteSpeaker_COGAnya)
};

class ARemoteSpeaker_Generic : public AGearRemoteSpeaker
{
public:
    //## BEGIN PROPS RemoteSpeaker_Generic
    //## END PROPS RemoteSpeaker_Generic

    DECLARE_CLASS(ARemoteSpeaker_Generic,AGearRemoteSpeaker,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(ARemoteSpeaker_Generic)
};

class UGUDData : public UObject
{
public:
    //## BEGIN PROPS GUDData
    TArrayNoInit<class UGUDBank*> LoadedGUDBanks;
    //## END PROPS GUDData

    DECLARE_CLASS(UGUDData,UObject,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGUDData)
};

struct FGUDToCEntry
{
    FString BankName;
    INT ApproxBankSize;

		UBOOL operator==(const FGUDToCEntry& Other) const
		{
			return BankName == Other.BankName;
		}

		virtual void Serialize(FArchive& Ar)
		{
			Ar << BankName;
			Ar << ApproxBankSize;
		}

		friend FArchive& operator<<(FArchive& Ar, FGUDToCEntry& Entry)
		{
			return Ar << Entry.BankName << Entry.ApproxBankSize;
		}
	
};

struct FGUDCollection
{
    struct FGUDToCEntry RootGUDBank;
    TArray<struct FGUDToCEntry> GUDBanks;

		virtual void Serialize(FArchive& Ar)
		{
			Ar << RootGUDBank;
			Ar << GUDBanks;
		}

		friend FArchive& operator<<(FArchive& Ar, FGUDCollection& Collection)
		{
			return Ar << Collection.RootGUDBank << Collection.GUDBanks;
		}
	
};

class UGUDToC : public UObject
{
public:
    //## BEGIN PROPS GUDToC
    TMap<FString,FGUDCollection> TableOfContents;
    //## END PROPS GUDToC

    DECLARE_CLASS(UGUDToC,UObject,0,GearGame)
public:
	static FString ToCPackageName;
	static FName ToCObjectName;

	virtual void AddReferencedObjects( TArray<UObject*>& ObjectArray );
	virtual void Serialize(FArchive& Ar);
};

#endif // !INCLUDED_GEARGAME_SOUND_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UGearSoundGroup,-1,execDumpMemoryUsage);
AUTOGENERATE_FUNCTION(UGearSoundGroup,-1,execFindFoleyCue);
AUTOGENERATE_FUNCTION(UGearSoundGroup,-1,execFindEffortCue);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execDrawDebugStreaming);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execGUDBrowserMarkLineLooksBad);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execGUDBrowserMarkLineLooksGood);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execDoDeferredSpeakerRegistrations);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execReplicateLoadedGUDBanks);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execPlayGUDSLineInternal);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execHandleGUDEvent);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execPlayGUDSAction);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execChooseLineFromEvent);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execChooseLineFromAction);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execGetGUDSPawn);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execTriggerGUDEventInternal);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execIsOkToPlayGUDSLine);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execNotifyExclusiveSpeech);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execFlushOutAllVarietyBanks);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execUnloadAllVarietyBanks);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execUnloadOldestVarietyBanks);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execLoadRandomVarietyBanks);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execGetSpeakerGUDBankName);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execUnregisterSpeaker);
AUTOGENERATE_FUNCTION(AGUDManager,-1,execRegisterSpeaker);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_SOUND_NATIVE_DEFS
#define GEARGAME_SOUND_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,ABattleStatusMonitor);
DECLARE_NATIVE_TYPE(GearGame,AGearRemoteSpeaker);
DECLARE_NATIVE_TYPE(GearGame,UGearSoundGroup);
DECLARE_NATIVE_TYPE(GearGame,AGearSpeechManager);
DECLARE_NATIVE_TYPE(GearGame,UGUDBank);
DECLARE_NATIVE_TYPE(GearGame,UGUDData);
DECLARE_NATIVE_TYPE(GearGame,AGUDManager);
DECLARE_NATIVE_TYPE(GearGame,UGUDToC);
DECLARE_NATIVE_TYPE(GearGame,UGUDTypes);
DECLARE_NATIVE_TYPE(GearGame,ARemoteSpeaker_COGAnya);
DECLARE_NATIVE_TYPE(GearGame,ARemoteSpeaker_Generic);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_SOUND \
	ABattleStatusMonitor::StaticClass(); \
	AGearRemoteSpeaker::StaticClass(); \
	UGearSoundGroup::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGearSoundGroupNative; \
	AGearSpeechManager::StaticClass(); \
	UGUDBank::StaticClass(); \
	UGUDData::StaticClass(); \
	AGUDManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGUDManagerNative; \
	UGUDToC::StaticClass(); \
	UGUDTypes::StaticClass(); \
	ARemoteSpeaker_COGAnya::StaticClass(); \
	ARemoteSpeaker_Generic::StaticClass(); \

#endif // GEARGAME_SOUND_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UGearSoundGroup) GGearGameUGearSoundGroupNatives[] = 
{ 
	MAP_NATIVE(UGearSoundGroup,execDumpMemoryUsage)
	MAP_NATIVE(UGearSoundGroup,execFindFoleyCue)
	MAP_NATIVE(UGearSoundGroup,execFindEffortCue)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGearSoundGroup);

NATIVE_INFO(AGUDManager) GGearGameAGUDManagerNatives[] = 
{ 
	MAP_NATIVE(AGUDManager,execDrawDebugStreaming)
	MAP_NATIVE(AGUDManager,execGUDBrowserMarkLineLooksBad)
	MAP_NATIVE(AGUDManager,execGUDBrowserMarkLineLooksGood)
	MAP_NATIVE(AGUDManager,execDoDeferredSpeakerRegistrations)
	MAP_NATIVE(AGUDManager,execReplicateLoadedGUDBanks)
	MAP_NATIVE(AGUDManager,execPlayGUDSLineInternal)
	MAP_NATIVE(AGUDManager,execHandleGUDEvent)
	MAP_NATIVE(AGUDManager,execPlayGUDSAction)
	MAP_NATIVE(AGUDManager,execChooseLineFromEvent)
	MAP_NATIVE(AGUDManager,execChooseLineFromAction)
	MAP_NATIVE(AGUDManager,execGetGUDSPawn)
	MAP_NATIVE(AGUDManager,execTriggerGUDEventInternal)
	MAP_NATIVE(AGUDManager,execIsOkToPlayGUDSLine)
	MAP_NATIVE(AGUDManager,execNotifyExclusiveSpeech)
	MAP_NATIVE(AGUDManager,execFlushOutAllVarietyBanks)
	MAP_NATIVE(AGUDManager,execUnloadAllVarietyBanks)
	MAP_NATIVE(AGUDManager,execUnloadOldestVarietyBanks)
	MAP_NATIVE(AGUDManager,execLoadRandomVarietyBanks)
	MAP_NATIVE(AGUDManager,execGetSpeakerGUDBankName)
	MAP_NATIVE(AGUDManager,execUnregisterSpeaker)
	MAP_NATIVE(AGUDManager,execRegisterSpeaker)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGUDManager);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,BattleStatusMonitor,COGBattleStatus)
VERIFY_CLASS_OFFSET_NODIE(A,BattleStatusMonitor,LastZeroKnownEnemiesTime)
VERIFY_CLASS_SIZE_NODIE(ABattleStatusMonitor)
VERIFY_CLASS_OFFSET_NODIE(A,GearRemoteSpeaker,MasterGUDBankClassNames)
VERIFY_CLASS_OFFSET_NODIE(A,GearRemoteSpeaker,TeamIndex)
VERIFY_CLASS_SIZE_NODIE(AGearRemoteSpeaker)
VERIFY_CLASS_OFFSET_NODIE(U,GearSoundGroup,ClassVersion)
VERIFY_CLASS_OFFSET_NODIE(U,GearSoundGroup,LastEffortIdx)
VERIFY_CLASS_SIZE_NODIE(UGearSoundGroup)
VERIFY_CLASS_OFFSET_NODIE(A,GearSpeechManager,LastUpdateTime)
VERIFY_CLASS_OFFSET_NODIE(A,GearSpeechManager,DialogueStack)
VERIFY_CLASS_SIZE_NODIE(AGearSpeechManager)
VERIFY_CLASS_OFFSET_NODIE(U,GUDBank,GUDLines)
VERIFY_CLASS_OFFSET_NODIE(U,GUDBank,SourceGUDBankPath)
VERIFY_CLASS_SIZE_NODIE(UGUDBank)
VERIFY_CLASS_OFFSET_NODIE(U,GUDData,LoadedGUDBanks)
VERIFY_CLASS_SIZE_NODIE(UGUDData)
VERIFY_CLASS_OFFSET_NODIE(A,GUDManager,EventProperties)
VERIFY_CLASS_OFFSET_NODIE(A,GUDManager,VarietyBankCap)
VERIFY_CLASS_SIZE_NODIE(AGUDManager)
VERIFY_CLASS_OFFSET_NODIE(U,GUDToC,TableOfContents)
VERIFY_CLASS_SIZE_NODIE(UGUDToC)
VERIFY_CLASS_SIZE_NODIE(UGUDTypes)
VERIFY_CLASS_SIZE_NODIE(ARemoteSpeaker_COGAnya)
VERIFY_CLASS_SIZE_NODIE(ARemoteSpeaker_Generic)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
