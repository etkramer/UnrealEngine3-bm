/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_VEHICLE_ENUMS
#define INCLUDED_GEARGAME_VEHICLE_ENUMS 1

enum EHydraLaserMode
{
    EHLM_Off                =0,
    EHLM_NoLock             =1,
    EHLM_LockedOn           =2,
    EHLM_MAX                =3,
};
enum EHydraDamagedPart
{
    EHDP_Mouth              =0,
    EHDP_Turret             =1,
    EHDP_Butt               =2,
    EHDP_FrontLeftTentacle  =3,
    EHDP_BackLeftTentacle   =4,
    EHDP_FrontRightTentacle =5,
    EHDP_BackRightTentacle  =6,
    EHDP_MAX                =7,
};
enum EHydraTentacle
{
    EHT_FrontLeft           =0,
    EHT_BackLeft            =1,
    EHT_FrontRight          =2,
    EHT_BackRight           =3,
    EHT_MAX                 =4,
};
enum ECentaurOnSurface
{
    ECOS_Snow               =0,
    ECOS_Ice                =1,
    ECOS_Cave               =2,
    ECOS_MAX                =3,
};
enum EJackSpotlightSetting
{
    JSS_Default             =0,
    JSS_Intervention        =1,
    JSS_Outpost             =2,
    JSS_MAX                 =3,
};

#endif // !INCLUDED_GEARGAME_VEHICLE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(CanBoost)
AUTOGENERATE_NAME(CentaurPlayLocalSound)
AUTOGENERATE_NAME(DecalChoice)
AUTOGENERATE_NAME(DecalTimeVaryingParams)
AUTOGENERATE_NAME(DecalTrace)
AUTOGENERATE_NAME(DriverSpeaking)
AUTOGENERATE_NAME(DriverSpeakLine)
AUTOGENERATE_NAME(EndBoost)
AUTOGENERATE_NAME(ForceBoost)
AUTOGENERATE_NAME(GetCameraFOV)
AUTOGENERATE_NAME(GetCameraStart)
AUTOGENERATE_NAME(GetVehicleViewOffsets)
AUTOGENERATE_NAME(HitOtherGearVehicle)
AUTOGENERATE_NAME(JumpOutCheck)
AUTOGENERATE_NAME(NotifyStepFinished)
AUTOGENERATE_NAME(OnPeelOutBegin)
AUTOGENERATE_NAME(OnPropertyChange)
AUTOGENERATE_NAME(RBPenetrationDestroy)
AUTOGENERATE_NAME(ReaverFlownOff)
AUTOGENERATE_NAME(ReaverPassEnded)
AUTOGENERATE_NAME(ReceivedHealthChange)
AUTOGENERATE_NAME(SelfDestruct)
AUTOGENERATE_NAME(ServerFinishedLanding)
AUTOGENERATE_NAME(ServerFinishedTakingOff)
AUTOGENERATE_NAME(ShouldDoTankSteer)
AUTOGENERATE_NAME(SquishedSomething)
AUTOGENERATE_NAME(StartBoost)
AUTOGENERATE_NAME(VehicleScriptedDeath)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_VEHICLE_CLASSES
#define INCLUDED_GEARGAME_VEHICLE_CLASSES 1

class AHydra_Base : public AActor
{
public:
    //## BEGIN PROPS Hydra_Base
    class USkeletalMeshComponent* Mesh;
    class USkeletalMeshComponent* RiderMesh;
    class ULightEnvironmentComponent* LightEnvironment;
    FName PartShootBody[7];
    INT PartHealth[7];
    BYTE bPartAllowDamage[7];
    BYTE bHideClaw[4];
    BYTE bOldHideClaw[4];
    BYTE LaserMode;
    BYTE bGoreNodesEnabled[40];
    TArrayNoInit<FName> GoreBreakableJoints;
    TArrayNoInit<FName> HelmetGoreBoneName;
    TArrayNoInit<FName> MouthGoreBoneName;
    TArrayNoInit<FName> ButtGoreBoneName;
    class UParticleSystemComponent* PSC_TargetLaser[2];
    class AActor* AimAtActor;
    FLOAT FireOffsetZ;
    class UGearSkelCtrl_TurretConstrained* TurretControl;
    class UGearAnim_BlendPerBone* ChompBlendNode;
    class UGearAnim_BlendList* HeadBlendList;
    class UAnimNodeBlend* TurretBlendNode;
    class UAnimNodeBlend* FlyAnimBlend;
    class UAnimNodeSequence* MainBoneAnimNode;
    class UAnimNodeBlendList* RandomLegAnimNode;
    class UGearAnim_Slot* FullBodySlot;
    class UGearAnim_BlendPerBone* GrabMaskNode;
    class UAnimNodeSequence* GrabAnimNode;
    class UGearAnim_GoreSystem* GoreNode;
    BITFIELD bJawChomping:1;
    BITFIELD bRoaring:1;
    BITFIELD bLowerHead:1;
    BITFIELD bTurretLowered:1;
    BITFIELD bDisableRootAnim:1;
    BITFIELD bHideTurret:1;
    BITFIELD bEnableShootingGore:1;
    INT DamageAnimCount;
    INT RestartMainBoneAnimCount;
    FLOAT LastMainBoneAnimPos;
    class USkelControlTrail* TrailControls[4];
    class UGearSkelCtrl_CCD_IK* IKControls[4];
    class USkelControlSingleBone* SBControl[4];
    FName HideClawBoneNames[4];
    FLOAT ClawHideCountdown[4];
    FLOAT ClawHideTime;
    FLOAT LaserLength;
    FVector LaserNoLockColor;
    FVector LaserLockColor;
    FVector TentacleFakeVelocity;
    FVector GoreFakeVelocity;
    class UParticleSystemComponent* PSC_Spittle;
    class AActor* GrabActor[4];
    class AActor* OldGrabActor[4];
    INT GrabTentacleIndex;
    FLOAT GrabIKDelay;
    FLOAT GrabIKBlendTime;
    FLOAT GrabSBDelay;
    FLOAT GrabSBBlendTime;
    FLOAT GrabSBStrength;
    FLOAT BlendTentacleDelay;
    FLOAT BlendTentacleTime;
    FLOAT TrailTentacleDelay;
    FLOAT TrailBlendTime;
    FName GrabActorSocketName[4];
    FVector GrabActorOffset[4];
    FRotator GrabActorRotOffset[4];
    FLOAT LastPlaySlowDownAnimTime;
    FLOAT OldSpeed;
    class USoundCue* SuddenAccelSound;
    class USoundCue* AmbientVocalSound;
    class UAudioComponent* FlyingLoopSound;
    class USoundCue* PainVocalSound;
    FLOAT LastPainSoundTime;
    FLOAT HydraGravZScale;
    //## END PROPS Hydra_Base

    DECLARE_ABSTRACT_CLASS(AHydra_Base,AActor,0,GearGame)
	virtual FLOAT GetGravityZ();
	virtual void TickSpecial(FLOAT DeltaSeconds);
};

class AGearVehicleBase : public ASVehicle
{
public:
    //## BEGIN PROPS GearVehicleBase
    //## END PROPS GearVehicleBase

    DECLARE_ABSTRACT_CLASS(AGearVehicleBase,ASVehicle,0|CLASS_Config,GearGame)
	virtual UBOOL ReachedDesiredRotation();
};

struct FWeaponEffectInfo
{
    FName SocketName;
    FVector Offset;
    FVector Scale3D;
    class UStaticMeshComponent* Effect;

    /** Constructors */
    FWeaponEffectInfo() {}
    FWeaponEffectInfo(EEventParm)
    {
        appMemzero(this, sizeof(FWeaponEffectInfo));
    }
};

struct FVehicleSeat
{
    class APawn* StoragePawn;
    class AVehicle* SeatPawn;
    class UClass* GunClass;
    class AGearVehicleWeapon* Gun;
    TArrayNoInit<FName> GunSocket;
    TArrayNoInit<FName> GunPivotPoints;
    INT BarrelIndex;
    FStringNoInit TurretVarPrefix;
    TArrayNoInit<struct FWeaponEffectInfo> WeaponEffects;
    FName WeaponRotationName;
    FName FlashLocationName;
    FName FlashCountName;
    FName FiringModeName;
    FPointer WeaponRotationProperty;
    FPointer FlashLocationProperty;
    FPointer FlashCountProperty;
    FPointer FiringModeProperty;
    FRotator LastWeaponRotation;
    TArrayNoInit<FName> TurretControls;
    TArrayNoInit<class UGearSkelCtrl_TurretConstrained*> TurretControllers;
    FVector AimPoint;
    class AActor* AimTarget;
    FLOAT PivotFireOffsetZ;
    BITFIELD bDisableOffsetZAdjust:1;
    FName CameraTag;
    FVector CameraBaseOffset;
    FLOAT CameraOffset;
    FVector CameraViewOffsetHigh;
    FVector CameraViewOffsetMid;
    FVector CameraViewOffsetLow;
    FVector WorstCameraLocOffset;
    FLOAT CameraEyeHeight;
    FLOAT ViewPitchMin;
    FLOAT ViewPitchMax;
    BITFIELD bSeatVisible:1;
    FName SeatBone;
    FVector SeatOffset;
    FRotator SeatRotation;
    FLOAT DriverDamageMult;
    class UAudioComponent* SeatMotionAudio;

    /** Constructors */
    FVehicleSeat() {}
    FVehicleSeat(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleSeat));
    }
};

struct FTimePosition
{
    FVector Position;
    FLOAT Time;

    /** Constructors */
    FTimePosition() {}
    FTimePosition(EEventParm)
    {
        appMemzero(this, sizeof(FTimePosition));
    }
};

struct FFGearVehicleMuzzleLightInfo
{
    class UPointLightComponent* TemplateMuzzleLight;
    class UPointLightComponent* MuzzleLight;
    FLOAT LightInitialBrightness;
    FLOAT LightFadeTime;
    FLOAT LightTimeRemaining;

    /** Constructors */
    FFGearVehicleMuzzleLightInfo() {}
    FFGearVehicleMuzzleLightInfo(EEventParm)
    {
        appMemzero(this, sizeof(FFGearVehicleMuzzleLightInfo));
    }
};

struct GearVehicle_eventDriverSpeaking_Parms
{
    GearVehicle_eventDriverSpeaking_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventUpdateShadowSettings_Parms
{
    UBOOL bInWantShadow;
    GearVehicle_eventUpdateShadowSettings_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventShouldDoTankSteer_Parms
{
    UBOOL ReturnValue;
    GearVehicle_eventShouldDoTankSteer_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventForceBoost_Parms
{
    UBOOL ReturnValue;
    GearVehicle_eventForceBoost_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventCanBoost_Parms
{
    UBOOL ReturnValue;
    GearVehicle_eventCanBoost_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventVehicleScriptedDeath_Parms
{
    GearVehicle_eventVehicleScriptedDeath_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventReceivedHealthChange_Parms
{
    INT OldHealth;
    GearVehicle_eventReceivedHealthChange_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventRBPenetrationDestroy_Parms
{
    GearVehicle_eventRBPenetrationDestroy_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventOnPropertyChange_Parms
{
    FName PropName;
    GearVehicle_eventOnPropertyChange_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventGetCameraStart_Parms
{
    INT SeatIndex;
    FVector ReturnValue;
    GearVehicle_eventGetCameraStart_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventGetCameraFOV_Parms
{
    INT SeatIndex;
    FLOAT ReturnValue;
    GearVehicle_eventGetCameraFOV_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventGetVehicleViewOffsets_Parms
{
    INT SeatIndex;
    UBOOL bSplitScreen;
    FVector out_Low;
    FVector out_Mid;
    FVector out_High;
    GearVehicle_eventGetVehicleViewOffsets_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventGetPhysicalFireStartLoc_Parms
{
    class AGearWeapon* ForWeapon;
    FVector ReturnValue;
    GearVehicle_eventGetPhysicalFireStartLoc_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventJumpOutCheck_Parms
{
    GearVehicle_eventJumpOutCheck_Parms(EEventParm)
    {
    }
};
struct GearVehicle_eventSelfDestruct_Parms
{
    class AActor* ImpactedActor;
    GearVehicle_eventSelfDestruct_Parms(EEventParm)
    {
    }
};
class AGearVehicle : public AGearVehicleBase
{
public:
    //## BEGIN PROPS GearVehicle
    BITFIELD bEjectPassengersWhenFlipped:1;
    BITFIELD bMustBeUpright:1;
    BITFIELD bStickDeflectionThrottle:1;
    BITFIELD bShouldAutoCenterViewPitch:1;
    BITFIELD bNeverReset:1;
    BITFIELD bEjectKilledBodies:1;
    BITFIELD bLightArmor:1;
    BITFIELD bShouldLeaveForCombat:1;
    BITFIELD bDrawHealthOnHUD:1;
    BITFIELD bDriverCastsShadow:1;
    BITFIELD bFrontalCollision:1;
    BITFIELD bFrontalCollisionWithFixed:1;
    BITFIELD bUsingLookSteer:1;
    BITFIELD bAllowedExit:1;
    BITFIELD bFindGroundExit:1;
    BITFIELD bDoActorLocationToCamStartTrace:1;
    BITFIELD bVehicleSpaceCamera:1;
    BITFIELD bPassengerVehicleSpaceCamera:1;
    BITFIELD bVehicleSpaceViewLimits:1;
    BITFIELD bOnlyInheritVehicleSpaceYaw:1;
    BITFIELD bPushingAgainstViewLimit:1;
    BITFIELD bLookSteerFacingReverse:1;
    BITFIELD bShowWeaponOnHUD:1;
    BITFIELD bDisableShadows:1;
    BITFIELD bDeadVehicle:1;
    BITFIELD bHasTurretExplosion:1;
    BITFIELD bIsBurning:1;
    BITFIELD bIsScraping:1;
    BITFIELD bReducedFallingCollisionDamage:1;
    BITFIELD bBlockCamera:1;
    BITFIELD bIsHiddenByCamera:1;
    BITFIELD bIsInDestroyablePenetration:1;
    BITFIELD bRotateCameraUnderVehicle:1;
    BITFIELD bNoZSmoothing:1;
    BITFIELD bLimitCameraZLookingUp:1;
    BITFIELD bNoFollowJumpZ:1;
    BITFIELD bFixedCamZ:1;
    BITFIELD bCameraNeverHidesVehicle:1;
    BITFIELD bAlwaysViewFriction:1;
    BITFIELD bStopDeathCamera:1;
    BITFIELD bIsConsoleTurning:1;
    BITFIELD bAcceptTurretJump:1;
    BITFIELD bShowDamageDebug:1;
    BITFIELD bNoZDampingInAir:1;
    BITFIELD bNoZDamping:1;
    BITFIELD bNeverAValidEnemy:1;
    FLOAT DeflectionReverseThresh;
    FLOAT LastCheckUpsideDownTime;
    FLOAT FlippedCount;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    FLOAT VehicleLostTime;
    FLOAT PlayerStartTime;
    FLOAT RespawnTime;
    FLOAT InitialSpawnDelay;
    FLOAT LinkHealMult;
    FLOAT MaxDesireability;
    FLOAT ObjectiveGetOutDist;
    FLOAT VehicleGravityZScale;
    FLOAT LeftStickDirDeadZone;
    FLOAT LookSteerSensitivity;
    FLOAT LookSteerDamping;
    FLOAT LookSteerDeadZone;
    FLOAT ConsoleSteerScale;
    FLOAT ConsoleThrottleScale;
    FLOAT ReverseIsForwardThreshold;
    FLOAT VehicleSpaceCamBlendTime;
    INT MaxVehicleSpaceCamYaw;
    FLOAT VehicleSpaceCamCenterSpeed;
    FRotator LastClampedViewRot;
    class UClass* RanOverDamageType;
    FLOAT MinRunOverSpeed;
    class USoundCue* RanOverSound;
    FLOAT LastRunOverWarningTime;
    FLOAT MinRunOverWarningAim;
    FStringNoInit VehicleNameString;
    FRotator WeaponRotation;
    TArrayNoInit<struct FVehicleSeat> Seats;
    INT SeatMask;
    class UClass* ExplosionDamageType;
    FLOAT LastJumpOutCheck;
    class UParticleSystem* ExplosionTemplate;
    class UParticleSystem* SecondaryExplosion;
    FName BigExplosionSocket;
    FLOAT MaxWheelEffectDistSq;
    FName WaterEffectType;
    FLOAT DeadVehicleLifeSpan;
    FLOAT ExplosionDamage;
    FLOAT ExplosionRadius;
    FLOAT ExplosionMomentum;
    FLOAT ExplosionInAirAngVel;
    FName TurretScaleControlName;
    FName TurretSocketName;
    FVector TurretOffset;
    class UStaticMesh* DestroyedTurretTemplate;
    FLOAT TurretExplosiveForce;
    class USoundCue* ExplosionSound;
    class USoundCue* ImpactHitSound;
    FLOAT LastDeathImpactTime;
    class USoundCue* LargeChunkImpactSound;
    class USoundCue* MediumChunkImpactSound;
    class USoundCue* SmallChunkImpactSound;
    FLOAT RemainingBurn;
    class UAudioComponent* ScrapeSound;
    class UAudioComponent* TireAudioComp;
    FName CurrentTireMaterial;
    FLOAT WheelLongGripScale;
    FLOAT WheelLatGripScale;
    FLOAT WheelExtraGraphicalSpin;
    FLOAT PeelOutFrictionScale;
    FLOAT SpawnRadius;
    FName DrivingAnim;
    class AGearPRI* PassengerPRI;
    FLOAT CollisionDamageMult;
    FLOAT LastCollisionDamageTime;
    TArrayNoInit<struct FPerDamageTypeMod> PerDamageTypeModifiers;
    FLOAT DestroyOnPenetrationThreshold;
    FLOAT DestroyOnPenetrationDuration;
    FLOAT TimeInDestroyablePenetration;
    FLOAT SeatCameraScale;
    FLOAT OldCamPosZ;
    FLOAT CameraSmoothingFactor;
    FLOAT DefaultFOV;
    TArrayNoInit<struct FTimePosition> OldPositions;
    FLOAT CameraLag;
    FVector CameraOffset;
    FLOAT LookForwardDist;
    FLOAT MinCameraDistSq;
    FVector OldCameraPosition;
    struct FActionInfo InteractAction;
    FLOAT ExtraReachDownThreshold;
    INT HordeEnemyIndex;
    FVector2D VehicleAimOffset;
    FGuid MyGuid;
    class AGearAI* MyGearAI;
    FCylinder CameraNoRenderCylinder_High;
    FCylinder CameraNoRenderCylinder_Low;
    FCylinder CameraNoRenderCylinder_High_ViewTarget;
    FCylinder CameraNoRenderCylinder_Low_ViewTarget;
    FCylinder CameraNoRenderCylinder_FlickerBuffer;
    struct FFGearVehicleMuzzleLightInfo MuzzleLightInfo;
    //## END PROPS GearVehicle

    virtual FRotator SeatWeaponRotation(INT SeatIndex,FRotator NewRot=FRotator(EC_EventParm),UBOOL bReadValue=FALSE);
    virtual FVector SeatFlashLocation(INT SeatIndex,FVector NewLoc=FVector(EC_EventParm),UBOOL bReadValue=FALSE);
    virtual BYTE SeatFlashCount(INT SeatIndex,BYTE NewCount=0,UBOOL bReadValue=FALSE);
    virtual BYTE SeatFiringMode(INT SeatIndex,BYTE NewFireMode=0,UBOOL bReadValue=FALSE);
    virtual void ForceWeaponRotation(INT SeatIndex,FRotator NewRotation);
    virtual FVector GetSeatPivotPoint(INT SeatIndex);
    virtual INT GetBarrelIndex(INT SeatIndex);
    virtual UBOOL IsValidEnemyTargetFor(const class APlayerReplicationInfo* PRI,UBOOL bNoPRIisEnemy) const;
    void GetCameraNoRenderCylinder(FLOAT& Radius,FLOAT& Height,UBOOL bViewTarget,UBOOL bHiddenLocally);
    virtual FLOAT GetGravityZ();
    virtual FRotator GetClampedViewRotation();
    virtual UBOOL ShouldClamp();
    virtual FRotator GetViewRotation();
    virtual void GetBarrelLocationAndRotation(INT SeatIndex,FVector& SocketLocation,FRotator* SocketRotation=NULL);
    virtual FVector GetEffectLocation(INT SeatIndex);
    virtual FVector GetPhysicalFireStartLoc(class AGearWeapon* ForWeapon);
    class AActor* DoTurretTrace(const FVector Start,const FVector End,INT SeatIndex,FVector& OutHitLocation);
    DECLARE_FUNCTION(execSeatWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FRotator,NewRot,FRotator(EC_EventParm));
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(FRotator*)Result=SeatWeaponRotation(SeatIndex,NewRot,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashLocation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FVector,NewLoc,FVector(EC_EventParm));
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(FVector*)Result=SeatFlashLocation(SeatIndex,NewLoc,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashCount)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewCount,0);
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(BYTE*)Result=SeatFlashCount(SeatIndex,NewCount,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFiringMode)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewFireMode,0);
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(BYTE*)Result=SeatFiringMode(SeatIndex,NewFireMode,bReadValue);
    }
    DECLARE_FUNCTION(execForceWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT(FRotator,NewRotation);
        P_FINISH;
        ForceWeaponRotation(SeatIndex,NewRotation);
    }
    DECLARE_FUNCTION(execGetSeatPivotPoint)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(FVector*)Result=GetSeatPivotPoint(SeatIndex);
    }
    DECLARE_FUNCTION(execGetBarrelIndex)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(INT*)Result=GetBarrelIndex(SeatIndex);
    }
    DECLARE_FUNCTION(execIsSeatControllerReplicationViewer);
    DECLARE_FUNCTION(execGetCameraNoRenderCylinder)
    {
        P_GET_FLOAT_REF(Radius);
        P_GET_FLOAT_REF(Height);
        P_GET_UBOOL(bViewTarget);
        P_GET_UBOOL(bHiddenLocally);
        P_FINISH;
        GetCameraNoRenderCylinder(Radius,Height,bViewTarget,bHiddenLocally);
    }
    DECLARE_FUNCTION(execGetClampedViewRotation)
    {
        P_FINISH;
        *(FRotator*)Result=GetClampedViewRotation();
    }
    DECLARE_FUNCTION(execShouldClamp)
    {
        P_FINISH;
        *(UBOOL*)Result=ShouldClamp();
    }
    DECLARE_FUNCTION(execGetBarrelLocationAndRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_REF(FVector,SocketLocation);
        P_GET_STRUCT_OPTX_REF(FRotator,SocketRotation,FRotator(EC_EventParm));
        P_FINISH;
        GetBarrelLocationAndRotation(SeatIndex,SocketLocation,pSocketRotation ? &SocketRotation : NULL);
    }
    DECLARE_FUNCTION(execGetEffectLocation)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(FVector*)Result=GetEffectLocation(SeatIndex);
    }
    DECLARE_FUNCTION(execGetPhysicalFireStartLoc)
    {
        P_GET_OBJECT(AGearWeapon,ForWeapon);
        P_FINISH;
        *(FVector*)Result=GetPhysicalFireStartLoc(ForWeapon);
    }
    DECLARE_FUNCTION(execDoTurretTrace)
    {
        P_GET_STRUCT(FVector,Start);
        P_GET_STRUCT(FVector,End);
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_REF(FVector,OutHitLocation);
        P_FINISH;
        *(class AActor**)Result=DoTurretTrace(Start,End,SeatIndex,OutHitLocation);
    }
    void eventDriverSpeaking()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_DriverSpeaking),NULL);
    }
    void eventUpdateShadowSettings(UBOOL bInWantShadow)
    {
        GearVehicle_eventUpdateShadowSettings_Parms Parms(EC_EventParm);
        Parms.bInWantShadow=bInWantShadow ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_UpdateShadowSettings),&Parms);
    }
    UBOOL eventShouldDoTankSteer()
    {
        GearVehicle_eventShouldDoTankSteer_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ShouldDoTankSteer),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventForceBoost()
    {
        GearVehicle_eventForceBoost_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ForceBoost),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventCanBoost()
    {
        GearVehicle_eventCanBoost_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_CanBoost),&Parms);
        return Parms.ReturnValue;
    }
    void eventVehicleScriptedDeath()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_VehicleScriptedDeath),NULL);
    }
    void eventReceivedHealthChange(INT OldHealth)
    {
        GearVehicle_eventReceivedHealthChange_Parms Parms(EC_EventParm);
        Parms.OldHealth=OldHealth;
        ProcessEvent(FindFunctionChecked(GEARGAME_ReceivedHealthChange),&Parms);
    }
    void eventRBPenetrationDestroy()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_RBPenetrationDestroy),NULL);
    }
    void eventOnPropertyChange(FName PropName)
    {
        GearVehicle_eventOnPropertyChange_Parms Parms(EC_EventParm);
        Parms.PropName=PropName;
        ProcessEvent(FindFunctionChecked(GEARGAME_OnPropertyChange),&Parms);
    }
    FVector eventGetCameraStart(INT SeatIndex)
    {
        GearVehicle_eventGetCameraStart_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.SeatIndex=SeatIndex;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetCameraStart),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventGetCameraFOV(INT SeatIndex)
    {
        GearVehicle_eventGetCameraFOV_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.SeatIndex=SeatIndex;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetCameraFOV),&Parms);
        return Parms.ReturnValue;
    }
    void eventGetVehicleViewOffsets(INT SeatIndex,UBOOL bSplitScreen,FVector& out_Low,FVector& out_Mid,FVector& out_High)
    {
        GearVehicle_eventGetVehicleViewOffsets_Parms Parms(EC_EventParm);
        Parms.SeatIndex=SeatIndex;
        Parms.bSplitScreen=bSplitScreen ? FIRST_BITFIELD : FALSE;
        Parms.out_Low=out_Low;
        Parms.out_Mid=out_Mid;
        Parms.out_High=out_High;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetVehicleViewOffsets),&Parms);
        out_Low=Parms.out_Low;
        out_Mid=Parms.out_Mid;
        out_High=Parms.out_High;
    }
    FVector eventGetPhysicalFireStartLoc(class AGearWeapon* ForWeapon)
    {
        GearVehicle_eventGetPhysicalFireStartLoc_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.ForWeapon=ForWeapon;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetPhysicalFireStartLoc),&Parms);
        return Parms.ReturnValue;
    }
    void eventJumpOutCheck()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_JumpOutCheck),NULL);
    }
    void eventSelfDestruct(class AActor* ImpactedActor)
    {
        GearVehicle_eventSelfDestruct_Parms Parms(EC_EventParm);
        Parms.ImpactedActor=ImpactedActor;
        ProcessEvent(FindFunctionChecked(GEARGAME_SelfDestruct),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AGearVehicle,AGearVehicleBase,0|CLASS_Config|CLASS_NativeReplication,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Pawn");}

	virtual FGuid* GetGuid();
	virtual FVector GetDampingForce(const FVector& InForce);
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual UBOOL JumpOutCheck(AActor *GoalActor, FLOAT Distance, FLOAT ZDiff);
	virtual FLOAT GetMaxRiseForce();
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual void OnRigidBodyCollision(const FRigidBodyCollisionInfo& Info0, const FRigidBodyCollisionInfo& Info1, const FCollisionImpactData& RigidCollisionData);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
	virtual void PreNetReceive();
	virtual void PostNetReceive();
	virtual UBOOL ReachThresholdTest(const FVector& TestPosition, const FVector& Dest, AActor* GoalActor, FLOAT UpThresholdAdjust, FLOAT DownThresholdAdjust, FLOAT ThresholdAdjust);
};

struct FCentaurGearInfo
{
    FVector2D PitchRPMRange;
    FVector2D PitchRange;
    FVector2D VolumeRPMRange;
    FVector2D VolumeRange;
    class USoundCue* EngineLoopCue;

    /** Constructors */
    FCentaurGearInfo() {}
    FCentaurGearInfo(EEventParm)
    {
        appMemzero(this, sizeof(FCentaurGearInfo));
    }
};

struct Vehicle_Centaur_Base_eventSquishedSomething_Parms
{
    Vehicle_Centaur_Base_eventSquishedSomething_Parms(EEventParm)
    {
    }
};
struct Vehicle_Centaur_Base_eventOnPeelOutBegin_Parms
{
    Vehicle_Centaur_Base_eventOnPeelOutBegin_Parms(EEventParm)
    {
    }
};
struct Vehicle_Centaur_Base_eventEndBoost_Parms
{
    Vehicle_Centaur_Base_eventEndBoost_Parms(EEventParm)
    {
    }
};
struct Vehicle_Centaur_Base_eventStartBoost_Parms
{
    Vehicle_Centaur_Base_eventStartBoost_Parms(EEventParm)
    {
    }
};
struct Vehicle_Centaur_Base_eventHitOtherGearVehicle_Parms
{
    class AGearVehicle* OtherGearV;
    Vehicle_Centaur_Base_eventHitOtherGearVehicle_Parms(EEventParm)
    {
    }
};
struct Vehicle_Centaur_Base_eventCentaurPlayLocalSound_Parms
{
    class USoundCue* Sound;
    FLOAT FadeInTime;
    class UAudioComponent* ReturnValue;
    Vehicle_Centaur_Base_eventCentaurPlayLocalSound_Parms(EEventParm)
    {
    }
};
class AVehicle_Centaur_Base : public AGearVehicle
{
public:
    //## BEGIN PROPS Vehicle_Centaur_Base
    INT DefaultCentaurHealth;
    FLOAT CentaurTurretSpeed;
    FLOAT TargetingFOV;
    FLOAT BoostingFOV;
    FLOAT BoostUseRate;
    FLOAT BoostRechargeRate;
    FLOAT MaxBoostFuel;
    FLOAT ReBoostDelay;
    FLOAT MinBoostDuration;
    FLOAT BoostFuel;
    BITFIELD bAllowBoosting:1;
    BITFIELD bOnGroundLastFrame:1;
    BITFIELD bSuppressCannonFire:1;
    BITFIELD bIsBoosting:1;
    BITFIELD bSnowFieldActive:1;
    BITFIELD bAutoCenterCamOnBoost:1;
    BITFIELD bDamagedPastStage1:1;
    BITFIELD bFromFullHealth:1;
    BITFIELD bHasSetHealth:1;
    BITFIELD bPeelOutEffectsActive:1;
    BITFIELD bSpotlightActive:1;
    BITFIELD bSpotlightFlickerOn:1;
    BITFIELD bPlayLandSoundUponLanding:1;
    BITFIELD bEngineSoundEnabled:1;
    class USoundCue* SquishSound;
    FLOAT LastTimeActorRunOver;
    FLOAT MinTimeBetweenRunOverEvents;
    FLOAT NextBoostTime;
    FLOAT LastBoostTime;
    FName BoostHeatEffectName;
    class UParticleSystemComponent* PSC_BoostWheelEffect[2];
    BYTE CentaurSurface;
    class UParticleSystem* SnowWheelEffect;
    class UParticleSystem* SnowPeelOutEffect;
    class UParticleSystem* SnowBoostEffect;
    class USoundCue* SnowTireAudioLoop;
    class UParticleSystem* IceWheelEffect;
    class UParticleSystem* IcePeelOutEffect;
    class UParticleSystem* IceBoostEffect;
    class USoundCue* IceTireAudioLoop;
    class UParticleSystem* CaveWheelEffect;
    class UParticleSystem* CavePeelOutEffect;
    class UParticleSystem* CaveBoostEffect;
    class USoundCue* CaveTireAudioLoop;
    class UAudioComponent* TireAudioLoopAC;
    FVector2D TireAudioLoopVolumeRange;
    FVector2D TireAudioLoopVolumeVelocityRange;
    FLOAT RecoilLinStrength;
    FLOAT RecoilAngStrength;
    class USpotLightComponent* SpotLightComp;
    class UParticleSystem* SpotlightConeEffect;
    class UParticleSystemComponent* PSC_Spotlight;
    class UMaterialInstanceConstant* SpotLightMIC;
    class USoundCue* SpotLightSound;
    class USoundCue* SpotLightFlickerSound;
    class USoundCue* SpotLightOffSound;
    class UAudioComponent* AC_SpotlightSound;
    class USoundCue* HornSound;
    class UParticleSystem* SnowSprayTemplate;
    class UParticleSystemComponent* PSC_SnowSpray;
    FName SnowFieldSocketName;
    FName TailpipeSocketName;
    class UParticleSystem* TailpipeBoostEffect;
    class UParticleSystemComponent* PSC_TailpipeBoost;
    class USoundCue* BoostStartSound;
    class USoundCue* BoostEndSound;
    class UMaterialInstanceConstant* MIC_VehicleSkin;
    class UCameraAnim* BoostCameraAnim;
    FLOAT KillReaverVel;
    FLOAT KillCrowdVel;
    FLOAT PushCrowdForce;
    FLOAT PushCrowdRadius;
    FLOAT KillCrowdRadius;
    class UCameraAnim* RunOverCreatureCamAnim;
    class UClass* BoostCameraEffectClass;
    class USoundCue* CentaurDeathSound;
    class UParticleSystem* CentaurDeathEffect;
    class UCameraAnim* CentaurDeathCamAnim;
    class UCameraAnim* CentaurCannonCamAnim;
    FLOAT TargetingCannonCamAnimScale;
    class USoundCue* CentaurCannonSound;
    class UParticleSystem* CentaurCannonMuzzzleEffect;
    class UParticleSystemComponent* PSC_MuzzleEffect;
    class UPointLightComponent* CentaurCannonMuzzleLight;
    FLOAT CentaurCannonMuzzleLightTime;
    FLOAT NextDamageRecoverTime;
    FLOAT HealthRecoverRemainder;
    FLOAT DamageRecoverRate;
    FLOAT DamageRecoverDelay;
    FName DamageEffectSocketName;
    TArrayNoInit<class USoundCue*> StartRepairDialog;
    TArrayNoInit<class USoundCue*> DoneRepairDialog;
    FLOAT BairdRepairDialogChance;
    class UAudioComponent* BairdRepairAC;
    class UAudioComponent* AC_OnFireSound;
    class UParticleSystem* Stage1DamageEffect;
    class UParticleSystemComponent* PSC_Stage1Damage;
    FLOAT Stage1Health;
    class UParticleSystem* Stage2DamageEffect;
    class UParticleSystemComponent* PSC_Stage2Damage;
    FLOAT Stage2Health;
    class UParticleSystem* Stage3DamageEffect;
    class UParticleSystemComponent* PSC_Stage3Damage;
    FLOAT Stage3Health;
    class UParticleSystemComponent* PSC_PeelOutEffect[4];
    class UCameraAnim* PeelOutCamAnim;
    FLOAT PeelOutMaxWheelVel;
    class USoundCue* PeelOutSound;
    FLOAT LastPeelOutSound;
    class UAnimNodeSequence* ActionNode;
    FLOAT OldTime;
    FVector CamStiffness;
    FVector CamDamping;
    FVector CamLimits;
    FVector CamPos;
    FVector CamVel;
    FLOAT CamYawStiffness;
    FLOAT CamYawDamping;
    FLOAT CamYawPos;
    FLOAT CamYawVel;
    class UMaterialInstance* OverlayMI;
    class UPostProcessChain* OverlayEffect;
    FLOAT OverlaySpreadFactor;
    FLOAT OverlayEffectFactor;
    FVector SplitDriverCamViewOffsetHigh;
    FVector SplitDriverCamViewOffsetMid;
    FVector SplitDriverCamViewOffsetLow;
    FLOAT SpotlightToggleTime;
    FLOAT LightFlickerTimeMin;
    FLOAT LightFlickerDuration;
    class UAudioComponent* EnginePlayerAmbientLoopAC;
    class USoundCue* EnginePlayerAmbientLoopCue;
    FVector2D EnginePlayerAmbientVolumeRange;
    FVector2D EnginePlayerAmbientVelocityRange;
    class USoundCue* CentaurSuspensionSound;
    FLOAT LastSuspensionSoundTime;
    FLOAT CentaurSuspensionSoundMinTimeBetween;
    FLOAT CentaurSuspensionSoundThreshold;
    class USoundCue* CentaurLandSound;
    class UAudioComponent* CentaurTurretRotationAC;
    FVector2D CentaurTurretRotationVolumeVelRange;
    FVector2D CentaurTurretRotationVolumeRange;
    FVector2D CentaurTurretRotationPitchVelRange;
    FVector2D CentaurTurretRotationPitchRange;
    struct FCentaurGearInfo CentaurGear;
    class UAudioComponent* CurrentEngineLoopAC;
    class USoundCue* EngineStartSound;
    class USoundCue* EngineStopSound;
    FLOAT DebugLastRPM;
    struct FActionInfo ActionTurnOnSpot;
    FLOAT TurnTooltipVelThresh;
    FLOAT TurnToolTipDelay;
    FLOAT TimeBelowTooltipVel;
    //## END PROPS Vehicle_Centaur_Base

    virtual UBOOL ShouldClamp();
    void eventSquishedSomething()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_SquishedSomething),NULL);
    }
    void eventOnPeelOutBegin()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_OnPeelOutBegin),NULL);
    }
    void eventEndBoost()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_EndBoost),NULL);
    }
    void eventStartBoost()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_StartBoost),NULL);
    }
    void eventHitOtherGearVehicle(class AGearVehicle* OtherGearV)
    {
        Vehicle_Centaur_Base_eventHitOtherGearVehicle_Parms Parms(EC_EventParm);
        Parms.OtherGearV=OtherGearV;
        ProcessEvent(FindFunctionChecked(GEARGAME_HitOtherGearVehicle),&Parms);
    }
    class UAudioComponent* eventCentaurPlayLocalSound(class USoundCue* Sound,FLOAT FadeInTime=0)
    {
        Vehicle_Centaur_Base_eventCentaurPlayLocalSound_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.Sound=Sound;
        Parms.FadeInTime=FadeInTime;
        ProcessEvent(FindFunctionChecked(GEARGAME_CentaurPlayLocalSound),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AVehicle_Centaur_Base,AGearVehicle,0|CLASS_Config,GearGame)
public:
	virtual void OnRigidBodyCollision(const FRigidBodyCollisionInfo& Info0, const FRigidBodyCollisionInfo& Info1, const FCollisionImpactData& RigidCollisionData);
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual UBOOL IgnoreBlockingBy( const AActor *Other ) const;
	virtual void SetWheelEffectParams(USVehicleWheel* VW, FLOAT SlipVel);
	virtual FLOAT GetGravityZ();

};

struct FCraneRaiseLimit
{
    INT LimitYawMin;
    INT LimitYawMax;
    INT MinRaise;
    INT MaxRaise;
    BITFIELD bDisableSwingAtBottom:1;
    BITFIELD bHardLimit:1;

    /** Constructors */
    FCraneRaiseLimit() {}
    FCraneRaiseLimit(EEventParm)
    {
        appMemzero(this, sizeof(FCraneRaiseLimit));
    }
};

struct FCraneSpringState
{
    FVector SpringPos;
    FLOAT SpringVelX;
    FLOAT SpringVelY;
    FLOAT SpringVelZ;
    BYTE bNewData;

    /** Constructors */
    FCraneSpringState() {}
    FCraneSpringState(EEventParm)
    {
        appMemzero(this, sizeof(FCraneSpringState));
    }
};

class AVehicle_Crane_Base : public AGearVehicle
{
public:
    //## BEGIN PROPS Vehicle_Crane_Base
    FLOAT MaxYawAngVel;
    FLOAT YawTorque;
    FLOAT YawDamping;
    INT MinYaw;
    INT MaxYaw;
    FLOAT YawAngVel;
    FLOAT CurrentYawAng;
    FLOAT MaxRaiseAngVel;
    FLOAT RaiseTorque;
    FLOAT RaiseDamping;
    INT MinRaise;
    INT MaxRaise;
    INT DisableSwingDist;
    FLOAT SwingFadeOutTime;
    TArrayNoInit<struct FCraneRaiseLimit> CraneLimitSections;
    BITFIELD bForceAbove:1;
    FLOAT ForceAbovePitch;
    INT ForceRaise;
    FLOAT RaiseAngVel;
    FLOAT CurrentRaiseAng;
    class AActor* ExitLocationActor;
    class USkelControlSingleBone* ArmRaiseControl;
    class USkelControlSingleBone* HangControl;
    class UGearSkelCtrl_Spring* SpringControl;
    class USkelControlSingleBone* DrumControl;
    FLOAT DrumSpinFactor;
    struct FCraneSpringState SpringState;
    FName CraneCameraMatineeName;
    class USeqAct_Interp* CraneCameraMatinee;
    class USoundCue* CraneArmMovingLoop;
    class UAudioComponent* CraneArmMovingLoopAC;
    FLOAT CraneArmAudioMaxYawAngVel;
    class USoundCue* CraneEngineIdleLoop;
    class UAudioComponent* CraneEngineIdleLoopAC;
    class USoundCue* CraneEngineStartLoop;
    class USoundCue* CraneEngineStopLoop;
    //## END PROPS Vehicle_Crane_Base

    virtual class USeqAct_Interp* FindCraneCameraMatinee() const;
    UBOOL GetRaiseLimits(INT& OutMinRaise,INT& OutMaxRaise,BYTE& bStopSwingLimit);
    DECLARE_FUNCTION(execFindCraneCameraMatinee)
    {
        P_FINISH;
        *(class USeqAct_Interp**)Result=FindCraneCameraMatinee();
    }
    DECLARE_FUNCTION(execGetRaiseLimits)
    {
        P_GET_INT_REF(OutMinRaise);
        P_GET_INT_REF(OutMaxRaise);
        P_GET_BYTE_REF(bStopSwingLimit);
        P_FINISH;
        *(UBOOL*)Result=GetRaiseLimits(OutMinRaise,OutMaxRaise,bStopSwingLimit);
    }
    DECLARE_ABSTRACT_CLASS(AVehicle_Crane_Base,AGearVehicle,0|CLASS_Config|CLASS_NativeReplication,GearGame)
	virtual void physInterpolating(FLOAT DeltaTime);
	virtual INT* GetOptimizedRepList(BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

struct FJackSpotlightInfo
{
    FLOAT InnerConeAngle;
    FLOAT OuterConeAngle;
    FLOAT Radius;
    FLOAT FalloffExponent;
    FLOAT Brightness;
    FColor LightColor;

    /** Constructors */
    FJackSpotlightInfo() {}
    FJackSpotlightInfo(EEventParm)
    {
        appMemzero(this, sizeof(FJackSpotlightInfo));
    }
};

class AVehicle_Jack_Base : public AGearVehicle
{
public:
    //## BEGIN PROPS Vehicle_Jack_Base
    FLOAT MantleAdjustHeight;
    FLOAT StdAdjustHeight;
    class USoundCue* JackCloakSound;
    class USoundCue* JackDecloakSound;
    class USoundCue* JackAcquiredPOISound;
    class USoundCue* JackInspectPOISound;
    class USoundCue* JackHappySound;
    class USoundCue* JackSadSound;
    class USoundCue* JackRecoilSound;
    class USoundCue* JackIdleStillVocalSound;
    class USoundCue* JackIdleMovingVocalSound;
    class USoundCue* JackArmUnfoldSound;
    class USoundCue* JackArmFoldSound;
    class USoundCue* JackPointSound;
    class USoundCue* JackFlyStartSound;
    class USoundCue* JackFlyLoopSound;
    class USoundCue* JackFlyStopSound;
    class USoundCue* JackFlyChangeDirSound;
    class USoundCue* JackMonitorUnfoldSound;
    class USoundCue* JackMonitorFoldSound;
    class USoundCue* JackWeldingIntroSound;
    class USoundCue* JackWeldingOutroSound;
    FLOAT LastJackSoundTime;
    class UAudioComponent* AC_Idle;
    class UAudioComponent* AC_Welding;
    class UAudioComponent* AC_Scanning;
    class USpotLightComponent* FrontSpotlightComp;
    BYTE SpotlightSetting;
    TArrayNoInit<struct FJackSpotlightInfo> SpotLightSettingList;
    class UGearAnim_BlendPerBone* JackMask;
    class UAnimNodeBlendList* MainBlendList;
    class UAnimNodeBlendList* MonitorBlendList;
    class UAnimNodeBlendList* RightArmBlendList;
    class UAnimNodeSequence* CloakAnimNode;
    BITFIELD bSpotlightOn:1;
    BITFIELD bUnfoldMonitor:1;
    BITFIELD bCloaking:1;
    BITFIELD bWelding:1;
    BITFIELD bRecoil:1;
    BITFIELD bScanning:1;
    BITFIELD bPointing:1;
    BITFIELD bCinematicMode:1;
    FName CloakedAnimName;
    FName JackFoldAnimName;
    FName JackUnfoldAnimName;
    FName JackRecoilAnimName;
    INT RecoilDamageThreshold;
    FLOAT LastRecoilTime;
    class UParticleSystem* PS_Eye;
    class UParticleSystemComponent* PSC_Eye_LU;
    class UParticleSystemComponent* PSC_Eye_LL;
    class UParticleSystemComponent* PSC_Eye_RU;
    class UParticleSystemComponent* PSC_Eye_RL;
    class UParticleSystem* PS_Jets;
    class UParticleSystemComponent* PSC_Jets;
    class UParticleSystem* PS_Cloak;
    class UParticleSystemComponent* PSC_Cloak;
    class UParticleSystem* PS_Welding;
    class UParticleSystemComponent* PSC_Welding;
    class UParticleSystem* PS_WeldingImpact;
    class UParticleSystemComponent* PSC_WeldingImpact;
    FLOAT WeldingImpactOffset;
    FLOAT MaxWeldDist;
    class UStaticMeshComponent* RightArmAttach_Hand;
    class UStaticMeshComponent* RightArmAttach_Welder;
    class USkelControlSingleBone* SkelCtrl_MonitorOrient;
    //## END PROPS Vehicle_Jack_Base

    virtual UBOOL IsTooCloseToPlayerCamera(FVector* out_CamLoc=NULL,FRotator* out_CamRot=NULL);
    DECLARE_FUNCTION(execIsTooCloseToPlayerCamera)
    {
        P_GET_STRUCT_OPTX_REF(FVector,out_CamLoc,FVector(EC_EventParm));
        P_GET_STRUCT_OPTX_REF(FRotator,out_CamRot,FRotator(EC_EventParm));
        P_FINISH;
        *(UBOOL*)Result=IsTooCloseToPlayerCamera(pout_CamLoc ? &out_CamLoc : NULL,pout_CamRot ? &out_CamRot : NULL);
    }
    DECLARE_ABSTRACT_CLASS(AVehicle_Jack_Base,AGearVehicle,0|CLASS_Config,GearGame)
		virtual FLOAT GetGravityZ();
		virtual UBOOL AdjustFlight(FLOAT ZDiff, UBOOL bFlyingDown, FLOAT Distance, AActor* GoalActor);
		virtual FVector AdjustDestination( AActor* GoalActor, FVector Dest=FVector(EC_EventParm) );
		virtual void AdjustThrottle( FLOAT Distance );
};

struct FReaverPlayAnimInfo
{
    FName AnimName;
    BYTE bNewData;

    /** Constructors */
    FReaverPlayAnimInfo() {}
    FReaverPlayAnimInfo(EEventParm)
    {
        appMemzero(this, sizeof(FReaverPlayAnimInfo));
    }
};

struct FReaverTransitionInfo
{
    BITFIELD bLanding:1;
    BITFIELD bTakingOff:1;
    FVector EndPosition;
    FVector EndTangent;
    FRotator EndRotation;

    /** Constructors */
    FReaverTransitionInfo() {}
    FReaverTransitionInfo(EEventParm)
    {
        appMemzero(this, sizeof(FReaverTransitionInfo));
    }
};

struct FReaverLegInfo
{
    FName TipSocketName;
    FVector DefaultLegPos;
    class USkelControlTrail* TrailControl;
    class UGearSkelCtrl_CCD_IK* IKControl;
    BITFIELD bStepping:1;
    FLOAT CurrentStepTime;
    FLOAT TotalStepTime;
    FVector StepStartPosition;
    FVector StepEndPosition;
    FLOAT EndSlope;
    FLOAT ZTangent;
    BITFIELD bCutOff:1;

		/** Util to calculate position of foot at a point in the step. */
		FVector CalcFootPos(FLOAT Alpha) const;
	
};

struct FReaverLegAttackInfo
{
    BITFIELD bLLegAttacking:1;
    BITFIELD bRLegAttacking:1;
    FVector LegAttackTarget;

    /** Constructors */
    FReaverLegAttackInfo() {}
    FReaverLegAttackInfo(EEventParm)
    {
        appMemzero(this, sizeof(FReaverLegAttackInfo));
    }
};

struct Vehicle_Reaver_Base_eventNotifyStepFinished_Parms
{
    INT LegIdx;
    Vehicle_Reaver_Base_eventNotifyStepFinished_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventServerFinishedTakingOff_Parms
{
    Vehicle_Reaver_Base_eventServerFinishedTakingOff_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventServerFinishedLanding_Parms
{
    Vehicle_Reaver_Base_eventServerFinishedLanding_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventReaverPassEnded_Parms
{
    Vehicle_Reaver_Base_eventReaverPassEnded_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventDecalTimeVaryingParams_Parms
{
    class UMaterialInstance* MI_Decal;
    Vehicle_Reaver_Base_eventDecalTimeVaryingParams_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventDecalChoice_Parms
{
    struct FTraceHitInfo HitInfo;
    FLOAT out_DecalRotation;
    struct FDecalData out_DecalData;
    Vehicle_Reaver_Base_eventDecalChoice_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventDecalTrace_Parms
{
    FVector out_TraceStart;
    FVector out_TraceDest;
    FLOAT RandomOffsetRadius;
    FVector ForceStartLocation;
    Vehicle_Reaver_Base_eventDecalTrace_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventPlayGibEffect_Parms
{
    FVector HitLoc;
    FVector HitNorm;
    FLOAT SquaredForce;
    Vehicle_Reaver_Base_eventPlayGibEffect_Parms(EEventParm)
    {
    }
};
struct Vehicle_Reaver_Base_eventReaverFlownOff_Parms
{
    Vehicle_Reaver_Base_eventReaverFlownOff_Parms(EEventParm)
    {
    }
};
class AVehicle_Reaver_Base : public AGearVehicle
{
public:
    //## BEGIN PROPS Vehicle_Reaver_Base
    INT DefaultReaverHealth;
    INT HealthForLanding;
    FLOAT FlyingTakeDamageScale;
    class UAudioComponent* FlyingSoundLoopAC;
    class USoundCue* FlyingSoundLoop;
    class USoundCue* FlyingSoundLoop_Player;
    BITFIELD bRestartFlyingLoop:1;
    BITFIELD bGibStraightAway:1;
    BITFIELD bSpawnBloodTrailDecals:1;
    BITFIELD bAllowLanding:1;
    BITFIELD bHasPlayedInitialFlight:1;
    BITFIELD bDestroyOnNextPassEnd:1;
    BITFIELD bCurrentlyLanding:1;
    BITFIELD bCurrentlyTakingOff:1;
    BITFIELD bWalking:1;
    BITFIELD bDrawStepDebug:1;
    BITFIELD bDrawTransitionDebug:1;
    BITFIELD bSuppressRockets:1;
    BITFIELD bSuppressRocketsOnLand:1;
    BITFIELD bLeavingDefeated:1;
    BITFIELD bSpawnSoftGibs:1;
    BITFIELD bHasBrokenConstraints:1;
    BITFIELD bIsGore:1;
    BITFIELD bGoreSetupForDeath:1;
    BITFIELD bSkipCharFade:1;
    BITFIELD bSkipHeatFade:1;
    class USoundCue* ReaverDeathSound;
    class UParticleSystem* ReaverExplodeEffect;
    class UParticleSystem* ReaverExplodeNoGoreEffect;
    class UParticleSystem* ReaverPreExplodeEffect;
    class USoundCue* ReaverGibDeathSound;
    FLOAT ReaverGibbageDelay;
    class UPhysicsAsset* ReaverRagdollPhysicsAsset;
    class UParticleSystem* GoreImpactParticle;
    INT EffectCount;
    FLOAT TimeBetweenGibEffects;
    FLOAT GibEffectsSpeedThreshold;
    FLOAT GibKillDistance;
    class USoundCue* ReaverTakeOffSound;
    class USoundCue* ReaverTakeOffSound_Player;
    class USoundCue* LegAttackSound;
    class USoundCue* ReaverFootstepSound;
    class UMaterialInstanceConstant* MIC_PawnMat;
    class UMaterialInstanceConstant* MIC_PawnMat2;
    class UInterpData* FlightPaths[16];
    class UInterpData* InitialFlightPath;
    FLOAT CurrentInterpTime;
    FLOAT CurrentTransitionTime;
    INT CurrentFlightIndex;
    INT FlightCount;
    INT RestartMainBoneAnimCount;
    FLOAT LastMainBoneAnimPos;
    FLOAT AngVelAimOffsetScale;
    FLOAT AngVelAimOffsetChangeSpeed;
    struct FReaverPlayAnimInfo AnimRepInfo;
    BYTE bMouthOpen;
    FVector2D MouthOpenTime;
    FLOAT MouthDamageBoost;
    class UCylinderComponent* MouthComp;
    FLOAT BellyDamageBoost;
    class UCylinderComponent* BellyComp;
    FLOAT LastHitAnimTime;
    FLOAT MinHitAnimInterval;
    FLOAT MinLandingPointDot;
    TArrayNoInit<class AReaverLandingPoint*> AssignedLandingPoints;
    struct FScreenShakeStruct LandingViewShake;
    FLOAT LandingShakeInnerRadius;
    FLOAT LandingShakeOuterRadius;
    FLOAT LandingShakeFalloff;
    FVector TransitionStartPosition;
    FVector TransitionStartTangent;
    FRotator TransitionStartRotation;
    FLOAT LandSplineTangent;
    FLOAT LandZOffset;
    FLOAT LandEffectZOffset;
    struct FReaverTransitionInfo TransitionInfo;
    FLOAT TakeOffTargetInterpTime;
    FLOAT LandingTime;
    FLOAT TakeOffTime;
    class ANavigationPoint* LandingPoint;
    struct FReaverLegInfo LegInfo[6];
    class UAnimNodeBlendList* FlyingBlendNode;
    class UAnimNodeSequence* WalkAnimNode;
    class UAnimNodeSequence* TransitionNode;
    class UAnimNodeSlot* AttackSlotNode;
    class UAnimNodeBlendList* RandHeadBlendNode;
    class UGearAnim_BlendPerBone* PainLoopBlend;
    class UAnimNodeSequence* MainBoneAnimNode;
    class UGearAnim_Slot* FullBodySlotNode;
    FVector TentacleFakeVelocity;
    FLOAT WalkAnimLinRateScale;
    FLOAT WalkAnimAngRateScale;
    FLOAT WalkCycleDuration;
    FLOAT StepZTangent;
    FLOAT StepAdvanceFactor;
    FLOAT StepEndSlope;
    FLOAT LegForceStepPlayerDist;
    FLOAT LegForceStepPlayerRand;
    FLOAT LegForceStepErrorDist;
    FLOAT AllowRocketFireTime;
    FVector RAttackPoint;
    FVector LAttackPoint;
    FLOAT LegAttackDist;
    class USoundCue* ReaverAttackSound;
    class USoundCue* ReaverScreamSound;
    class USoundCue* ReaverPainSound;
    class USoundCue* ReaverPainSound_Player;
    FLOAT LastSeenPlayerTime;
    class USoundCue* ReaverSeePlayerSound;
    class USoundCue* ReaverHowlSound;
    class USoundCue* ReaverLandSound;
    class USoundCue* ReaverLandSound_Player;
    TArrayNoInit<class USoundCue*> ReaverRandomSounds;
    FLOAT NextReaverRandomSound;
    FVector2D ReaverRandomSoundInterval;
    class UAudioComponent* RandomSoundComp;
    struct FReaverLegAttackInfo AttackInfo;
    FLOAT LegRaiseTime;
    FLOAT LegAttackTime;
    FLOAT NextAttackTime;
    FLOAT LegAttackInterval;
    class UGearExplosion* StrikeTemplate;
    FLOAT StrikeBaseDamage;
    FLOAT StrikeDamageFalloff;
    FLOAT StrikeDamageRadius;
    class UClass* DriverClass;
    class UClass* GunnerClass;
    FVector GunnerOffset;
    class AGearPawn* Gunner;
    class USkeletalMesh* GoreSkeletalMesh;
    class UPhysicsAsset* GorePhysicsAsset;
    FLOAT GoreExplosionRadius;
    FLOAT GoreExplosionVel;
    FLOAT CurrentSkinHeat;
    FLOAT CurrentSkinHeatMin;
    FLOAT SkinHeatDamagePctToFullyHeat;
    FLOAT SkinHeatFadeTime;
    FLOAT HeatDamagePerSecond;
    class AController* HeatDamageInstigator;
    FLOAT HeatDamageFraction;
    FLOAT CurrentSkinChar;
    FLOAT CurrentSkinCharMin;
    FLOAT SkinCharFadeTime;
    FScriptDelegate __DecalTrace__Delegate;
    FScriptDelegate __DecalChoice__Delegate;
    FScriptDelegate __DecalTimeVaryingParams__Delegate;
    //## END PROPS Vehicle_Reaver_Base

    virtual UBOOL CanLand();
    virtual void InitLegs();
    virtual void CalcDefaultLegPositions();
    virtual void TakeStep(INT FootIndex,FLOAT RandomOffset,FLOAT StepTime,FLOAT ZTangentScale);
    virtual void MoveFootToPos(INT FootIndex,FVector EndPos,FLOAT Time,FLOAT InZTangent,FLOAT InEndSlope);
    virtual UBOOL FindNearestPathAndTime(INT& OutFlightIndex,FLOAT& OutInterpTime,FVector& OutFlightPos,FRotator& OutFlightRot,FVector& OutFlightVel);
    DECLARE_FUNCTION(execCanLand)
    {
        P_FINISH;
        *(UBOOL*)Result=CanLand();
    }
    DECLARE_FUNCTION(execInitLegs)
    {
        P_FINISH;
        InitLegs();
    }
    DECLARE_FUNCTION(execCalcDefaultLegPositions)
    {
        P_FINISH;
        CalcDefaultLegPositions();
    }
    DECLARE_FUNCTION(execTakeStep)
    {
        P_GET_INT(FootIndex);
        P_GET_FLOAT(RandomOffset);
        P_GET_FLOAT(StepTime);
        P_GET_FLOAT(ZTangentScale);
        P_FINISH;
        TakeStep(FootIndex,RandomOffset,StepTime,ZTangentScale);
    }
    DECLARE_FUNCTION(execMoveFootToPos)
    {
        P_GET_INT(FootIndex);
        P_GET_STRUCT(FVector,EndPos);
        P_GET_FLOAT(Time);
        P_GET_FLOAT(InZTangent);
        P_GET_FLOAT(InEndSlope);
        P_FINISH;
        MoveFootToPos(FootIndex,EndPos,Time,InZTangent,InEndSlope);
    }
    DECLARE_FUNCTION(execFindNearestPathAndTime)
    {
        P_GET_INT_REF(OutFlightIndex);
        P_GET_FLOAT_REF(OutInterpTime);
        P_GET_STRUCT_REF(FVector,OutFlightPos);
        P_GET_STRUCT_REF(FRotator,OutFlightRot);
        P_GET_STRUCT_REF(FVector,OutFlightVel);
        P_FINISH;
        *(UBOOL*)Result=FindNearestPathAndTime(OutFlightIndex,OutInterpTime,OutFlightPos,OutFlightRot,OutFlightVel);
    }
    void eventNotifyStepFinished(INT LegIdx)
    {
        Vehicle_Reaver_Base_eventNotifyStepFinished_Parms Parms(EC_EventParm);
        Parms.LegIdx=LegIdx;
        ProcessEvent(FindFunctionChecked(GEARGAME_NotifyStepFinished),&Parms);
    }
    void eventServerFinishedTakingOff()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerFinishedTakingOff),NULL);
    }
    void eventServerFinishedLanding()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerFinishedLanding),NULL);
    }
    void eventReaverPassEnded()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ReaverPassEnded),NULL);
    }
    void delegateDecalTimeVaryingParams(class UMaterialInstance*& MI_Decal)
    {
        Vehicle_Reaver_Base_eventDecalTimeVaryingParams_Parms Parms(EC_EventParm);
        Parms.MI_Decal=MI_Decal;
        ProcessDelegate(GEARGAME_DecalTimeVaryingParams,&__DecalTimeVaryingParams__Delegate,&Parms);
        MI_Decal=Parms.MI_Decal;
    }
    void delegateDecalChoice(const struct FTraceHitInfo& HitInfo,FLOAT& out_DecalRotation,struct FDecalData& out_DecalData)
    {
        Vehicle_Reaver_Base_eventDecalChoice_Parms Parms(EC_EventParm);
        Parms.HitInfo=HitInfo;
        Parms.out_DecalRotation=out_DecalRotation;
        Parms.out_DecalData=out_DecalData;
        ProcessDelegate(GEARGAME_DecalChoice,&__DecalChoice__Delegate,&Parms);
        out_DecalRotation=Parms.out_DecalRotation;
        out_DecalData=Parms.out_DecalData;
    }
    void delegateDecalTrace(FVector& out_TraceStart,FVector& out_TraceDest,const FLOAT RandomOffsetRadius,FVector ForceStartLocation=FVector(EC_EventParm))
    {
        Vehicle_Reaver_Base_eventDecalTrace_Parms Parms(EC_EventParm);
        Parms.out_TraceStart=out_TraceStart;
        Parms.out_TraceDest=out_TraceDest;
        Parms.RandomOffsetRadius=RandomOffsetRadius;
        Parms.ForceStartLocation=ForceStartLocation;
        ProcessDelegate(GEARGAME_DecalTrace,&__DecalTrace__Delegate,&Parms);
        out_TraceStart=Parms.out_TraceStart;
        out_TraceDest=Parms.out_TraceDest;
    }
    void eventPlayGibEffect(FVector HitLoc,FVector HitNorm,FLOAT SquaredForce)
    {
        Vehicle_Reaver_Base_eventPlayGibEffect_Parms Parms(EC_EventParm);
        Parms.HitLoc=HitLoc;
        Parms.HitNorm=HitNorm;
        Parms.SquaredForce=SquaredForce;
        ProcessEvent(FindFunctionChecked(GEARGAME_PlayGibEffect),&Parms);
    }
    void eventReaverFlownOff()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ReaverFlownOff),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AVehicle_Reaver_Base,AGearVehicle,0|CLASS_Config|CLASS_NativeReplication,GearGame)
	// Actor interface
	/** Special case interpolation for reavers following matinee paths and landing. */
	virtual void physInterpolating(FLOAT DeltaTime);
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual UBOOL ShouldTrace(UPrimitiveComponent* Primitive,AActor *SourceActor, DWORD TraceFlags);

	// Reaver interface
	/** Moves Reaver along a matinee path. */
	void ReaverFlying(FLOAT DeltaTime);
	/** Moves Reaver along spline to its landing point. */
	void ReaverTransitioning(FLOAT DeltaTime);

	/** Util for getting current InterpGroup used by this Reaver. */
	class UInterpGroup* GetCurrentInterpGroup();

	virtual void CheckForErrors();
};

struct FRideReaverDamageInfo
{
    FName dmgType;
    INT DamageDone;

    /** Constructors */
    FRideReaverDamageInfo() {}
    FRideReaverDamageInfo(EEventParm)
    {
        appMemzero(this, sizeof(FRideReaverDamageInfo));
    }
};

struct Vehicle_RideReaver_Base_eventDriverSpeakLine_Parms
{
    class USoundCue* Audio;
    UBOOL bSuppressSubtitles;
    Vehicle_RideReaver_Base_eventDriverSpeakLine_Parms(EEventParm)
    {
    }
};
class AVehicle_RideReaver_Base : public AGearVehicle
{
public:
    //## BEGIN PROPS Vehicle_RideReaver_Base
    class USkeletalMeshComponent* DriverComp;
    class USkeletalMeshComponent* TurretComp;
    INT DefaultRideReaverHealth;
    FLOAT HealthRechargeRate;
    FLOAT PartialHealth;
    TArrayNoInit<struct FRideReaverDamageInfo> DamageInfos;
    FLOAT TargetingFOV;
    FLOAT RideReaverDefaultFOV;
    class UAnimTree* GunnerAnimTree;
    TArrayNoInit<class UAnimSet*> GunnerAnimSets;
    class USoundCue* RocketFireSound;
    class USoundCue* RocketFireSound_Player;
    class USoundCue* MinigunFireLoop;
    class USoundCue* MinigunFireLoop_Player;
    class USoundCue* MinigunFireStopCue;
    class USoundCue* MinigunFireStopCue_Player;
    class UAudioComponent* MinigunFiringLoopAC;
    class USoundCue* HeatBuildupCue;
    class UAudioComponent* HeatBuildUpAC;
    class USoundCue* ReaverTakeOffSound;
    class USoundCue* ReaverTakeOffSound_Player;
    class USoundCue* ReaverLeanCue_Player;
    class USoundCue* ReaverDodgeCue_Player;
    class USoundCue* ReaverMovementCue;
    TArrayNoInit<class USoundCue*> RandomReaverGrowls;
    class USoundCue* ReaverPainSound;
    class UAudioComponent* FacialAudioComp;
    class USpotLightComponent* FrontSpotlightComp;
    class USpotLightComponent* RearSpotlightComp;
    class UPointLightComponent* GlowLightComp;
    class UPointLightComponent* RocketMuzzleLight;
    FLOAT RocketMuzzleLightTime;
    class UParticleSystem* RocketMuzzleEffect;
    class UParticleSystemComponent* PSC_RocketMuzzleEffect;
    class UPointLightComponent* MinigunMuzzleLight;
    FLOAT MinigunMuzzleLightTime;
    class UParticleSystem* MinigunMuzzleEffect;
    class UParticleSystemComponent* PSC_MinigunMuzzleEffect;
    class UParticleSystem* PS_StrikeTemplate;
    FVector LastOrigInterpLocation;
    FLOAT DodgeCamAmount;
    FLOAT WeaponTransitionCamRotBlendTime;
    FLOAT WeaponTransitionCamTranslationBlendTime;
    FLOAT WeaponTransitionCamBlendDuration;
    FLOAT WeapTransitionRemaining;
    class UAnimNodeBlend* BodyAnimBlend;
    class UAnimNodeBlendList* FlyingBlendNode;
    class UAnimNodeSequence* WalkAnimNode;
    class UAnimNodeSequence* TransitionNode;
    TArrayNoInit<FName> TipSocketName;
    FLOAT LandingTime;
    FLOAT TakeOffTime;
    FLOAT LandEffectZOffset;
    class USoundCue* ReaverHowlSound;
    class USoundCue* ReaverLandSound;
    class USoundCue* ReaverLandSound_Player;
    class USoundCue* ReaverScreamSound;
    FLOAT MaxDodgeAmount;
    FLOAT DodgeSpeed;
    FVector TargetDodge;
    FVector CurrentDodgeAmount;
    FVector CurrentDodgeVel;
    FLOAT DodgeRotationAmount;
    FVector DodgeRotVelHistory[10];
    INT DodgeRotVelSlot;
    BITFIELD bPlayLanding:1;
    BITFIELD bLegsWalking:1;
    BITFIELD bDisableDodging:1;
    BITFIELD bDisableVerticalDodging:1;
    BITFIELD bSpotlightsDisabled:1;
    BITFIELD bWasFacingBackwards:1;
    BITFIELD bStartOnMinigun:1;
    BITFIELD bPendingMoveDriver:1;
    BITFIELD bHasAlreadySeated:1;
    BITFIELD bRestartFlyingLoop:1;
    BITFIELD bDodgeAudioTempDisabled:1;
    class USkelControlTrail* TrailControls[6];
    FVector TentacleFakeVelocity;
    FLOAT TentacleTrailRelaxation;
    FLOAT LookPressSeatChangeTime;
    FLOAT CurrentLookPressTime;
    class UAnimNodeBlend* GunnerSeatBlendNode;
    class UGearAnim_Slot* GunnerFullBodySlotNode;
    FVector TurretFlashLocation;
    class USkeletalMesh* GoreSkeletalMesh;
    class UPhysicsAsset* GorePhysicsAsset;
    FLOAT GoreExplosionRadius;
    FLOAT GoreExplosionVel;
    class USoundCue* ReaverDeathSound;
    class UParticleSystem* ReaverExplodeEffect;
    class UParticleSystem* ReaverExplodeNoGoreEffect;
    class UMaterialInstance* OverlayMI;
    class UPostProcessChain* OverlayEffect;
    FLOAT OverlaySpreadFactor;
    FLOAT OverlayEffectFactor;
    class UAudioComponent* FlyingSoundLoopAC;
    class USoundCue* FlyingSoundLoop;
    class USoundCue* FlyingSoundLoop_Player;
    //## END PROPS Vehicle_RideReaver_Base

    void eventDriverSpeakLine(class USoundCue* Audio,UBOOL bSuppressSubtitles)
    {
        Vehicle_RideReaver_Base_eventDriverSpeakLine_Parms Parms(EC_EventParm);
        Parms.Audio=Audio;
        Parms.bSuppressSubtitles=bSuppressSubtitles ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_DriverSpeakLine),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AVehicle_RideReaver_Base,AGearVehicle,0|CLASS_Config,GearGame)
	virtual void TickSpecial(FLOAT DeltaSeconds);
	virtual void AdjustInterpTrackMove(FVector& Pos, FRotator& Rot, FLOAT DeltaTime);
};

class AGearWeaponPawn : public AGearVehicleBase
{
public:
    //## BEGIN PROPS GearWeaponPawn
    class AGearVehicleWeapon* MyVehicleWeapon;
    class AGearVehicle* MyVehicle;
    INT MySeatIndex;
    //## END PROPS GearWeaponPawn

    virtual FVector GetTargetLocation(class AActor* RequestedBy=NULL,UBOOL bRequestAlternateLoc=FALSE) const;
    DECLARE_CLASS(AGearWeaponPawn,AGearVehicleBase,0|CLASS_Config|CLASS_NativeReplication,GearGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual AVehicle* GetVehicleBase();
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

class ACinematicCentaur_Base : public ASkeletalMeshActor
{
public:
    //## BEGIN PROPS CinematicCentaur_Base
    class AActor* AimAtActor;
    FLOAT WheelRadius;
    FLOAT SuspensionTravel;
    FLOAT AngVelSteerFactor;
    FLOAT MaxSteerAngle;
    class USkelControlWheel* WheelControls[4];
    FName WheelBoneName[4];
    FVector WheelPosition[4];
    class UGearSkelCtrl_TurretConstrained* TurretControls[2];
    class UMaterialInstanceConstant* TankMIC[2];
    class USoundCue* CentaurDeathSound;
    class UParticleSystem* CentaurDeathEffectKeepTurret;
    class UParticleSystem* CentaurDeathEffectLoseTurret;
    BITFIELD bLoseTurretOnDeath:1;
    FLOAT MinDistFactorForUpdate;
    class USoundCue* CentaurCannonSound;
    class UParticleSystem* CentaurCannonMuzzzleEffect;
    class UParticleSystemComponent* PSC_MuzzleEffect;
    TArrayNoInit<FName> DeathAnimNames;
    class UAnimNodeSequence* ActionNode;
    INT FireCount;
    INT DieCount;
    //## END PROPS CinematicCentaur_Base

    DECLARE_ABSTRACT_CLASS(ACinematicCentaur_Base,ASkeletalMeshActor,0,GearGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class UGearVehicleSimChopper : public USVehicleSimBase
{
public:
    //## BEGIN PROPS GearVehicleSimChopper
    FLOAT MaxThrustForce;
    FLOAT MaxReverseForce;
    FLOAT LongDamping;
    FLOAT MaxStrafeForce;
    FLOAT LatDamping;
    FLOAT DirectionChangeForce;
    FLOAT MaxRiseForce;
    FLOAT UpDamping;
    FLOAT TurnTorqueFactor;
    FLOAT TurnTorqueMax;
    FLOAT TurnDamping;
    FLOAT MaxYawRate;
    FLOAT PitchTorqueFactor;
    FLOAT PitchTorqueMax;
    FLOAT PitchDamping;
    FLOAT RollTorqueTurnFactor;
    FLOAT RollTorqueStrafeFactor;
    FLOAT RollTorqueMax;
    FLOAT RollDamping;
    FLOAT StopThreshold;
    FLOAT MaxRandForce;
    FLOAT RandForceInterval;
    BITFIELD bAllowZThrust:1;
    BITFIELD bFullThrustOnDirectionChange:1;
    BITFIELD bShouldCutThrustMaxOnImpact:1;
    BITFIELD bRecentlyHit:1;
    BITFIELD bStrafeAffectsTurnDamping:1;
    BITFIELD bHeadingInitialized:1;
    BITFIELD bStabilizeStops:1;
    FLOAT StrafeTurnDamping;
    FLOAT TargetHeading;
    FLOAT TargetPitch;
    FLOAT PitchViewCorrelation;
    FVector RandForce;
    FVector RandTorque;
    FLOAT AccumulatedTime;
    FLOAT StabilizationForceMultiplier;
    FLOAT CurrentStabilizationMultiplier;
    FVector OldVelocity;
    FLOAT StoppedBrakeTorque;
    FLOAT HardLimitAirSpeedScale;
    //## END PROPS GearVehicleSimChopper

    DECLARE_CLASS(UGearVehicleSimChopper,USVehicleSimBase,0,GearGame)
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual FVector StabilizationForce(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	virtual FVector StabilizationTorque(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UGearVehicleSimHover : public UGearVehicleSimChopper
{
public:
    //## BEGIN PROPS GearVehicleSimHover
    BITFIELD bDisableWheelsWhenOff:1;
    BITFIELD bRepulsorCollisionEnabled:1;
    BITFIELD bCanClimbSlopes:1;
    BITFIELD bUnPoweredDriving:1;
    //## END PROPS GearVehicleSimHover

    DECLARE_CLASS(UGearVehicleSimHover,UGearVehicleSimChopper,0,GearGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UGearVehicleSimCar : public USVehicleSimCar
{
public:
    //## BEGIN PROPS GearVehicleSimCar
    FInterpCurveFloat TorqueVSpeedCurve;
    FLOAT LSDFactor;
    FLOAT ThrottleSpeed;
    FLOAT BoostSpeed;
    FLOAT InAirUprightTorqueFactor;
    FLOAT InAirUprightMaxTorque;
    FLOAT InAirAngVelDamping;
    FLOAT BoostAirSpeedScale;
    FLOAT BoostTorqueScale;
    FLOAT BoostSteerSpeed;
    FLOAT BoostMaxSteerAngleScale;
    BITFIELD bDoTankSteering:1;
    BITFIELD bForceStop:1;
    FLOAT TankSteerThrottleThreshold;
    FLOAT MaxEngineTorque;
    FLOAT TurnInPlaceThrottle;
    FLOAT InsideTrackTorqueFactor;
    FLOAT ActualBoost;
    FLOAT MinRPM;
    FLOAT MaxRPM;
    FLOAT ActualThrottle;
    FLOAT TotalTorque;
    //## END PROPS GearVehicleSimCar

    DECLARE_CLASS(UGearVehicleSimCar,USVehicleSimCar,0,GearGame)
	// SVehicleSimBase interface.
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateHandbrake(ASVehicle* Vehicle);

	// Approximate tank steering
	void ApplyTankSteering(ASVehicle* Vehicle, FLOAT DeltaTime);
};

#endif // !INCLUDED_GEARGAME_VEHICLE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AGearVehicle,-1,execDoTurretTrace);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetPhysicalFireStartLoc);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetEffectLocation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetBarrelLocationAndRotation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetViewRotation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execShouldClamp);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetClampedViewRotation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetGravityZ);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetCameraNoRenderCylinder);
AUTOGENERATE_FUNCTION(AGearVehicle,999,execIsSeatControllerReplicationViewer);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execIsValidEnemyTargetFor);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetBarrelIndex);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execGetSeatPivotPoint);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execForceWeaponRotation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execSeatFiringMode);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execSeatFlashCount);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execSeatFlashLocation);
AUTOGENERATE_FUNCTION(AGearVehicle,-1,execSeatWeaponRotation);
AUTOGENERATE_FUNCTION(AGearWeaponPawn,-1,execGetTargetLocation);
AUTOGENERATE_FUNCTION(AVehicle_Centaur_Base,-1,execShouldClamp);
AUTOGENERATE_FUNCTION(AVehicle_Crane_Base,-1,execGetRaiseLimits);
AUTOGENERATE_FUNCTION(AVehicle_Crane_Base,-1,execFindCraneCameraMatinee);
AUTOGENERATE_FUNCTION(AVehicle_Jack_Base,-1,execIsTooCloseToPlayerCamera);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execFindNearestPathAndTime);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execMoveFootToPos);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execTakeStep);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execCalcDefaultLegPositions);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execInitLegs);
AUTOGENERATE_FUNCTION(AVehicle_Reaver_Base,-1,execCanLand);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_VEHICLE_NATIVE_DEFS
#define GEARGAME_VEHICLE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,ACinematicCentaur_Base);
DECLARE_NATIVE_TYPE(GearGame,AGearVehicle);
DECLARE_NATIVE_TYPE(GearGame,AGearVehicleBase);
DECLARE_NATIVE_TYPE(GearGame,UGearVehicleSimCar);
DECLARE_NATIVE_TYPE(GearGame,UGearVehicleSimChopper);
DECLARE_NATIVE_TYPE(GearGame,UGearVehicleSimHover);
DECLARE_NATIVE_TYPE(GearGame,AGearWeaponPawn);
DECLARE_NATIVE_TYPE(GearGame,AHydra_Base);
DECLARE_NATIVE_TYPE(GearGame,AVehicle_Centaur_Base);
DECLARE_NATIVE_TYPE(GearGame,AVehicle_Crane_Base);
DECLARE_NATIVE_TYPE(GearGame,AVehicle_Jack_Base);
DECLARE_NATIVE_TYPE(GearGame,AVehicle_Reaver_Base);
DECLARE_NATIVE_TYPE(GearGame,AVehicle_RideReaver_Base);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_VEHICLE \
	ACinematicCentaur_Base::StaticClass(); \
	AGearVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGearVehicleNative; \
	AGearVehicleBase::StaticClass(); \
	UGearVehicleSimCar::StaticClass(); \
	UGearVehicleSimChopper::StaticClass(); \
	UGearVehicleSimHover::StaticClass(); \
	AGearWeaponPawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGearWeaponPawnNative; \
	AHydra_Base::StaticClass(); \
	AVehicle_Centaur_Base::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAVehicle_Centaur_BaseNative; \
	AVehicle_Crane_Base::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAVehicle_Crane_BaseNative; \
	AVehicle_Jack_Base::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAVehicle_Jack_BaseNative; \
	AVehicle_Reaver_Base::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAVehicle_Reaver_BaseNative; \
	AVehicle_RideReaver_Base::StaticClass(); \

#endif // GEARGAME_VEHICLE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AGearVehicle) GGearGameAGearVehicleNatives[] = 
{ 
	MAP_NATIVE(AGearVehicle,execDoTurretTrace)
	MAP_NATIVE(AGearVehicle,execGetPhysicalFireStartLoc)
	MAP_NATIVE(AGearVehicle,execGetEffectLocation)
	MAP_NATIVE(AGearVehicle,execGetBarrelLocationAndRotation)
	MAP_NATIVE(AGearVehicle,execGetViewRotation)
	MAP_NATIVE(AGearVehicle,execShouldClamp)
	MAP_NATIVE(AGearVehicle,execGetClampedViewRotation)
	MAP_NATIVE(AGearVehicle,execGetGravityZ)
	MAP_NATIVE(AGearVehicle,execGetCameraNoRenderCylinder)
	MAP_NATIVE(AGearVehicle,execIsSeatControllerReplicationViewer)
	MAP_NATIVE(AGearVehicle,execIsValidEnemyTargetFor)
	MAP_NATIVE(AGearVehicle,execGetBarrelIndex)
	MAP_NATIVE(AGearVehicle,execGetSeatPivotPoint)
	MAP_NATIVE(AGearVehicle,execForceWeaponRotation)
	MAP_NATIVE(AGearVehicle,execSeatFiringMode)
	MAP_NATIVE(AGearVehicle,execSeatFlashCount)
	MAP_NATIVE(AGearVehicle,execSeatFlashLocation)
	MAP_NATIVE(AGearVehicle,execSeatWeaponRotation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGearVehicle);

NATIVE_INFO(AGearWeaponPawn) GGearGameAGearWeaponPawnNatives[] = 
{ 
	MAP_NATIVE(AGearWeaponPawn,execGetTargetLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGearWeaponPawn);

NATIVE_INFO(AVehicle_Centaur_Base) GGearGameAVehicle_Centaur_BaseNatives[] = 
{ 
	MAP_NATIVE(AVehicle_Centaur_Base,execShouldClamp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AVehicle_Centaur_Base);

NATIVE_INFO(AVehicle_Crane_Base) GGearGameAVehicle_Crane_BaseNatives[] = 
{ 
	MAP_NATIVE(AVehicle_Crane_Base,execGetRaiseLimits)
	MAP_NATIVE(AVehicle_Crane_Base,execFindCraneCameraMatinee)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AVehicle_Crane_Base);

NATIVE_INFO(AVehicle_Jack_Base) GGearGameAVehicle_Jack_BaseNatives[] = 
{ 
	MAP_NATIVE(AVehicle_Jack_Base,execIsTooCloseToPlayerCamera)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AVehicle_Jack_Base);

NATIVE_INFO(AVehicle_Reaver_Base) GGearGameAVehicle_Reaver_BaseNatives[] = 
{ 
	MAP_NATIVE(AVehicle_Reaver_Base,execFindNearestPathAndTime)
	MAP_NATIVE(AVehicle_Reaver_Base,execMoveFootToPos)
	MAP_NATIVE(AVehicle_Reaver_Base,execTakeStep)
	MAP_NATIVE(AVehicle_Reaver_Base,execCalcDefaultLegPositions)
	MAP_NATIVE(AVehicle_Reaver_Base,execInitLegs)
	MAP_NATIVE(AVehicle_Reaver_Base,execCanLand)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AVehicle_Reaver_Base);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,CinematicCentaur_Base,AimAtActor)
VERIFY_CLASS_OFFSET_NODIE(A,CinematicCentaur_Base,DieCount)
VERIFY_CLASS_SIZE_NODIE(ACinematicCentaur_Base)
VERIFY_CLASS_OFFSET_NODIE(A,GearVehicle,DeflectionReverseThresh)
VERIFY_CLASS_OFFSET_NODIE(A,GearVehicle,MuzzleLightInfo)
VERIFY_CLASS_SIZE_NODIE(AGearVehicle)
VERIFY_CLASS_SIZE_NODIE(AGearVehicleBase)
VERIFY_CLASS_OFFSET_NODIE(U,GearVehicleSimCar,TorqueVSpeedCurve)
VERIFY_CLASS_OFFSET_NODIE(U,GearVehicleSimCar,TotalTorque)
VERIFY_CLASS_SIZE_NODIE(UGearVehicleSimCar)
VERIFY_CLASS_OFFSET_NODIE(U,GearVehicleSimChopper,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,GearVehicleSimChopper,HardLimitAirSpeedScale)
VERIFY_CLASS_SIZE_NODIE(UGearVehicleSimChopper)
VERIFY_CLASS_SIZE_NODIE(UGearVehicleSimHover)
VERIFY_CLASS_OFFSET_NODIE(A,GearWeaponPawn,MyVehicleWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,GearWeaponPawn,MySeatIndex)
VERIFY_CLASS_SIZE_NODIE(AGearWeaponPawn)
VERIFY_CLASS_OFFSET_NODIE(A,Hydra_Base,Mesh)
VERIFY_CLASS_OFFSET_NODIE(A,Hydra_Base,HydraGravZScale)
VERIFY_CLASS_SIZE_NODIE(AHydra_Base)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Centaur_Base,DefaultCentaurHealth)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Centaur_Base,TimeBelowTooltipVel)
VERIFY_CLASS_SIZE_NODIE(AVehicle_Centaur_Base)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Crane_Base,MaxYawAngVel)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Crane_Base,CraneEngineStopLoop)
VERIFY_CLASS_SIZE_NODIE(AVehicle_Crane_Base)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Jack_Base,MantleAdjustHeight)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Jack_Base,SkelCtrl_MonitorOrient)
VERIFY_CLASS_SIZE_NODIE(AVehicle_Jack_Base)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Reaver_Base,DefaultReaverHealth)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_Reaver_Base,__DecalTimeVaryingParams__Delegate)
VERIFY_CLASS_SIZE_NODIE(AVehicle_Reaver_Base)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_RideReaver_Base,DriverComp)
VERIFY_CLASS_OFFSET_NODIE(A,Vehicle_RideReaver_Base,FlyingSoundLoop_Player)
VERIFY_CLASS_SIZE_NODIE(AVehicle_RideReaver_Base)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
