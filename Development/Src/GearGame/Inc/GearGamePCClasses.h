/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_PC_ENUMS
#define INCLUDED_GEARGAME_PC_ENUMS 1

enum EGearEventDelegateType
{
    eGED_CoverAcquired      =0,
    eGED_CoverLeave         =1,
    eGED_Mantle             =2,
    eGED_Evade              =3,
    eGED_CoverSlip          =4,
    eGED_SwatTurn           =5,
    eGED_GrenadeToss        =6,
    eGED_KickDoor           =7,
    eGED_Pickup             =8,
    eGED_Revive             =9,
    eGED_Chainsaw           =10,
    eGED_ClimbDownLadder    =11,
    eGED_RoadieRun          =12,
    eGED_Reload             =13,
    eGED_Executions         =14,
    eGED_MeatShield         =15,
    eGED_Crawling           =16,
    eGED_Shield             =17,
    eGED_Turret             =18,
    eGED_NumTypes           =19,
    eGED_MAX                =20,
};
enum GearPostProcessFXType
{
    eGPP_None               =0,
    eGPP_Pause              =1,
    eGPP_BleedOut           =2,
    eGPP_Gameover           =3,
    eGPP_MAX                =4,
};
enum GearIconTextureType
{
    eGEARICON_A             =0,
    eGEARICON_A_PRESSED     =1,
    eGEARICON_B             =2,
    eGEARICON_B_PRESSED     =3,
    eGEARICON_X             =4,
    eGEARICON_Y             =5,
    eGEARICON_Chainsaw      =6,
    eGEARICON_Chainsaw_PRESSED=7,
    eGEARICON_MAX           =8,
};
enum eScreenshotMatchType
{
    SMT_Private             =0,
    SMT_Public              =1,
    SMT_MAX                 =2,
};

#endif // !INCLUDED_GEARGAME_PC_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AllowEvadeOffLedge)
AUTOGENERATE_NAME(CheckForInteractionEvents)
AUTOGENERATE_NAME(ClientCloseScene)
AUTOGENERATE_NAME(ClientFlushGUDSVarietyBanks)
AUTOGENERATE_NAME(ClientGameOver)
AUTOGENERATE_NAME(ClientKeepPlayingLoadingMovie)
AUTOGENERATE_NAME(ClientLoadCheckpoint)
AUTOGENERATE_NAME(ClientLoadGUDBank)
AUTOGENERATE_NAME(ClientOpenScene)
AUTOGENERATE_NAME(ClientPlayMovie)
AUTOGENERATE_NAME(ClientSetConversationMode)
AUTOGENERATE_NAME(ClientSetLocationAndBase)
AUTOGENERATE_NAME(ClientShowLoadingMovie)
AUTOGENERATE_NAME(ClientStopMovie)
AUTOGENERATE_NAME(ClientUnloadGUDBank)
AUTOGENERATE_NAME(ClientVerifyState)
AUTOGENERATE_NAME(DoSpecialMove)
AUTOGENERATE_NAME(FindAvailableTeleportSpot)
AUTOGENERATE_NAME(GetCurrentDifficultyLevel)
AUTOGENERATE_NAME(HasFoundDiscoverable)
AUTOGENERATE_NAME(IsActuallyPlayingCoop)
AUTOGENERATE_NAME(NoticeEnemy)
AUTOGENERATE_NAME(OnGearEvent)
AUTOGENERATE_NAME(OnGearWeaponEquip)
AUTOGENERATE_NAME(ScreenshotCompressed)
AUTOGENERATE_NAME(ServerDictateSpecialMove)
AUTOGENERATE_NAME(ServerNotifyClientLoadedCheckpoint)
AUTOGENERATE_NAME(ServerSetAlternateControls)
AUTOGENERATE_NAME(ServerVerifyState)
AUTOGENERATE_NAME(ShowCinematic)
AUTOGENERATE_NAME(TookScreenshot)
AUTOGENERATE_NAME(WarmupPause)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_PC_CLASSES
#define INCLUDED_GEARGAME_PC_CLASSES 1

struct FStoredKismetVariable
{
    FName VariableName;
    FStringNoInit StringValue;
    FLOAT FloatValue;
    class UObject* ObjectValue;
    INT IntValue;
    BITFIELD BoolValue:1;

    /** Constructors */
    FStoredKismetVariable() {}
    FStoredKismetVariable(EEventParm)
    {
        appMemzero(this, sizeof(FStoredKismetVariable));
    }
};

struct FObjectiveInfo
{
    FName ObjectiveName;
    FStringNoInit ObjectiveDesc;
    BITFIELD bUpdated:1;
    BITFIELD bCompleted:1;
    BITFIELD bFailed:1;
    FLOAT UpdatedTime;
    BITFIELD bNotifyPlayer:1;

    /** Constructors */
    FObjectiveInfo() {}
    FObjectiveInfo(EEventParm)
    {
        appMemzero(this, sizeof(FObjectiveInfo));
    }
};

struct FCheckpointMusicRecord : public FMusicTrackStruct
{
    FStringNoInit TheSoundCuePath;

    /** Constructors */
    FCheckpointMusicRecord() {}
    FCheckpointMusicRecord(EEventParm)
    {
        appMemzero(this, sizeof(FCheckpointMusicRecord));
    }
};

struct FPostProcessInfo
{
    BYTE Preset;
    FLOAT Shadows;
    FLOAT MidTones;
    FLOAT HighLights;
    FLOAT Desaturation;

    /** Constructors */
    FPostProcessInfo() {}
    FPostProcessInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPostProcessInfo));
    }
};

struct FScaleDamageInfo
{
    FLOAT HealthLimitPct;
    FLOAT Scale;

    /** Constructors */
    FScaleDamageInfo() {}
    FScaleDamageInfo(EEventParm)
    {
        appMemzero(this, sizeof(FScaleDamageInfo));
    }
};

struct FDoorTriggerData
{
    BITFIELD bInsideDoorTrigger:1;
    class ATrigger_DoorInteraction* DoorTrigger;
    BYTE eSpecialMoveType;

    /** Constructors */
    FDoorTriggerData() {}
    FDoorTriggerData(EEventParm)
    {
        appMemzero(this, sizeof(FDoorTriggerData));
    }
};

struct FLocalEnemy
{
    class AGearPawn* Enemy;
    BITFIELD bVisible:1;
    BITFIELD bSeen:1;
    BITFIELD bHasLOS:1;

    /** Constructors */
    FLocalEnemy() {}
    FLocalEnemy(EEventParm)
    {
        appMemzero(this, sizeof(FLocalEnemy));
    }
};

struct FCameraBoneAnimation
{
    FName AnimName;
    FVector CollisionTestVector;

    /** Constructors */
    FCameraBoneAnimation() {}
    FCameraBoneAnimation(EEventParm)
    {
        appMemzero(this, sizeof(FCameraBoneAnimation));
    }
};

struct FBurstDamageModConfig
{
    FLOAT HealthPercentForLifeSave;
    FLOAT HealthPercentWipedPerSecond;
    FLOAT InvincibilityLengthInSecs;
    FLOAT InvincibilityRangeInUnits;

    /** Constructors */
    FBurstDamageModConfig() {}
    FBurstDamageModConfig(EEventParm)
    {
        appMemzero(this, sizeof(FBurstDamageModConfig));
    }
};

struct FGearEventData
{
    TArrayNoInit<FScriptDelegate> GearEventDelegates;

    /** Constructors */
    FGearEventData() {}
    FGearEventData(EEventParm)
    {
        appMemzero(this, sizeof(FGearEventData));
    }
};

struct FGUDSReferenceHolder
{
    FName PackageName;
    class UGUDBank* Bank;
    class UFaceFXAnimSet* FaceFXData;

    /** Constructors */
    FGUDSReferenceHolder() {}
    FGUDSReferenceHolder(EEventParm)
    {
        appMemzero(this, sizeof(FGUDSReferenceHolder));
    }
};

#define UCONST_Player_NearMissDistance 200
#define UCONST_Player_BulletWhipDistance 500

struct GearPC_eventClientFlushGUDSVarietyBanks_Parms
{
    GearPC_eventClientFlushGUDSVarietyBanks_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientUnloadGUDBank_Parms
{
    FName BankName;
    GearPC_eventClientUnloadGUDBank_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientLoadGUDBank_Parms
{
    FName BankName;
    GearPC_eventClientLoadGUDBank_Parms(EEventParm)
    {
    }
};
struct GearPC_eventTookScreenshot_Parms
{
    class UCanvas* Canvas;
    GearPC_eventTookScreenshot_Parms(EEventParm)
    {
    }
};
struct GearPC_eventScreenshotCompressed_Parms
{
    TArray<BYTE> CompressedShot;
    TArray<BYTE> Thumbnail;
    GearPC_eventScreenshotCompressed_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientCloseScene_Parms
{
    class UUIScene* SceneInstance;
    GearPC_eventClientCloseScene_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientOpenScene_Parms
{
    class UUIScene* SceneReference;
    BYTE OverrideEmulateButtonPress;
    class UUIScene* ReturnValue;
    GearPC_eventClientOpenScene_Parms(EEventParm)
    {
    }
};
struct GearPC_eventOnGearWeaponEquip_Parms
{
    class UClass* WeaponClass;
    GearPC_eventOnGearWeaponEquip_Parms(EEventParm)
    {
    }
};
struct GearPC_eventOnGearEvent_Parms
{
    GearPC_eventOnGearEvent_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientSetConversationMode_Parms
{
    UBOOL bEnabled;
    UBOOL bAbortable;
    GearPC_eventClientSetConversationMode_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientLoadCheckpoint_Parms
{
    FVector CheckpointLocation;
    GearPC_eventClientLoadCheckpoint_Parms(EEventParm)
    {
    }
};
struct GearPC_eventServerNotifyClientLoadedCheckpoint_Parms
{
    GearPC_eventServerNotifyClientLoadedCheckpoint_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientShowLoadingMovie_Parms
{
    UBOOL bShowMovie;
    UBOOL bPauseAfterHide;
    FLOAT PauseDuration;
    FLOAT KeepPlayingDuration;
    UBOOL OverridePreviousDelays;
    GearPC_eventClientShowLoadingMovie_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientKeepPlayingLoadingMovie_Parms
{
    GearPC_eventClientKeepPlayingLoadingMovie_Parms(EEventParm)
    {
    }
};
struct GearPC_eventSetSquadName_Parms
{
    FName NewSquadName;
    GearPC_eventSetSquadName_Parms(EEventParm)
    {
    }
};
struct GearPC_eventServerSetAlternateControls_Parms
{
    UBOOL bNewUseAlternateControls;
    GearPC_eventServerSetAlternateControls_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientStopMovie_Parms
{
    FLOAT DelayInSeconds;
    UBOOL bAllowMovieToFinish;
    UBOOL bForceStopNonSkippable;
    UBOOL bForceStopLoadingMovie;
    GearPC_eventClientStopMovie_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientPlayMovie_Parms
{
    FString MovieName;
    GearPC_eventClientPlayMovie_Parms(EEventParm)
    {
    }
};
struct GearPC_eventShowCinematic_Parms
{
    GearPC_eventShowCinematic_Parms(EEventParm)
    {
    }
};
struct GearPC_eventFindAvailableTeleportSpot_Parms
{
    class APawn* TestPawn;
    class ANavigationPoint* TeleportAnchor;
    UBOOL bSkipRadiusSearch;
    UBOOL ReturnValue;
    GearPC_eventFindAvailableTeleportSpot_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientSetLocationAndBase_Parms
{
    FVector NewLocation;
    class AActor* NewBase;
    GearPC_eventClientSetLocationAndBase_Parms(EEventParm)
    {
    }
};
struct GearPC_eventGetCurrentDifficultyLevel_Parms
{
    BYTE ReturnValue;
    GearPC_eventGetCurrentDifficultyLevel_Parms(EEventParm)
    {
    }
};
struct GearPC_eventHasFoundDiscoverable_Parms
{
    BYTE DiscType;
    UBOOL ReturnValue;
    GearPC_eventHasFoundDiscoverable_Parms(EEventParm)
    {
    }
};
struct GearPC_eventServerDictateSpecialMove_Parms
{
    BYTE NewMove;
    class AGearPawn* InInteractionPawn;
    INT InSpecialMoveFlags;
    GearPC_eventServerDictateSpecialMove_Parms(EEventParm)
    {
    }
};
struct GearPC_eventDoSpecialMove_Parms
{
    BYTE NewMove;
    UBOOL bForceMove;
    class AGearPawn* InInteractionPawn;
    INT InSpecialMoveFlags;
    GearPC_eventDoSpecialMove_Parms(EEventParm)
    {
    }
};
struct GearPC_eventAllowEvadeOffLedge_Parms
{
    UBOOL ReturnValue;
    GearPC_eventAllowEvadeOffLedge_Parms(EEventParm)
    {
    }
};
struct GearPC_eventCheckForInteractionEvents_Parms
{
    GearPC_eventCheckForInteractionEvents_Parms(EEventParm)
    {
    }
};
struct GearPC_eventNoticeEnemy_Parms
{
    class APawn* Noticer;
    class APawn* Noticee;
    GearPC_eventNoticeEnemy_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientVerifyState_Parms
{
    FName ServerState;
    GearPC_eventClientVerifyState_Parms(EEventParm)
    {
    }
};
struct GearPC_eventServerVerifyState_Parms
{
    FName ClientState;
    GearPC_eventServerVerifyState_Parms(EEventParm)
    {
    }
};
struct GearPC_eventClientGameOver_Parms
{
    GearPC_eventClientGameOver_Parms(EEventParm)
    {
    }
};
struct GearPC_eventIsActuallyPlayingCoop_Parms
{
    UBOOL ReturnValue;
    GearPC_eventIsActuallyPlayingCoop_Parms(EEventParm)
    {
    }
};
struct GearPC_eventWarmupPause_Parms
{
    UBOOL bDesiredPauseState;
    GearPC_eventWarmupPause_Parms(EEventParm)
    {
    }
};
class AGearPC : public AGamePlayerController
{
public:
    //## BEGIN PROPS GearPC
    class UTexture2DDynamic* LastCapturedShot;
    BITFIELD bRequestingShot:1;
    BITFIELD bCompressingShot:1;
    BITFIELD bSavingShot:1;
    BITFIELD bHasCentaurOverlay:1;
    BITFIELD bCameraLookAtIsFromKismet:1;
    BITFIELD bShowFeedbackFXInGodMode:1;
    BITFIELD bDebugAI:1;
    BITFIELD bInvisible:1;
    BITFIELD bShowDebugMP:1;
    BITFIELD bShowSpecialMoveTips:1;
    BITFIELD bIsTargeting:1;
    BITFIELD bDisableDoubleClickMovement:1;
    BITFIELD bMouseWheelZoom:1;
    BITFIELD bRun2CoverAnyDirection:1;
    BITFIELD bBreakFromCover:1;
    BITFIELD bPressAToBreakFromCover:1;
    BITFIELD bDebugCover:1;
    BITFIELD bDebugAnimation:1;
    BITFIELD bAssessMode:1;
    BITFIELD bCameraGodMode:1;
    BITFIELD bLookingAtPointOfInterest:1;
    BITFIELD bPreferLeanOverPopup:1;
    BITFIELD bUseAlternateControls:1;
    BITFIELD bCinemaDisableInputButtons:1;
    BITFIELD bPlayerSpectatingOtherPlayer:1;
    BITFIELD bServerMoveCoverActive:1;
    BITFIELD bDedicatedServerSpectator:1;
    BITFIELD bRequestClientVerifyState:1;
    BITFIELD bRequestServerVerifyState:1;
    BITFIELD bCheckVehicles:1;
    BITFIELD bInMatinee:1;
    BITFIELD bWasKicked:1;
    BITFIELD bHasInitedCogTags:1;
    BITFIELD bIsWarmupPaused:1;
    BITFIELD bIsRespawnInvincible:1;
    BITFIELD bWaitingToRespawn:1;
    BITFIELD bTutorialSystemWasOn:1;
    BITFIELD bWeaponsLoaded:1;
    BITFIELD bHavingAnAbortableConversation:1;
    BITFIELD bPendingConversationAbort:1;
    BITFIELD bIsMountedWithMinigun:1;
    BITFIELD bProfileSettingsUpdated:1;
    BITFIELD bHasLostContactWithServer:1;
    BITFIELD bDebugFaceCam:1;
    BITFIELD bDebugGUDBrowser:1;
    BITFIELD bDebugEffortBrowser:1;
    BITFIELD bCheckpointDummy:1;
    BITFIELD bDisableCameraTargetingDOF:1;
    BITFIELD bIsReturningFromMatch:1;
    BITFIELD bClientLoadingCheckpoint:1;
    struct FScreenshotInfo LastShotInfo;
    void* CompressScreenshotTask;
    class UGearScreenshotManager* ScreenshotManager;
    TArrayNoInit<struct FSavedScreenshotInfo> EnumeratedScreenshots;
    TArrayNoInit<struct FStoredKismetVariable> StoredKismetVariables;
    class AGearPawn* MyGearPawn;
    class AGearSquad* Squad;
    TArrayNoInit<FCanvasIcon> GearIcons;
    class ACoverSlotMarker* ServerDictatedCover;
    TArrayNoInit<struct FPostProcessInfo> PostProcessPresets;
    class AActor* CameraLookAtFocusActor;
    TArrayNoInit<FName> DebugAICategories;
    FLOAT DeadZoneThreshold;
    FLOAT BreakFromCoverHoldTime;
    FLOAT BreakFromCoverHoldTimer;
    FLOAT RemappedJoyRight;
    FLOAT RemappedJoyUp;
    FRotator ControlsRemapRotation;
    FLOAT EvadeRetriggerDelay;
    FLOAT DebugTextMaxLen;
    FLOAT CoverTransitionTime;
    FLOAT CoverTransitionCountHold;
    FLOAT CoverTransitionCountDown;
    TArrayNoInit<class USeqEvt_EnteredCover*> EnteredCoverEvents;
    TArrayNoInit<class USeqEvt_LeftCover*> LeftCoverEvents;
    class AActor* LastFrictionTarget;
    FLOAT LastFrictionTargetTime;
    FLOAT VehicleGasPressedAmount;
    FLOAT VehicleReversePressedAmount;
    class UClass* DefaultPawnClass;
    FLOAT RoadieRunTimer;
    BYTE CurrentDoubleClickDir;
    BYTE RefusedOrderCount;
    BYTE CurrentPPType;
    BYTE DiscoverType;
    FLOAT LastCycleWeaponTime;
    TArrayNoInit<struct FScaleDamageInfo> ScaleDamageList;
    FLOAT MinMeleeAdhesionDotValue;
    class AGearPawn* ForcedAdhesionTarget;
    class USoundCue* PointOfInterestAdded;
    FLOAT LastPoITime;
    FLOAT PoIRepeatTime;
    FLOAT TimeBeforeAButtonPressLeavesCover;
    class AGearPawn* CurrentTooltipTargetGearPawn;
    TArrayNoInit<class UPlayerInput*> PlayerInputStack;
    class UGearPlayerInput* MainPlayerInput;
    TArrayNoInit<class USeqEvt_Input*> InputEvents;
    INT InputIsDisabledCount;
    FLOAT LastCheckIsInCombatTime;
    TArrayNoInit<class AGearPointOfInterest*> EnabledPointsOfInterest;
    TArrayNoInit<UBOOL> POILookedAtList;
    class AGearPointOfInterest* CurrLookedAtPOI;
    FVector2D PointOfInterestLookatInterpSpeedRange;
    class AGearSpectatorPoint* CurrSpectatorPoint;
    FStringNoInit CurrSpectatingString;
    class AGearPRI* SpectatingPRI;
    INT GhostSpectatingPitch;
    struct FScreenShakeStruct ARSuperSuccessScreenShake;
    struct FDoorTriggerData DoorTriggerDatum;
    TArrayNoInit<struct FLocalEnemy> LocalEnemies;
    class AActor* UnfriendlyActorList[16];
    INT NextLocalEnemyToCheckLOS;
    FLOAT DeathCameraEnemyMaxDistance;
    class AGearPawn* BiggestThreatWP;
    struct FActionInfo ActionLookAt;
    struct FActionInfo ActionValveTurn;
    struct FActionInfo ActionLookAtDownedTeammate;
    struct FActionInfo ActionStayingAlive;
    struct FActionInfo ActionSuicideBomb;
    struct FActionInfo ActionKismetButton;
    class UGearProfileSettings* ProfileSettings;
    class APawn* LastPawn;
    FLOAT SceneYOffsetForSplitscreen;
    struct FPostProcessSettings GameoverPPSettings;
    struct FPostProcessSettings PausePPSettings;
    INT MapListIndex;
    struct FBurstDamageModConfig BurstDamageModConfigData;
    FName CurrentSoundMode;
    class AGearHUD_Base* MyGearHud;
    class USeqEvt_Interaction* InteractEvent;
    TArrayNoInit<class AGearPawn*> DBNOTeammates;
    INT NumExplosiveKills;
    FLOAT ExplosiveKillTimeStamp;
    FRotator ExtraRot;
    class AActor* SearchGoalActor;
    FLOAT RotationSensitivityLow;
    FLOAT RotationSensitivityMedium;
    FLOAT RotationSensitivityHigh;
    FLOAT TargettingRotationSensitivityLow;
    FLOAT TargettingRotationSensitivityMedium;
    FLOAT TargettingRotationSensitivityHigh;
    FLOAT ZoomRotationSensitivityLow;
    FLOAT ZoomRotationSensitivityMedium;
    FLOAT ZoomRotationSensitivityHigh;
    FRotator RelativeToVehicleViewRot;
    FRotator LastVehicleSpaceViewRotation;
    INT VoiceChannel;
    class UAudioComponent* GameoverLoop;
    class USoundCue* OpenGameoverCue;
    class USoundCue* LoadCheckpointCue;
    FLOAT TargetHeavyWeaponBaseRotationYaw;
    FLOAT DistanceForEnemyTrace;
    class UGearUIDataStore_StringAliasBindingsMap* BoundEventsStringDataStore;
    class UGearUIDataStore_StringAliasMap* StringDataStore;
    class UGearObjectiveManager* ObjectiveMgr;
    class UGearAlertManager* AlertManager;
    class UGearTutorialManager* TutorialMgr;
    TArrayNoInit<struct FGearEventData> GearEventList;
    TArrayNoInit<FScriptDelegate> GearWeaponEquipDelegates;
    class USoundCue* SuddenDeathSound;
    FStringNoInit SuddenDeathString;
    FStringNoInit RevivedString;
    FLOAT LastHornPlayedTime;
    class AEmit_Rain* WeatherEmitter;
    struct FUniqueNetId HostId;
    FGuid MyGuid;
    FLOAT LastCoverActionSpecialMoveUpdateTime;
    FLOAT LastGlobalActionSpecialMoveUpdateTime;
    INT LastCoverActionSpecialMoveUpdateIdx;
    INT LastGlobalActionSpecialMoveUpdateIdx;
    TArrayNoInit<UBOOL> CachedCanDoCoverActionSpecialMoves;
    TArrayNoInit<UBOOL> CachedCanDoGlobalActionSpecialMoves;
    TArrayNoInit<struct FGUDSReferenceHolder> ClientGUDSReferences;
    FLOAT LastCheckpointSaveTime;
    class USeqAct_SpectatorCameraPath* BattleCamPath;
    INT Automation_NumMemoryEvents;
    FScriptDelegate __OnGearEvent__Delegate;
    FScriptDelegate __OnGearWeaponEquip__Delegate;
    //## END PROPS GearPC

    virtual void MS_GetPlayerLoc(INT MessageGUID);
    virtual void MS_GetPlayerRotation(INT MessageGUID);
    virtual void MS_GetCameraRotation(INT MessageGUID);
    virtual void MS_DumpProfile();
    virtual void MS_GetProfileSettingName(INT ProfileSettingId);
    virtual void MS_GetProfileSettingValueList(INT ProfileSettingId);
    virtual void MS_GetProfileSettingValueName(INT ProfileSettingId);
    virtual void MS_SetProfileSettingValueId(INT ProfileSettingId,INT Value);
    virtual void MS_SetProfileSettingValueByName(INT ProfileSettingId,const FString& NewValue);
    void PreCacheAnimations();
    BYTE GetCoverDirection();
    void MaintainEnemyList();
    class AActor* GetFrictionAdhesionTarget(FLOAT MaxDistance,UBOOL bAdhesion=FALSE);
    void UpdateCanDoSpecialMoveCache(UBOOL bInCover);
    UBOOL CheckForSpecialMove();
    UBOOL CanDoSpecialMove(BYTE AMove,UBOOL bForceCheck=FALSE);
    virtual void ZoomToMap(const FString& MapName);
    virtual FString GetCurrMapName();
    virtual FString GetCurrGameType();
    virtual void Shot_360();
    void ClientPlayMovie(const FString& MovieName);
    void ClientStopMovie(FLOAT DelayInSeconds,UBOOL bAllowMovieToFinish,UBOOL bForceStopNonSkippable,UBOOL bForceStopLoadingMovie);
    void GetCurrentMovie(FString& MovieName);
    virtual void SetGamma(FLOAT GammaValue);
    virtual void SetPostProcessValues(BYTE Preset);
    virtual INT GetUIPlayerIndex();
    void SetAlternateControls(UBOOL bNewUseAlternateControls);
    virtual INT ChooseCameraBoneAnim(const TArray<struct FCameraBoneAnimation>& Anims);
    INT ChooseRandomCameraAnim(const TArray<class UCameraAnim*>& Anims,FLOAT Scale=1.000000,UBOOL bDoNotRandomize=FALSE);
    UBOOL CameraAnimHasEnoughSpace(class UCameraAnim* Anim,FLOAT Scale=1.000000);
    virtual void ConeHurt(class AGearPawn* TargetPawn,FVector CamLoc,FVector HitNormal,FLOAT AimError);
    virtual UBOOL ShouldIgnoreNetworkErrors();
    void ShowLoadingMovie(UBOOL bShowMovie,UBOOL bPauseAfterHide=FALSE,FLOAT PauseDuration=0,FLOAT KeepPlayingDuration=0);
    void KeepPlayingLoadingMovie();
    void CopyCheckpointMusicInfo(const struct FCheckpointMusicRecord& SourceInfo,struct FMusicTrackStruct& DestInfo);
    virtual void CauseHitch(FLOAT Sec);
    virtual void GetRealtime(INT& OutInt1,INT& OutInt2);
    virtual UBOOL CompressLastScreenshot();
    UBOOL IsScreenshotPlatform();
    virtual void ClientLoadGUDBank(FName BankName);
    virtual void ClientUnloadGUDBank(FName BankName);
    virtual void Sentinel_PressStartKeyAtStartMenu();
    virtual void Sentinel_DoBugitWithLang();
    DECLARE_FUNCTION(execMS_GetPlayerLoc)
    {
        P_GET_INT(MessageGUID);
        P_FINISH;
        MS_GetPlayerLoc(MessageGUID);
    }
    DECLARE_FUNCTION(execMS_GetPlayerRotation)
    {
        P_GET_INT(MessageGUID);
        P_FINISH;
        MS_GetPlayerRotation(MessageGUID);
    }
    DECLARE_FUNCTION(execMS_GetCameraRotation)
    {
        P_GET_INT(MessageGUID);
        P_FINISH;
        MS_GetCameraRotation(MessageGUID);
    }
    DECLARE_FUNCTION(execMS_DumpProfile)
    {
        P_FINISH;
        MS_DumpProfile();
    }
    DECLARE_FUNCTION(execMS_GetProfileSettingName)
    {
        P_GET_INT(ProfileSettingId);
        P_FINISH;
        MS_GetProfileSettingName(ProfileSettingId);
    }
    DECLARE_FUNCTION(execMS_GetProfileSettingValueList)
    {
        P_GET_INT(ProfileSettingId);
        P_FINISH;
        MS_GetProfileSettingValueList(ProfileSettingId);
    }
    DECLARE_FUNCTION(execMS_GetProfileSettingValueName)
    {
        P_GET_INT(ProfileSettingId);
        P_FINISH;
        MS_GetProfileSettingValueName(ProfileSettingId);
    }
    DECLARE_FUNCTION(execMS_SetProfileSettingValueId)
    {
        P_GET_INT(ProfileSettingId);
        P_GET_INT(Value);
        P_FINISH;
        MS_SetProfileSettingValueId(ProfileSettingId,Value);
    }
    DECLARE_FUNCTION(execMS_SetProfileSettingValueByName)
    {
        P_GET_INT(ProfileSettingId);
        P_GET_STR_REF(NewValue);
        P_FINISH;
        MS_SetProfileSettingValueByName(ProfileSettingId,NewValue);
    }
    DECLARE_FUNCTION(execPreCacheAnimations)
    {
        P_FINISH;
        PreCacheAnimations();
    }
    DECLARE_FUNCTION(execGetCoverDirection)
    {
        P_FINISH;
        *(BYTE*)Result=GetCoverDirection();
    }
    DECLARE_FUNCTION(execMaintainEnemyList)
    {
        P_FINISH;
        MaintainEnemyList();
    }
    DECLARE_FUNCTION(execGetFrictionAdhesionTarget)
    {
        P_GET_FLOAT(MaxDistance);
        P_GET_UBOOL_OPTX(bAdhesion,FALSE);
        P_FINISH;
        *(class AActor**)Result=GetFrictionAdhesionTarget(MaxDistance,bAdhesion);
    }
    DECLARE_FUNCTION(execUpdateCanDoSpecialMoveCache)
    {
        P_GET_UBOOL(bInCover);
        P_FINISH;
        UpdateCanDoSpecialMoveCache(bInCover);
    }
    DECLARE_FUNCTION(execCheckForSpecialMove)
    {
        P_FINISH;
        *(UBOOL*)Result=CheckForSpecialMove();
    }
    DECLARE_FUNCTION(execCanDoSpecialMove)
    {
        P_GET_BYTE(AMove);
        P_GET_UBOOL_OPTX(bForceCheck,FALSE);
        P_FINISH;
        *(UBOOL*)Result=CanDoSpecialMove(AMove,bForceCheck);
    }
    DECLARE_FUNCTION(execZoomToMap)
    {
        P_GET_STR(MapName);
        P_FINISH;
        ZoomToMap(MapName);
    }
    DECLARE_FUNCTION(execGetCurrMapName)
    {
        P_FINISH;
        *(FString*)Result=GetCurrMapName();
    }
    DECLARE_FUNCTION(execGetCurrGameType)
    {
        P_FINISH;
        *(FString*)Result=GetCurrGameType();
    }
    DECLARE_FUNCTION(execShot_360)
    {
        P_FINISH;
        Shot_360();
    }
    DECLARE_FUNCTION(execClientPlayMovie)
    {
        P_GET_STR(MovieName);
        P_FINISH;
        ClientPlayMovie(MovieName);
    }
    DECLARE_FUNCTION(execClientStopMovie)
    {
        P_GET_FLOAT(DelayInSeconds);
        P_GET_UBOOL(bAllowMovieToFinish);
        P_GET_UBOOL(bForceStopNonSkippable);
        P_GET_UBOOL(bForceStopLoadingMovie);
        P_FINISH;
        ClientStopMovie(DelayInSeconds,bAllowMovieToFinish,bForceStopNonSkippable,bForceStopLoadingMovie);
    }
    DECLARE_FUNCTION(execGetCurrentMovie)
    {
        P_GET_STR_REF(MovieName);
        P_FINISH;
        GetCurrentMovie(MovieName);
    }
    DECLARE_FUNCTION(execSetGamma)
    {
        P_GET_FLOAT(GammaValue);
        P_FINISH;
        SetGamma(GammaValue);
    }
    DECLARE_FUNCTION(execSetPostProcessValues)
    {
        P_GET_BYTE(Preset);
        P_FINISH;
        SetPostProcessValues(Preset);
    }
    DECLARE_FUNCTION(execGetUIPlayerIndex)
    {
        P_FINISH;
        *(INT*)Result=GetUIPlayerIndex();
    }
    DECLARE_FUNCTION(execSetAlternateControls)
    {
        P_GET_UBOOL(bNewUseAlternateControls);
        P_FINISH;
        SetAlternateControls(bNewUseAlternateControls);
    }
    DECLARE_FUNCTION(execChooseCameraBoneAnim)
    {
        P_GET_TARRAY_REF(struct FCameraBoneAnimation,Anims);
        P_FINISH;
        *(INT*)Result=ChooseCameraBoneAnim(Anims);
    }
    DECLARE_FUNCTION(execChooseRandomCameraAnim)
    {
        P_GET_TARRAY_REF(class UCameraAnim*,Anims);
        P_GET_FLOAT_OPTX(Scale,1.000000);
        P_GET_UBOOL_OPTX(bDoNotRandomize,FALSE);
        P_FINISH;
        *(INT*)Result=ChooseRandomCameraAnim(Anims,Scale,bDoNotRandomize);
    }
    DECLARE_FUNCTION(execCameraAnimHasEnoughSpace)
    {
        P_GET_OBJECT(UCameraAnim,Anim);
        P_GET_FLOAT_OPTX(Scale,1.000000);
        P_FINISH;
        *(UBOOL*)Result=CameraAnimHasEnoughSpace(Anim,Scale);
    }
    DECLARE_FUNCTION(execConeHurt)
    {
        P_GET_OBJECT(AGearPawn,TargetPawn);
        P_GET_STRUCT(FVector,CamLoc);
        P_GET_STRUCT(FVector,HitNormal);
        P_GET_FLOAT(AimError);
        P_FINISH;
        ConeHurt(TargetPawn,CamLoc,HitNormal,AimError);
    }
    DECLARE_FUNCTION(execShouldIgnoreNetworkErrors)
    {
        P_FINISH;
        *(UBOOL*)Result=ShouldIgnoreNetworkErrors();
    }
    DECLARE_FUNCTION(execShowLoadingMovie)
    {
        P_GET_UBOOL(bShowMovie);
        P_GET_UBOOL_OPTX(bPauseAfterHide,FALSE);
        P_GET_FLOAT_OPTX(PauseDuration,0);
        P_GET_FLOAT_OPTX(KeepPlayingDuration,0);
        P_FINISH;
        ShowLoadingMovie(bShowMovie,bPauseAfterHide,PauseDuration,KeepPlayingDuration);
    }
    DECLARE_FUNCTION(execKeepPlayingLoadingMovie)
    {
        P_FINISH;
        KeepPlayingLoadingMovie();
    }
    DECLARE_FUNCTION(execCopyCheckpointMusicInfo)
    {
        P_GET_STRUCT_INIT_REF(struct FCheckpointMusicRecord,SourceInfo);
        P_GET_STRUCT_REF(struct FMusicTrackStruct,DestInfo);
        P_FINISH;
        CopyCheckpointMusicInfo(SourceInfo,DestInfo);
    }
    DECLARE_FUNCTION(execCauseHitch)
    {
        P_GET_FLOAT(Sec);
        P_FINISH;
        CauseHitch(Sec);
    }
    DECLARE_FUNCTION(execGetRealtime)
    {
        P_GET_INT_REF(OutInt1);
        P_GET_INT_REF(OutInt2);
        P_FINISH;
        GetRealtime(OutInt1,OutInt2);
    }
    DECLARE_FUNCTION(execCompressLastScreenshot)
    {
        P_FINISH;
        *(UBOOL*)Result=CompressLastScreenshot();
    }
    DECLARE_FUNCTION(execIsScreenshotPlatform)
    {
        P_FINISH;
        *(UBOOL*)Result=IsScreenshotPlatform();
    }
    DECLARE_FUNCTION(execClientLoadGUDBank)
    {
        P_GET_NAME(BankName);
        P_FINISH;
        ClientLoadGUDBank(BankName);
    }
    DECLARE_FUNCTION(execClientUnloadGUDBank)
    {
        P_GET_NAME(BankName);
        P_FINISH;
        ClientUnloadGUDBank(BankName);
    }
    DECLARE_FUNCTION(execSentinel_PressStartKeyAtStartMenu)
    {
        P_FINISH;
        Sentinel_PressStartKeyAtStartMenu();
    }
    DECLARE_FUNCTION(execSentinel_DoBugitWithLang)
    {
        P_FINISH;
        Sentinel_DoBugitWithLang();
    }
    void eventClientFlushGUDSVarietyBanks()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientFlushGUDSVarietyBanks),NULL);
    }
    void eventClientUnloadGUDBank(FName BankName)
    {
        GearPC_eventClientUnloadGUDBank_Parms Parms(EC_EventParm);
        Parms.BankName=BankName;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientUnloadGUDBank),&Parms);
    }
    void eventClientLoadGUDBank(FName BankName)
    {
        GearPC_eventClientLoadGUDBank_Parms Parms(EC_EventParm);
        Parms.BankName=BankName;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientLoadGUDBank),&Parms);
    }
    void eventTookScreenshot(class UCanvas* Canvas)
    {
        GearPC_eventTookScreenshot_Parms Parms(EC_EventParm);
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(GEARGAME_TookScreenshot),&Parms);
    }
    void eventScreenshotCompressed(const TArray<BYTE>& CompressedShot,const TArray<BYTE>& Thumbnail)
    {
        GearPC_eventScreenshotCompressed_Parms Parms(EC_EventParm);
        Parms.CompressedShot=CompressedShot;
        Parms.Thumbnail=Thumbnail;
        ProcessEvent(FindFunctionChecked(GEARGAME_ScreenshotCompressed),&Parms);
    }
    void eventClientCloseScene(class UUIScene* SceneInstance)
    {
        GearPC_eventClientCloseScene_Parms Parms(EC_EventParm);
        Parms.SceneInstance=SceneInstance;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientCloseScene),&Parms);
    }
    class UUIScene* eventClientOpenScene(class UUIScene* SceneReference,BYTE OverrideEmulateButtonPress=0)
    {
        GearPC_eventClientOpenScene_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.SceneReference=SceneReference;
        Parms.OverrideEmulateButtonPress=OverrideEmulateButtonPress;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientOpenScene),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnGearWeaponEquip(class UClass* WeaponClass)
    {
        GearPC_eventOnGearWeaponEquip_Parms Parms(EC_EventParm);
        Parms.WeaponClass=WeaponClass;
        ProcessDelegate(GEARGAME_OnGearWeaponEquip,&__OnGearWeaponEquip__Delegate,&Parms);
    }
    void delegateOnGearEvent()
    {
        ProcessDelegate(GEARGAME_OnGearEvent,&__OnGearEvent__Delegate,NULL);
    }
    void eventClientSetConversationMode(UBOOL bEnabled,UBOOL bAbortable=FALSE)
    {
        GearPC_eventClientSetConversationMode_Parms Parms(EC_EventParm);
        Parms.bEnabled=bEnabled ? FIRST_BITFIELD : FALSE;
        Parms.bAbortable=bAbortable ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientSetConversationMode),&Parms);
    }
    void eventClientLoadCheckpoint(FVector CheckpointLocation)
    {
        GearPC_eventClientLoadCheckpoint_Parms Parms(EC_EventParm);
        Parms.CheckpointLocation=CheckpointLocation;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientLoadCheckpoint),&Parms);
    }
    void eventServerNotifyClientLoadedCheckpoint()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerNotifyClientLoadedCheckpoint),NULL);
    }
    void eventClientShowLoadingMovie(UBOOL bShowMovie,UBOOL bPauseAfterHide=FALSE,FLOAT PauseDuration=0,FLOAT KeepPlayingDuration=0,UBOOL OverridePreviousDelays=FALSE)
    {
        GearPC_eventClientShowLoadingMovie_Parms Parms(EC_EventParm);
        Parms.bShowMovie=bShowMovie ? FIRST_BITFIELD : FALSE;
        Parms.bPauseAfterHide=bPauseAfterHide ? FIRST_BITFIELD : FALSE;
        Parms.PauseDuration=PauseDuration;
        Parms.KeepPlayingDuration=KeepPlayingDuration;
        Parms.OverridePreviousDelays=OverridePreviousDelays ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientShowLoadingMovie),&Parms);
    }
    void eventClientKeepPlayingLoadingMovie()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientKeepPlayingLoadingMovie),NULL);
    }
    void eventSetSquadName(FName NewSquadName)
    {
        GearPC_eventSetSquadName_Parms Parms(EC_EventParm);
        Parms.NewSquadName=NewSquadName;
        ProcessEvent(FindFunctionChecked(GEARGAME_SetSquadName),&Parms);
    }
    void eventServerSetAlternateControls(UBOOL bNewUseAlternateControls)
    {
        GearPC_eventServerSetAlternateControls_Parms Parms(EC_EventParm);
        Parms.bNewUseAlternateControls=bNewUseAlternateControls ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerSetAlternateControls),&Parms);
    }
    void eventClientStopMovie(FLOAT DelayInSeconds,UBOOL bAllowMovieToFinish,UBOOL bForceStopNonSkippable,UBOOL bForceStopLoadingMovie)
    {
        GearPC_eventClientStopMovie_Parms Parms(EC_EventParm);
        Parms.DelayInSeconds=DelayInSeconds;
        Parms.bAllowMovieToFinish=bAllowMovieToFinish ? FIRST_BITFIELD : FALSE;
        Parms.bForceStopNonSkippable=bForceStopNonSkippable ? FIRST_BITFIELD : FALSE;
        Parms.bForceStopLoadingMovie=bForceStopLoadingMovie ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientStopMovie),&Parms);
    }
    void eventClientPlayMovie(const FString& MovieName)
    {
        GearPC_eventClientPlayMovie_Parms Parms(EC_EventParm);
        Parms.MovieName=MovieName;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientPlayMovie),&Parms);
    }
    void eventShowCinematic()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ShowCinematic),NULL);
    }
    UBOOL eventFindAvailableTeleportSpot(class APawn* TestPawn,class ANavigationPoint* TeleportAnchor=NULL,UBOOL bSkipRadiusSearch=FALSE)
    {
        GearPC_eventFindAvailableTeleportSpot_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.TestPawn=TestPawn;
        Parms.TeleportAnchor=TeleportAnchor;
        Parms.bSkipRadiusSearch=bSkipRadiusSearch ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_FindAvailableTeleportSpot),&Parms);
        return Parms.ReturnValue;
    }
    void eventClientSetLocationAndBase(FVector NewLocation,class AActor* NewBase)
    {
        GearPC_eventClientSetLocationAndBase_Parms Parms(EC_EventParm);
        Parms.NewLocation=NewLocation;
        Parms.NewBase=NewBase;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientSetLocationAndBase),&Parms);
    }
    BYTE eventGetCurrentDifficultyLevel()
    {
        GearPC_eventGetCurrentDifficultyLevel_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetCurrentDifficultyLevel),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventHasFoundDiscoverable(BYTE DiscType)
    {
        GearPC_eventHasFoundDiscoverable_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.DiscType=DiscType;
        ProcessEvent(FindFunctionChecked(GEARGAME_HasFoundDiscoverable),&Parms);
        return Parms.ReturnValue;
    }
    void eventServerDictateSpecialMove(BYTE NewMove,class AGearPawn* InInteractionPawn=NULL,INT InSpecialMoveFlags=0)
    {
        GearPC_eventServerDictateSpecialMove_Parms Parms(EC_EventParm);
        Parms.NewMove=NewMove;
        Parms.InInteractionPawn=InInteractionPawn;
        Parms.InSpecialMoveFlags=InSpecialMoveFlags;
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerDictateSpecialMove),&Parms);
    }
    void eventDoSpecialMove(BYTE NewMove,UBOOL bForceMove=FALSE,class AGearPawn* InInteractionPawn=NULL,INT InSpecialMoveFlags=0)
    {
        GearPC_eventDoSpecialMove_Parms Parms(EC_EventParm);
        Parms.NewMove=NewMove;
        Parms.bForceMove=bForceMove ? FIRST_BITFIELD : FALSE;
        Parms.InInteractionPawn=InInteractionPawn;
        Parms.InSpecialMoveFlags=InSpecialMoveFlags;
        ProcessEvent(FindFunctionChecked(GEARGAME_DoSpecialMove),&Parms);
    }
    UBOOL eventAllowEvadeOffLedge()
    {
        GearPC_eventAllowEvadeOffLedge_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_AllowEvadeOffLedge),&Parms);
        return Parms.ReturnValue;
    }
    void eventCheckForInteractionEvents()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_CheckForInteractionEvents),NULL);
    }
    void eventNoticeEnemy(class APawn* Noticer,class APawn* Noticee)
    {
        GearPC_eventNoticeEnemy_Parms Parms(EC_EventParm);
        Parms.Noticer=Noticer;
        Parms.Noticee=Noticee;
        ProcessEvent(FindFunctionChecked(GEARGAME_NoticeEnemy),&Parms);
    }
    void eventClientVerifyState(FName ServerState)
    {
        GearPC_eventClientVerifyState_Parms Parms(EC_EventParm);
        Parms.ServerState=ServerState;
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientVerifyState),&Parms);
    }
    void eventServerVerifyState(FName ClientState)
    {
        GearPC_eventServerVerifyState_Parms Parms(EC_EventParm);
        Parms.ClientState=ClientState;
        ProcessEvent(FindFunctionChecked(GEARGAME_ServerVerifyState),&Parms);
    }
    void eventClientGameOver()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ClientGameOver),NULL);
    }
    UBOOL eventIsActuallyPlayingCoop()
    {
        GearPC_eventIsActuallyPlayingCoop_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_IsActuallyPlayingCoop),&Parms);
        return Parms.ReturnValue;
    }
    void eventWarmupPause(UBOOL bDesiredPauseState)
    {
        GearPC_eventWarmupPause_Parms Parms(EC_EventParm);
        Parms.bDesiredPauseState=bDesiredPauseState ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_WarmupPause),&Parms);
    }
    DECLARE_CLASS(AGearPC,AGamePlayerController,0|CLASS_Config|CLASS_NativeReplication,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Pawn");}

	virtual void PreBeginPlay();

	virtual FGuid* GetGuid() { return &MyGuid; }

	virtual UBOOL WantsLedgeCheck();

	FLOAT ScoreFrictionTarget(AActor const* Actor, FLOAT MaxDistance, FRotator const& CamRot);

	virtual UBOOL HearSound(USoundCue* InSoundCue, AActor* SoundPlayer, const FVector& SoundLocation, UBOOL bStopWhenOwnerDestroyed);

	virtual UBOOL Tick(FLOAT DeltaSeconds, ELevelTick TickType);

	// Networking
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );

	virtual void physWalking(FLOAT deltaTime, INT Iterations);

	virtual void	ShowSelf(){/*SILENCE!*/} // this is handled by the ai visibility manager
	void UpdateCanDoSpecialMoveCacheList(TArrayNoInit<UBOOL>& CacheList, TArrayNoInit<BYTE>& PawnIndexList, FLOAT& LastUpdateTime, INT& LastUpdatedIndex);

	virtual void PostNetReceive();
};

#endif // !INCLUDED_GEARGAME_PC_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AGearPC,-1,execSentinel_DoBugitWithLang);
AUTOGENERATE_FUNCTION(AGearPC,-1,execSentinel_PressStartKeyAtStartMenu);
AUTOGENERATE_FUNCTION(AGearPC,-1,execClientUnloadGUDBank);
AUTOGENERATE_FUNCTION(AGearPC,-1,execClientLoadGUDBank);
AUTOGENERATE_FUNCTION(AGearPC,-1,execIsScreenshotPlatform);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCompressLastScreenshot);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetRealtime);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCauseHitch);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCopyCheckpointMusicInfo);
AUTOGENERATE_FUNCTION(AGearPC,-1,execKeepPlayingLoadingMovie);
AUTOGENERATE_FUNCTION(AGearPC,-1,execShowLoadingMovie);
AUTOGENERATE_FUNCTION(AGearPC,-1,execShouldIgnoreNetworkErrors);
AUTOGENERATE_FUNCTION(AGearPC,-1,execConeHurt);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCameraAnimHasEnoughSpace);
AUTOGENERATE_FUNCTION(AGearPC,-1,execChooseRandomCameraAnim);
AUTOGENERATE_FUNCTION(AGearPC,-1,execChooseCameraBoneAnim);
AUTOGENERATE_FUNCTION(AGearPC,-1,execSetAlternateControls);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetUIPlayerIndex);
AUTOGENERATE_FUNCTION(AGearPC,-1,execSetPostProcessValues);
AUTOGENERATE_FUNCTION(AGearPC,-1,execSetGamma);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetCurrentMovie);
AUTOGENERATE_FUNCTION(AGearPC,-1,execClientStopMovie);
AUTOGENERATE_FUNCTION(AGearPC,-1,execClientPlayMovie);
AUTOGENERATE_FUNCTION(AGearPC,-1,execShot_360);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetCurrGameType);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetCurrMapName);
AUTOGENERATE_FUNCTION(AGearPC,-1,execZoomToMap);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCanDoSpecialMove);
AUTOGENERATE_FUNCTION(AGearPC,-1,execCheckForSpecialMove);
AUTOGENERATE_FUNCTION(AGearPC,-1,execUpdateCanDoSpecialMoveCache);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetFrictionAdhesionTarget);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMaintainEnemyList);
AUTOGENERATE_FUNCTION(AGearPC,-1,execGetCoverDirection);
AUTOGENERATE_FUNCTION(AGearPC,-1,execPreCacheAnimations);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_SetProfileSettingValueByName);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_SetProfileSettingValueId);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetProfileSettingValueName);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetProfileSettingValueList);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetProfileSettingName);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_DumpProfile);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetCameraRotation);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetPlayerRotation);
AUTOGENERATE_FUNCTION(AGearPC,-1,execMS_GetPlayerLoc);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_PC_NATIVE_DEFS
#define GEARGAME_PC_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,AGearPC);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_PC \
	AGearPC::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGearPCNative; \

#endif // GEARGAME_PC_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AGearPC) GGearGameAGearPCNatives[] = 
{ 
	MAP_NATIVE(AGearPC,execSentinel_DoBugitWithLang)
	MAP_NATIVE(AGearPC,execSentinel_PressStartKeyAtStartMenu)
	MAP_NATIVE(AGearPC,execClientUnloadGUDBank)
	MAP_NATIVE(AGearPC,execClientLoadGUDBank)
	MAP_NATIVE(AGearPC,execIsScreenshotPlatform)
	MAP_NATIVE(AGearPC,execCompressLastScreenshot)
	MAP_NATIVE(AGearPC,execGetRealtime)
	MAP_NATIVE(AGearPC,execCauseHitch)
	MAP_NATIVE(AGearPC,execCopyCheckpointMusicInfo)
	MAP_NATIVE(AGearPC,execKeepPlayingLoadingMovie)
	MAP_NATIVE(AGearPC,execShowLoadingMovie)
	MAP_NATIVE(AGearPC,execShouldIgnoreNetworkErrors)
	MAP_NATIVE(AGearPC,execConeHurt)
	MAP_NATIVE(AGearPC,execCameraAnimHasEnoughSpace)
	MAP_NATIVE(AGearPC,execChooseRandomCameraAnim)
	MAP_NATIVE(AGearPC,execChooseCameraBoneAnim)
	MAP_NATIVE(AGearPC,execSetAlternateControls)
	MAP_NATIVE(AGearPC,execGetUIPlayerIndex)
	MAP_NATIVE(AGearPC,execSetPostProcessValues)
	MAP_NATIVE(AGearPC,execSetGamma)
	MAP_NATIVE(AGearPC,execGetCurrentMovie)
	MAP_NATIVE(AGearPC,execClientStopMovie)
	MAP_NATIVE(AGearPC,execClientPlayMovie)
	MAP_NATIVE(AGearPC,execShot_360)
	MAP_NATIVE(AGearPC,execGetCurrGameType)
	MAP_NATIVE(AGearPC,execGetCurrMapName)
	MAP_NATIVE(AGearPC,execZoomToMap)
	MAP_NATIVE(AGearPC,execCanDoSpecialMove)
	MAP_NATIVE(AGearPC,execCheckForSpecialMove)
	MAP_NATIVE(AGearPC,execUpdateCanDoSpecialMoveCache)
	MAP_NATIVE(AGearPC,execGetFrictionAdhesionTarget)
	MAP_NATIVE(AGearPC,execMaintainEnemyList)
	MAP_NATIVE(AGearPC,execGetCoverDirection)
	MAP_NATIVE(AGearPC,execPreCacheAnimations)
	MAP_NATIVE(AGearPC,execMS_SetProfileSettingValueByName)
	MAP_NATIVE(AGearPC,execMS_SetProfileSettingValueId)
	MAP_NATIVE(AGearPC,execMS_GetProfileSettingValueName)
	MAP_NATIVE(AGearPC,execMS_GetProfileSettingValueList)
	MAP_NATIVE(AGearPC,execMS_GetProfileSettingName)
	MAP_NATIVE(AGearPC,execMS_DumpProfile)
	MAP_NATIVE(AGearPC,execMS_GetCameraRotation)
	MAP_NATIVE(AGearPC,execMS_GetPlayerRotation)
	MAP_NATIVE(AGearPC,execMS_GetPlayerLoc)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGearPC);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,GearPC,LastCapturedShot)
VERIFY_CLASS_OFFSET_NODIE(A,GearPC,__OnGearWeaponEquip__Delegate)
VERIFY_CLASS_SIZE_NODIE(AGearPC)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
