/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_SEQUENCE_ENUMS
#define INCLUDED_GEARGAME_SEQUENCE_ENUMS 1

enum ESpawnPointSelectionMethod
{
    SPSM_Shuffle            =0,
    SPSM_Linear             =1,
    SPSM_MAX                =2,
};
enum EAIAssignment
{
    EA_UniquePerSpawn       =0,
    EA_Shared               =1,
    EA_MAX                  =2,
};
enum EInventoryTypes
{
    WEAP_Lancer             =0,
    WEAP_Gnasher            =1,
    WEAP_Longshot           =2,
    WEAP_Hammerburst        =3,
    WEAP_Boltock            =4,
    WEAP_Boomshot           =5,
    WEAP_Snub               =6,
    WEAP_TorqueBow          =7,
    WEAP_HOD                =8,
    WEAP_Mortar             =9,
    WEAP_Minigun            =10,
    WEAP_FragGrenade        =11,
    WEAP_MAX                =12,
};
enum EAITypes
{
    AIType_Drone            =0,
    AIType_Wretch           =1,
    AIType_Boomer           =2,
    AIType_Berserker        =3,
    AIType_Nemacyst         =4,
    AIType_DarkWretch       =5,
    AIType_Theron           =6,
    AIType_Dom              =7,
    AIType_Baird            =8,
    AIType_Gus              =9,
    AIType_Minh             =10,
    AIType_Redshirt         =11,
    AIType_UNUSED           =12,
    AIType_Skorge           =13,
    AIType_DroneGrenadier   =14,
    AIType_DroneSniper      =15,
    AIType_HunterArmorNoGrenades=16,
    AIType_HunterNoArmorNoGrenades=17,
    AIType_Hoffman          =18,
    AIType_TroikaGunner     =19,
    AIType_TroikaSpotter    =20,
    AIType_Carmine          =21,
    AIType_NPCFranklin      =22,
    AIType_NPCMaleWithHatAndBag=23,
    AIType_NPCMaleOld       =24,
    AIType_NPCGirl          =25,
    AIType_NPCMaleWithDoorag=26,
    AIType_NPCBoy           =27,
    AIType_NPCWomanWithBun  =28,
    AIType_NPCFemaleWithBackpackOfCans=29,
    AIType_NPCMaleWithHeadband=30,
    AIType_ReaverWithDrone  =31,
    AIType_ReaverWithTheron =32,
    AIType_ReaverLowHealth  =33,
    AIType_ReaverBig        =34,
    AIType_NPCCOGMaleWithHatAndBag=35,
    AIType_Kantus           =36,
    AIType_NPCCOGFranklinWithNoDreads=37,
    AIType_NPCCOGDrunkMan   =38,
    AIType_NPCCOGManWithBandana=39,
    AIType_NPCCOGOldMan     =40,
    AIType_Gus_Resonator    =41,
    AIType_FriendlyWretch   =42,
    AIType_Lynx             =43,
    AIType_Brumak           =44,
    AIType_BoomerFlail      =45,
    AIType_BoomerGatling    =46,
    AIType_FlameDrone       =47,
    AIType_PalaceGuard      =48,
    AIType_BoomerFlame      =49,
    AIType_ChiggerBomb      =50,
    AIType_BloodMountWithDrone=51,
    AIType_RockWorm         =52,
    AIType_NemaSlug         =53,
    AIType_Sire             =54,
    AITYpe_SecurityNemacyst =55,
    AIType_FlyingSecurityBot=56,
    AIType_Jack             =57,
    AIType_TaiKaliso        =58,
    AIType_BenjaminCarmine  =59,
    AIType_NilesSamson      =60,
    AIType_RandyBraash      =61,
    AIType_Dizzy            =62,
    AIType_LocustBeastRider =63,
    AIType_LocustSpeedy     =64,
    AIType_UNUSED2          =65,
    AIType_LocustLancerGuard=66,
    AIType_Brumak_Big       =67,
    AIType_LocustGrapplingDrone=68,
    AIType_BloodMountRiderless=69,
    AIType_DroneNoHelmet    =70,
    AIType_BoomerButcher    =71,
    AIType_BoomerMechanic   =72,
    AIType_BloodMountWithPalaceGuard=73,
    AIType_DroneMortar      =74,
    AIType_Brumak_Kadar     =75,
    AIType_ReaverNoGunner   =76,
    AIType_Brumak_ResistSmallArms=77,
    EAITypes_MAX            =78,
};
enum EAIMoveStyle
{
    EMS_Normal              =0,
    EMS_Slow                =1,
    EMS_Fast                =2,
    EMS_MAX                 =3,
};
enum ELayerUpdateResult
{
    LUR_None                =0,
    LUR_StartTracking       =1,
    LUR_StopTracking        =2,
    LUR_Alarm               =3,
    LUR_MAX                 =4,
};
enum ELayerTrackerType
{
    LTT_ByTime              =0,
    LTT_ByObviousBehavior   =1,
    LTT_MAX                 =2,
};
enum EGearLevelAchievements
{
    eGLACHIEVE_None         =0,
    eGLACHIEVE_GreenAsGrass =1,
    eGLACHIEVE_ItsATrap     =2,
    eGLACHIEVE_EscortService=3,
    eGLACHIEVE_GirlAboutTown=4,
    eGLACHIEVE_ThatSinkingFeeling=5,
    eGLACHIEVE_Freebaird    =6,
    eGLACHIEVE_HeartBroken  =7,
    eGLACHIEVE_LongitudeAndAttitude=8,
    eGLACHIEVE_TanksForTheMemories=9,
    eGLACHIEVE_WaterSports  =10,
    eGLACHIEVE_SavedMaria   =11,
    eGLACHIEVE_WrappedInBeacon=12,
    eGLACHIEVE_HaveFunStormingTheCastle=13,
    eGLACHIEVE_AndTheHorseYourRodeInOn=14,
    eGLACHIEVE_TheyJustKeepComing=15,
    eGLACHIEVE_BrumakRodeo  =16,
    eGLACHIEVE_DoesThisLookInfectedToYou=17,
    eGLACHIEVE_DLC1         =18,
    eGLACHIEVE_DLC2         =19,
    eGLACHIEVE_DLC3         =20,
    eGLACHIEVE_DLC4         =21,
    eGLACHIEVE_DLC5         =22,
    eGLACHIEVE_DLC6         =23,
    eGLACHIEVE_DLC7         =24,
    eGLACHIEVE_DLC8         =25,
    eGLACHIEVE_DLC9         =26,
    eGLACHIEVE_DLC10        =27,
    eGLACHIEVE_Seriously    =28,
    eGLACHIEVE_MAX          =29,
};
enum EPlayMode
{
    AnimPM_Rate             =0,
    AnimPM_Duration         =1,
    AnimPM_MAX              =2,
};
enum EGearLevelUnlockable
{
    eGLUNLOCK_Character_Dizzy=0,
    eGLUNLOCK_Character_Kantus=1,
    eGLUNLOCK_Character_Tai =2,
    eGLUNLOCK_Character_PalaceGuard=3,
    eGLUNLOCK_Character_Skorge=4,
    eGLUNLOCK_Character_DLC1=5,
    eGLUNLOCK_Character_DLC2=6,
    eGLUNLOCK_Character_DLC3=7,
    eGLUNLOCK_Character_DLC4=8,
    eGLUNLOCK_Character_DLC5=9,
    eGLUNLOCK_Character_MAX =10,
};
enum DummyFireObjectCyclingMethod
{
    DFOCM_Sequential        =0,
    DFOCM_Random            =1,
    DFOCM_MAX               =2,
};
enum EManagePOIOutputType
{
    eMPOIOUTPUT_Out         =0,
    eMPOIOUTPUT_Expired     =1,
    eMPOIOUTPUT_LookAt      =2,
    eMPOIOUTPUT_LookAway    =3,
    eMPOIOUTPUT_MAX         =4,
};
enum EManagePOIInputType
{
    eMPOIINPUT_On           =0,
    eMPOIINPUT_Off          =1,
    eMPOIINPUT_MAX          =2,
};
enum EManageTutorialOutputs
{
    eMTOUTPUT_Added         =0,
    eMTOUTPUT_Removed       =1,
    eMTOUTPUT_Started       =2,
    eMTOUTPUT_Stopped       =3,
    eMTOUTPUT_Completed     =4,
    eMTOUTPUT_SystemOn      =5,
    eMTOUTPUT_SystemOff     =6,
    eMTOUTPUT_UISceneOpened =7,
    eMTOUTPUT_AlreadyComplete=8,
    eMTOUTPUT_SystemDead    =9,
    eMTOUTPUT_AutosOn       =10,
    eMTOUTPUT_AutosOff      =11,
    eMTOUTPUT_MAX           =12,
};
enum EMutateTypes
{
    MUTATE_TheronMarcus     =0,
    MUTATE_Marcus           =1,
    MUTATE_Dom              =2,
    MUTATE_TheronDom        =3,
    MUTATE_MAX              =4,
};
enum EGearCoverFilterType
{
    GCF_None                =0,
    GCF_IgnoreInCoverHunkeredDown=1,
    GCF_IgnoreAllInCover    =2,
    GCF_MAX                 =3,
};
enum EGearPawnRoadieRunFilter
{
    RRF_None                =0,
    RRF_IgnoreRoadieRunningGearPawns=1,
    RRF_IgnoreNotRoadieRunningGearPawns=2,
    RRF_MAX                 =3,
};
enum InputRegisterType
{
    IRT_AllPlayers          =0,
    IRT_MarcusOnly          =1,
    IRT_DomOnly             =2,
    IRT_COGOnly             =3,
    IRT_LocustOnly          =4,
    IRT_MAX                 =5,
};

#endif // !INCLUDED_GEARGAME_SEQUENCE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AdjustCover)
AUTOGENERATE_NAME(InitializePathChoice)
AUTOGENERATE_NAME(OnCheckStealthLayer)
AUTOGENERATE_NAME(OnUpdateStealthLayer)
AUTOGENERATE_NAME(SetUpdateDelegate)
AUTOGENERATE_NAME(UninitializePathChoice)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_SEQUENCE_CLASSES
#define INCLUDED_GEARGAME_SEQUENCE_CLASSES 1

struct FCrossLevelReachSpec
{
    struct FActorReference Start;
    struct FActorReference End;
    class UClass* SpecClass;
    class UReachSpec* Spec;
    INT Height;
    INT Radius;

		explicit FCrossLevelReachSpec( UReachSpec* InSpec )
		{
			Start.Actor = InSpec->Start;
			Start.Guid  = *InSpec->Start->GetGuid();
			End			= InSpec->End;
			SpecClass	= InSpec->GetClass();
			Spec		= InSpec;

			Height		= InSpec->CollisionHeight;
			Radius		= InSpec->CollisionRadius;
		}
	
};

class AGearControlHelper : public AInfo
{
public:
    //## BEGIN PROPS GearControlHelper
    class USeqAct_Latent* SeqObj;
    BITFIELD bHasCrossLevelPaths:1;
    //## END PROPS GearControlHelper

    virtual void SetBlockingVolumeCollision(UBOOL bCollide,TArray<class ABlockingVolume*>& BlockingVolumes);
    DECLARE_FUNCTION(execSetBlockingVolumeCollision)
    {
        P_GET_UBOOL(bCollide);
        P_GET_TARRAY_REF(class ABlockingVolume*,BlockingVolumes);
        P_FINISH;
        SetBlockingVolumeCollision(bCollide,BlockingVolumes);
    }
    DECLARE_ABSTRACT_CLASS(AGearControlHelper,AInfo,0,GearGame)
	void AddSpecToList( UReachSpec* newSpec, TArray<FCrossLevelReachSpec>& BlockedList );
	UReachSpec* GetSpec( INT Idx, TArray<FCrossLevelReachSpec>& BlockedList );
	FCrossLevelReachSpec* GetRef( ANavigationPoint* Start, ANavigationPoint* End, TArray<FCrossLevelReachSpec>& BlockedList, INT Height, INT Radius );

	void SetMatineePosition( UBOOL bEnd, TArray<USeqAct_Interp*>& MatineeList );
};

struct DoorControlHelper_eventAdjustCover_Parms
{
    DoorControlHelper_eventAdjustCover_Parms(EEventParm)
    {
    }
};
class ADoorControlHelper : public AGearControlHelper
{
public:
    //## BEGIN PROPS DoorControlHelper
    TArrayNoInit<struct FCrossLevelReachSpec> BlockedWhenShut;
    //## END PROPS DoorControlHelper

    void eventAdjustCover()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_AdjustCover),NULL);
    }
    DECLARE_CLASS(ADoorControlHelper,AGearControlHelper,0,GearGame)
	virtual void ClearCrossLevelReferences();
	virtual void GetActorReferences(TArray<FActorReference*> &ActorRefs, UBOOL bIsRemovingLevel);
};

struct PopupCoverControlHelper_eventAdjustCover_Parms
{
    PopupCoverControlHelper_eventAdjustCover_Parms(EEventParm)
    {
    }
};
class APopupCoverControlHelper : public AGearControlHelper
{
public:
    //## BEGIN PROPS PopupCoverControlHelper
    TArrayNoInit<struct FCrossLevelReachSpec> BlockedWhenUp;
    TArrayNoInit<struct FCrossLevelReachSpec> BlockedWhenDown;
    //## END PROPS PopupCoverControlHelper

    void eventAdjustCover()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_AdjustCover),NULL);
    }
    DECLARE_CLASS(APopupCoverControlHelper,AGearControlHelper,0,GearGame)
	virtual void ClearCrossLevelReferences();
	virtual void GetActorReferences(TArray<FActorReference*> &ActorRefs, UBOOL bIsRemovingLevel);
};

class ATriggerTrackerHelper : public AInfo
{
public:
    //## BEGIN PROPS TriggerTrackerHelper
    class USeqAct_TriggerTracker* SeqObj;
    //## END PROPS TriggerTrackerHelper

    DECLARE_CLASS(ATriggerTrackerHelper,AInfo,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(ATriggerTrackerHelper)
};

struct FAISpawnInfo
{
    BYTE AIType;
    INT SpawnTotal;
    INT MaxAlive;
    INT SpawnedCount;
    TArrayNoInit<class APawn*> WatchList;
    FLOAT MaxSpawnDelay;
    FLOAT MinSpawnDelay;
    FLOAT CurrentDelay;
    TArrayNoInit<BYTE> WeaponLoadOut;
    TArrayNoInit<FString> VarLinkDescs;
    TArrayNoInit<FString> OutLinkDescs;
    TArrayNoInit<class APawn*> CurrentSpawns;
    BITFIELD bAssignMoveTarget:1;
    BITFIELD bAssignCombatZones:1;
    class UClass* GearPawnClass;
    class UClass* ControllerClass;
    TArrayNoInit<class UClass*> LoadoutClasses;
    BITFIELD bAllowInventoryDrops:1;
    BITFIELD bAllowHitImpactDecalsOnSkelMesh:1;
    BITFIELD bSpawnHitEffectDecals:1;
    BITFIELD bSpawnBloodTrailDecals:1;
    FName SquadName;
    BITFIELD bSquadLeader:1;
    FName ActorTag;
    BITFIELD bAutoAcquireEnemy:1;
    BITFIELD bAutoNotifyEnemy:1;
    BITFIELD bSpawnOnlyIfCoop:1;
    INT SetVersion;
    FStringNoInit AutoDebugText;
    BITFIELD bDontAllowDBNO:1;
    BITFIELD bAllowDeleteWhenStale:1;
    BYTE ShadowMode GCC_BITFIELD_MAGIC;
    FLOAT PlayIntialCombatReactionChance;
    BITFIELD bDisableShadowCasting:1;
    BITFIELD bDisableDeathScreams:1;
    BITFIELD bForceShowInTaccom:1;

		/** Constructors */
		FAISpawnInfo() {}
		FAISpawnInfo(EEventParm)
		{
			appMemzero(this, sizeof(FAISpawnInfo));
		}
		void InitToDefaults()
		{
			appMemzero(this, sizeof(FAISpawnInfo));
			bAllowDeleteWhenStale=FALSE;
			SpawnTotal=1;
			MaxAlive=1;
			bAssignMoveTarget=TRUE;
			bAssignCombatZones=TRUE;
			bAllowInventoryDrops=TRUE;
			bAllowHitImpactDecalsOnSkelMesh=TRUE;
			bSpawnHitEffectDecals=TRUE;
			bSpawnBloodTrailDecals=TRUE;
			bAutoAcquireEnemy=FALSE;
			bAutoNotifyEnemy=FALSE;
			SquadName=FName(TEXT("Alpha"));
			ShadowMode=LightShadow_Modulate;
			bDisableShadowCasting=FALSE;
			bDisableDeathScreams=FALSE;
			PlayIntialCombatReactionChance=0.5;
		}
		FAISpawnInfo(ENativeConstructor)
		{
			InitToDefaults();
		}
	
};

struct FAITypeInfo
{
    FName ControllerClassName;
    FName PawnClassName;
    INT TeamIdx;
    BITFIELD bUnique:1;

    /** Constructors */
    FAITypeInfo() {}
    FAITypeInfo(EEventParm)
    {
        appMemzero(this, sizeof(FAITypeInfo));
    }
};

class USeqAct_AIFactory : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_AIFactory
    TArrayNoInit<FName> InventoryTypeNames;
    TArrayNoInit<struct FAISpawnInfo> SpawnSets;
    TArrayNoInit<struct FAITypeInfo> SpawnInfo;
    TArrayNoInit<class AActor*> SpawnPoints;
    BITFIELD bAllSpawned:1;
    BITFIELD bAllDead:1;
    BITFIELD bAbortSpawns:1;
    BITFIELD bSuppressAllDead:1;
    BITFIELD bActivatedDeadLink:1;
    BITFIELD bResetDeadLinkCount:1;
    BITFIELD bMoveInterruptable:1;
    BITFIELD bForceMoveToSpawnLocation:1;
    BITFIELD bEnableEncroachCheckOnRagdoll:1;
    BITFIELD bUseDamageForKillAll:1;
    BITFIELD bFixedUpAutoEnemyDefaults:1;
    BITFIELD bEnteredCombat:1;
    INT DeadCount;
    INT NumDead;
    INT ActivateDeadLinkCount;
    BYTE MoveAssignment;
    BYTE PerceptionMood;
    BYTE CombatMood;
    BYTE SpawnPointSelectionMethod;
    TArrayNoInit<class AActor*> MoveTargets;
    INT MoveTargetIdx;
    TArrayNoInit<class ACombatZone*> CombatZones;
    FLOAT TeleportDistance;
    FLOAT TeleportZDistance;
    INT RoundToCountSpawnsInHUD;
    //## END PROPS SeqAct_AIFactory

    virtual void NotifySpawnerDisabled(class AGearSpawner* Spawner);
    virtual void NotifyCombatEntered();
    UBOOL CanSpawnAtLocation(FVector& chkLocation,FVector ChkExtent,class AActor* SpawnPointActor);
    DECLARE_FUNCTION(execNotifySpawnerDisabled)
    {
        P_GET_OBJECT(AGearSpawner,Spawner);
        P_FINISH;
        NotifySpawnerDisabled(Spawner);
    }
    DECLARE_FUNCTION(execNotifyCombatEntered)
    {
        P_FINISH;
        NotifyCombatEntered();
    }
    DECLARE_FUNCTION(execCanSpawnAtLocation)
    {
        P_GET_STRUCT_REF(FVector,chkLocation);
        P_GET_STRUCT(FVector,ChkExtent);
        P_GET_OBJECT(AActor,SpawnPointActor);
        P_FINISH;
        *(UBOOL*)Result=CanSpawnAtLocation(chkLocation,ChkExtent,SpawnPointActor);
    }
    DECLARE_CLASS(USeqAct_AIFactory,USequenceAction,0,GearGame)
	virtual void PostLoad();

	virtual void PostEditChange( UProperty* PropertyThatChanged );

	/**
	 * This will set the hard references for this Factory.  We need to only have the enums be by name
	 * and then when the user chooses what to spawn then we set the reference so we don't have
	 * to have in memory every possible thing we can spawn (due to the hard references).
	 **/
	void SetTheHardReferences();

	virtual void UpdateDynamicLinks();

	virtual void Activated();
	virtual UBOOL UpdateOp(FLOAT DeltaTime);
	virtual void DeActivated();
	void ResetSpawnSets();
	void UpdateSpawnSets(FLOAT DeltaTime);
	AActor* PickSpawnPoint(FVector& SpawnExtent, FVector& SpawnLocation, FRotator& SpawnRotation, AGearSpawner** Spawner, INT& SpawnerSlotIdx, INT& SpawnPointIdx, UBOOL bSkipCollisionCheck = FALSE);

	/** If we are using a DoNotUse enum then we need to set it to a valid enum **/
	void RepairAITypeSetToDoNotUseEnum();

	/** Remove dead pawns from the watchlist */
	void RemoveDeadSpawnsFromWatchList();

	/**
	 * Called when a spawn is killed.  Increments the Death counter, removes the spawn from the watch list of the set
	 * and decrements the number of spawns to kill in the GRI.
	 * @SpawnSet - the spawn set of the spawn who died
	 * @WatchListIdx - the index in the WatchList array of the SpawnSet of the spawn who died
	 */
	void SpawnHasDied( FAISpawnInfo &SpawnSet, INT WatchListIdx );
};

class USeqAct_AIGrapple : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_AIGrapple
    TArrayNoInit<class AActor*> GrappleTargets;
    FStringNoInit GrappleRopeClassName;
    class UClass* GrappleRopeClass;
    //## END PROPS SeqAct_AIGrapple

    DECLARE_CLASS(USeqAct_AIGrapple,USequenceAction,0,GearGame)
	virtual void	Activated();
	virtual UBOOL	UpdateOp(FLOAT DeltaTime);
	virtual void	DeActivated();

	virtual void PostLoad();

	virtual void PostEditChange( UProperty* PropertyThatChanged );

	/** This will allow use to put the grapple hook into the GearGameContent package and then set it only in packages that are using this kismet **/
	void SetTheHardReferences();
};

class USeqAct_AIMove : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_AIMove
    FLOAT TetherDistance;
    BYTE RouteDirection;
    BYTE MovementStyle;
    BYTE MovementMood;
    TArrayNoInit<class AActor*> MoveTargets;
    TArrayNoInit<class AActor*> FocusTarget;
    BITFIELD bInterruptable:1;
    BITFIELD bClearTetherOnArrival:1;
    TArrayNoInit<class AGearAI*> AITargets;
    TArrayNoInit<class AGearAI*> AIReachedGoal;
    INT DestinationSlotIndex;
    TArrayNoInit<class AActor*> AvailableTethers;
    //## END PROPS SeqAct_AIMove

    void ReachedGoal(class AGearAI* AI);
    DECLARE_FUNCTION(execReachedGoal)
    {
        P_GET_OBJECT(AGearAI,AI);
        P_FINISH;
        ReachedGoal(AI);
    }
    DECLARE_CLASS(USeqAct_AIMove,USequenceAction,0,GearGame)
	UBOOL UpdateOp(FLOAT DeltaTime);
	void PreActorHandle(AActor *Actor);
	virtual void DeActivated();
	virtual void OnReceivedImpulse( class USequenceOp* ActivatorOp, INT InputLinkIndex );
};

struct FStealthTargetInfo
{
    class AActor* Target;
    FLOAT Timer;

    /** Constructors */
    FStealthTargetInfo() {}
    FStealthTargetInfo(EEventParm)
    {
        appMemzero(this, sizeof(FStealthTargetInfo));
    }
};

struct FStealthTrackerInfo
{
    class AActor* Tracker;
    TArrayNoInit<struct FStealthTargetInfo> TargetInfo;

    /** Constructors */
    FStealthTrackerInfo() {}
    FStealthTrackerInfo(EEventParm)
    {
        appMemzero(this, sizeof(FStealthTrackerInfo));
    }
};

struct FStealthLayerInfo
{
    FStringNoInit LayerDesc;
    FLOAT Radius;
    FLOAT TimeLimit;
    BITFIELD bDoVisibilityCheck:1;
    BITFIELD bDoFOVCheck:1;
    FLOAT FOV;
    BITFIELD bAIWillTriggerTrack:1;
    BITFIELD bAIWillTriggerAlarm:1;
    BYTE UpdateType GCC_BITFIELD_MAGIC;
    TArrayNoInit<struct FStealthTrackerInfo> TrackerInfo;

    /** Constructors */
    FStealthLayerInfo() {}
    FStealthLayerInfo(EEventParm)
    {
        appMemzero(this, sizeof(FStealthLayerInfo));
    }
};

struct SeqAct_AIStealthTracker_eventSetUpdateDelegate_Parms
{
    INT LayerIdx;
    SeqAct_AIStealthTracker_eventSetUpdateDelegate_Parms(EEventParm)
    {
    }
};
struct SeqAct_AIStealthTracker_eventOnCheckStealthLayer_Parms
{
    INT LayerIdx;
    class AActor* Tracker;
    class AActor* Target;
    UBOOL ReturnValue;
    SeqAct_AIStealthTracker_eventOnCheckStealthLayer_Parms(EEventParm)
    {
    }
};
struct SeqAct_AIStealthTracker_eventOnUpdateStealthLayer_Parms
{
    INT LayerIdx;
    FLOAT DeltaTime;
    class AActor* Tracker;
    class AActor* Target;
    BYTE ReturnValue;
    SeqAct_AIStealthTracker_eventOnUpdateStealthLayer_Parms(EEventParm)
    {
    }
};
class USeqAct_AIStealthTracker : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_AIStealthTracker
    TArrayNoInit<struct FStealthLayerInfo> Layers;
    TArrayNoInit<class UObject*> Trackers;
    BITFIELD bDeactivateOnTrigger:1;
    BITFIELD bAbortTracking:1;
    BITFIELD bDrawDebugLayers:1;
    TArrayNoInit<FString> LayerDescs;
    FScriptDelegate __OnUpdateStealthLayer__Delegate;
    FScriptDelegate __OnCheckStealthLayer__Delegate;
    //## END PROPS SeqAct_AIStealthTracker

    virtual UBOOL CheckLayerDelegate_ByRange(INT LayerIdx,class AActor* Tracker,class AActor* Target);
    virtual UBOOL CheckLayerDelegate_ByBehavior(INT LayerIdx,class AActor* Tracker,class AActor* Target);
    virtual BYTE UpdateLayerDelegate_ByTime(INT LayerIdx,FLOAT DeltaTime,class AActor* Tracker,class AActor* Target);
    virtual UBOOL GetTrackerTargetPairIndices(INT LayerIdx,class AActor* Tracker,class AActor* Target,INT& out_TrackerIdx,INT& out_TargetIdx,UBOOL bCreateEntry);
    DECLARE_FUNCTION(execCheckLayerDelegate_ByRange)
    {
        P_GET_INT(LayerIdx);
        P_GET_OBJECT(AActor,Tracker);
        P_GET_OBJECT(AActor,Target);
        P_FINISH;
        *(UBOOL*)Result=CheckLayerDelegate_ByRange(LayerIdx,Tracker,Target);
    }
    DECLARE_FUNCTION(execCheckLayerDelegate_ByBehavior)
    {
        P_GET_INT(LayerIdx);
        P_GET_OBJECT(AActor,Tracker);
        P_GET_OBJECT(AActor,Target);
        P_FINISH;
        *(UBOOL*)Result=CheckLayerDelegate_ByBehavior(LayerIdx,Tracker,Target);
    }
    DECLARE_FUNCTION(execUpdateLayerDelegate_ByTime)
    {
        P_GET_INT(LayerIdx);
        P_GET_FLOAT(DeltaTime);
        P_GET_OBJECT(AActor,Tracker);
        P_GET_OBJECT(AActor,Target);
        P_FINISH;
        *(BYTE*)Result=UpdateLayerDelegate_ByTime(LayerIdx,DeltaTime,Tracker,Target);
    }
    DECLARE_FUNCTION(execGetTrackerTargetPairIndices)
    {
        P_GET_INT(LayerIdx);
        P_GET_OBJECT(AActor,Tracker);
        P_GET_OBJECT(AActor,Target);
        P_GET_INT_REF(out_TrackerIdx);
        P_GET_INT_REF(out_TargetIdx);
        P_GET_UBOOL(bCreateEntry);
        P_FINISH;
        *(UBOOL*)Result=GetTrackerTargetPairIndices(LayerIdx,Tracker,Target,out_TrackerIdx,out_TargetIdx,bCreateEntry);
    }
    void eventSetUpdateDelegate(INT LayerIdx)
    {
        SeqAct_AIStealthTracker_eventSetUpdateDelegate_Parms Parms(EC_EventParm);
        Parms.LayerIdx=LayerIdx;
        ProcessEvent(FindFunctionChecked(GEARGAME_SetUpdateDelegate),&Parms);
    }
    UBOOL delegateOnCheckStealthLayer(INT LayerIdx,class AActor* Tracker,class AActor* Target)
    {
        SeqAct_AIStealthTracker_eventOnCheckStealthLayer_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.LayerIdx=LayerIdx;
        Parms.Tracker=Tracker;
        Parms.Target=Target;
        ProcessDelegate(GEARGAME_OnCheckStealthLayer,&__OnCheckStealthLayer__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BYTE delegateOnUpdateStealthLayer(INT LayerIdx,FLOAT DeltaTime,class AActor* Tracker,class AActor* Target)
    {
        SeqAct_AIStealthTracker_eventOnUpdateStealthLayer_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.LayerIdx=LayerIdx;
        Parms.DeltaTime=DeltaTime;
        Parms.Tracker=Tracker;
        Parms.Target=Target;
        ProcessDelegate(GEARGAME_OnUpdateStealthLayer,&__OnUpdateStealthLayer__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(USeqAct_AIStealthTracker,USequenceAction,0,GearGame)
	virtual void	OnCreated();
	virtual void	PostLoad();
	virtual void	Activated();
	virtual UBOOL	UpdateOp(FLOAT DeltaTime);
	virtual void	UpdateDynamicLinks();
	virtual void	OnReceivedImpulse( class USequenceOp* ActivatorOp, INT InputLinkIndex );

	void WriteOutputVars( AActor* Spotter, AActor* Spotted );
};

class USeqAct_BargeAddRocking : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_BargeAddRocking
    struct FRawDistributionFloat PitchVel;
    struct FRawDistributionFloat RollVel;
    //## END PROPS SeqAct_BargeAddRocking

    DECLARE_CLASS(USeqAct_BargeAddRocking,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_BargeAddRocking)
};

class USeqAct_CauseExplosion : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_CauseExplosion
    class UGearExplosion* CustomExplosionTemplate;
    class UClass* ProjectileExplosionToEmulate;
    //## END PROPS SeqAct_CauseExplosion

    DECLARE_CLASS(USeqAct_CauseExplosion,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_CineCleanWorldPost : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_CineCleanWorldPost
    //## END PROPS SeqAct_CineCleanWorldPost

    virtual void RestoreGUDsStreaming();
    DECLARE_FUNCTION(execRestoreGUDsStreaming)
    {
        P_FINISH;
        RestoreGUDsStreaming();
    }
    DECLARE_CLASS(USeqAct_CineCleanWorldPost,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_CineCleanWorldPost)
};

class USeqAct_CineCleanWorldPre : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_CineCleanWorldPre
    //## END PROPS SeqAct_CineCleanWorldPre

    virtual void TurnOffAndFlushGUDs();
    DECLARE_FUNCTION(execTurnOffAndFlushGUDs)
    {
        P_FINISH;
        TurnOffAndFlushGUDs();
    }
    DECLARE_CLASS(USeqAct_CineCleanWorldPre,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_CineCleanWorldPre)
};

class USeqAct_ControlGearsMovie : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ControlGearsMovie
    FStringNoInit MovieName;
    //## END PROPS SeqAct_ControlGearsMovie

    DECLARE_CLASS(USeqAct_ControlGearsMovie,USequenceAction,0,GearGame)
	/**
	 * Executes the action when it is triggered 
	 */
	void Activated();
};

class USeqAct_Countdown : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_Countdown
    FLOAT TotalCountdownInSeconds;
    //## END PROPS SeqAct_Countdown

    DECLARE_CLASS(USeqAct_Countdown,USequenceAction,0,GearGame)
	void Activated();
	UBOOL UpdateOp(FLOAT deltaTime);
};

class USeqAct_CringePawn : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_CringePawn
    BITFIELD bRadialCringe:1;
    FLOAT CringeRadius;
    FLOAT CringeDuration;
    //## END PROPS SeqAct_CringePawn

    DECLARE_CLASS(USeqAct_CringePawn,USequenceAction,0,GearGame)
	void Activated();
};

struct SeqAct_DisplayPathChoice_eventUninitializePathChoice_Parms
{
    class ULocalPlayer* LocPlayer;
    SeqAct_DisplayPathChoice_eventUninitializePathChoice_Parms(EEventParm)
    {
    }
};
struct SeqAct_DisplayPathChoice_eventInitializePathChoice_Parms
{
    class UUIScene* Scene;
    class ULocalPlayer* LocPlayer;
    SeqAct_DisplayPathChoice_eventInitializePathChoice_Parms(EEventParm)
    {
    }
};
class USeqAct_DisplayPathChoice : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_DisplayPathChoice
    FStringNoInit TitleLookup;
    FStringNoInit LeftDescLookup;
    FStringNoInit RightDescLookup;
    BITFIELD bIsDone:1;
    BITFIELD bIsLeftChoiceResult:1;
    class UGearUIScene_PathChoice* PathChoiceSceneInstance;
    class USoundCue* StingerSound;
    //## END PROPS SeqAct_DisplayPathChoice

    void eventUninitializePathChoice(class ULocalPlayer* LocPlayer)
    {
        SeqAct_DisplayPathChoice_eventUninitializePathChoice_Parms Parms(EC_EventParm);
        Parms.LocPlayer=LocPlayer;
        ProcessEvent(FindFunctionChecked(GEARGAME_UninitializePathChoice),&Parms);
    }
    void eventInitializePathChoice(class UUIScene* Scene,class ULocalPlayer* LocPlayer)
    {
        SeqAct_DisplayPathChoice_eventInitializePathChoice_Parms Parms(EC_EventParm);
        Parms.Scene=Scene;
        Parms.LocPlayer=LocPlayer;
        ProcessEvent(FindFunctionChecked(GEARGAME_InitializePathChoice),&Parms);
    }
    DECLARE_CLASS(USeqAct_DisplayPathChoice,USequenceAction,0,GearGame)
	virtual void Activated();

	/**
	 * Polls to see if the async action is done
	 * @param ignored
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT);
};

class USeqAct_DrawMessage : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_DrawMessage
    FStringNoInit MessageText;
    FLOAT DisplayTimeSeconds;
    //## END PROPS SeqAct_DrawMessage

    DECLARE_CLASS(USeqAct_DrawMessage,USequenceAction,0,GearGame)
	UBOOL UpdateOp(FLOAT deltaTime);
	virtual void Activated();
};

class USeqAct_GearAchievementUnlock : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GearAchievementUnlock
    TArrayNoInit<BYTE> AchievementMap;
    BYTE Achievement;
    //## END PROPS SeqAct_GearAchievementUnlock

    DECLARE_CLASS(USeqAct_GearAchievementUnlock,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_GearPlayerAnim : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GearPlayerAnim
    BITFIELD bPlayUpperBodyOnly:1;
    BITFIELD bLooping:1;
    BITFIELD bOverride:1;
    BITFIELD bUseRootMotion:1;
    BYTE PlayMode GCC_BITFIELD_MAGIC;
    FName AnimName;
    FLOAT StartTime;
    FLOAT Duration;
    FLOAT Rate;
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    //## END PROPS SeqAct_GearPlayerAnim

    DECLARE_CLASS(USeqAct_GearPlayerAnim,USequenceAction,0,GearGame)
	virtual void	Activated();
	virtual UBOOL	UpdateOp(FLOAT DeltaTime);
	virtual void	DeActivated();
};

class USeqAct_GearUnlockableUnlock : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GearUnlockableUnlock
    TArrayNoInit<BYTE> UnlockableMap;
    BYTE Unlockable;
    //## END PROPS SeqAct_GearUnlockableUnlock

    DECLARE_CLASS(USeqAct_GearUnlockableUnlock,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_GetMPGameType : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GetMPGameType
    class UClass* CurrentGameClass;
    //## END PROPS SeqAct_GetMPGameType

    DECLARE_CLASS(USeqAct_GetMPGameType,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_GetPlayerTeam : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GetPlayerTeam
    //## END PROPS SeqAct_GetPlayerTeam

    DECLARE_CLASS(USeqAct_GetPlayerTeam,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_GetTeammate : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_GetTeammate
    TArrayNoInit<class UClass*> RequiredInventory;
    //## END PROPS SeqAct_GetTeammate

    DECLARE_CLASS(USeqAct_GetTeammate,USequenceAction,0,GearGame)
	virtual void Activated();
	virtual void DeActivated()
	{
		// do nothing, outputs activated in Activated()
	}
};

class USeqAct_KillPlayers : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_KillPlayers
    BITFIELD bShouldGib:1;
    BITFIELD bKillPlayers:1;
    BITFIELD bKillEnemies:1;
    BITFIELD bKillFriends:1;
    //## END PROPS SeqAct_KillPlayers

    DECLARE_CLASS(USeqAct_KillPlayers,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_BrumakControl : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_BrumakControl
    TArrayNoInit<class AActor*> TargetList;
    BITFIELD bFire:1;
    BITFIELD bSetFocus:1;
    FLOAT FireDuration;
    //## END PROPS SeqAct_BrumakControl

    DECLARE_CLASS(USeqAct_BrumakControl,USeqAct_Latent,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_BrumakControl)
};

class USeqAct_FlockSpawner : public USeqAct_CrowdSpawner
{
public:
    //## BEGIN PROPS SeqAct_FlockSpawner
    class AGearWeapon* SpawnedWeapon;
    class UClass* WeaponClass;
    FLOAT AimError;
    FVector FireOffset;
    struct FDecalData OverlapDeathDecalInfo;
    class USoundCue* OverlapDeathSound;
    class UParticleSystem* OverlapDeathEffect;
    FLOAT OverlapDeathRadius;
    BITFIELD bOverlapDeathPlayAnim:1;
    BITFIELD bCountForSeriouslyAchievement:1;
    //## END PROPS SeqAct_FlockSpawner

    DECLARE_CLASS(USeqAct_FlockSpawner,USeqAct_CrowdSpawner,0,GearGame)
	virtual void CleanUp();

	void SpawnDummyWeapon();

	/** Use the SpawnedWeapon (will create if missing) to dummy fire at target. */
	void TriggerDummyFire(const FVector& SourceLocation, const FRotator& SourceRotation, const FVector& TargetLocation);
};

class USeqAct_DoorControl : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_DoorControl
    BITFIELD bStartOpen:1 GCC_BITFIELD_MAGIC;
    BITFIELD bCurrentOpen:1;
    BITFIELD bDesiredOpen:1;
    BITFIELD bAutoPlayMatinee:1;
    BITFIELD bCheckEncroachOnMove:1;
    BITFIELD bRetryOnFail:1;
    BITFIELD bAutoAdjustCover:1;
    FLOAT NextRetryTime;
    BYTE NumRetry;
    BYTE RetryCount;
    BYTE NumStepsToOpen;
    BYTE CurStepToOpen;
    TArrayNoInit<class ABlockingVolume*> BlockingVolumes;
    TArrayNoInit<class ACoverLink*> CoverLinks;
    FLOAT DelayAdjustCoverOpen;
    FLOAT DelayAdjustCoverShut;
    TArrayNoInit<class ANavigationPoint*> NavPoints;
    TArrayNoInit<FString> MatineeObjList;
    TArrayNoInit<class USeqAct_Interp*> MatineeList;
    class ADoorControlHelper* Helper;
    //## END PROPS SeqAct_DoorControl

    virtual UBOOL CanRetryDoor();
    DECLARE_FUNCTION(execCanRetryDoor)
    {
        P_FINISH;
        *(UBOOL*)Result=CanRetryDoor();
    }
    DECLARE_CLASS(USeqAct_DoorControl,USeqAct_Latent,0,GearGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Initialize();
	virtual void Activated();
	virtual void DeActivated();
	virtual UBOOL UpdateOp( FLOAT DeltaTime );

	virtual void PrePathBuild(  AScout* Scout );
	virtual void PostPathBuild( AScout* Scout );

	virtual void OnDelete();

	void ResolveMatineeNames();
	void SetDoorState( UBOOL bOpen );

};

struct FDummyFireObjectListParams
{
    FVector2D SecondsPerObject;
    FVector2D ObjectChangeDelay;
    BYTE CyclingMethod;
    FLOAT TimeUntilObjectChange;
    BITFIELD bDelay:1;
    FLOAT DelayTimeRemaining;
    INT CurrentObjIdx;

    /** Constructors */
    FDummyFireObjectListParams() {}
    FDummyFireObjectListParams(EEventParm)
    {
        appMemzero(this, sizeof(FDummyFireObjectListParams));
    }
};

class USeqAct_DummyWeaponFire : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_DummyWeaponFire
    INT ShotsToFire;
    BITFIELD bShootUntilStopped:1;
    BITFIELD bStopped:1;
    BITFIELD bFinished:1;
    BITFIELD bSuppressMuzzleFlash:1;
    BITFIELD bSuppressTracers:1;
    BITFIELD bSuppressImpactFX:1;
    BITFIELD bSuppressAudio:1;
    BITFIELD bSuppressDamage:1;
    BITFIELD bFiring:1;
    FLOAT InaccuracyDegrees;
    class UClass* WeaponClass;
    BYTE FiringMode;
    class AGearWeapon* SpawnedWeapon;
    FLOAT RemainingFireTime;
    INT ShotsFired;
    FName OriginSocketName;
    class ADummyWeaponFireActor* ReplicatedActor;
    struct FDummyFireObjectListParams MultipleTargetParams;
    struct FDummyFireObjectListParams MultipleOriginParams;
    //## END PROPS SeqAct_DummyWeaponFire

    void SpawnDummyWeapon(class AActor* OriginActor,class AActor* TargetActor);
    void AlignWeaponMuzzleToActor(class AActor* AlignTo,class AActor* AimAt);
    DECLARE_FUNCTION(execSpawnDummyWeapon)
    {
        P_GET_OBJECT(AActor,OriginActor);
        P_GET_OBJECT(AActor,TargetActor);
        P_FINISH;
        SpawnDummyWeapon(OriginActor,TargetActor);
    }
    DECLARE_FUNCTION(execAlignWeaponMuzzleToActor)
    {
        P_GET_OBJECT(AActor,AlignTo);
        P_GET_OBJECT(AActor,AimAt);
        P_FINISH;
        AlignWeaponMuzzleToActor(AlignTo,AimAt);
    }
    DECLARE_CLASS(USeqAct_DummyWeaponFire,USeqAct_Latent,0,GearGame)
protected:
	void UpdateObjectList(FDummyFireObjectListParams& ListParams, TArray<UObject**> Objects, FLOAT DeltaTime);
	AActor* GetCurrentActorFromObjectList(FDummyFireObjectListParams const& ListParams, TArray<UObject**> Objects) const;

public:
	virtual void Activated();
	virtual UBOOL UpdateOp(FLOAT DeltaTime);
	virtual void DeActivated();

	/** called when the level that contains this sequence object is being removed/unloaded */
	virtual void CleanUp();
};

class USeqAct_GearUseCommLink : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_GearUseCommLink
    BITFIELD bStopped:1 GCC_BITFIELD_MAGIC;
    BITFIELD bStarted:1;
    BITFIELD bSingleLineSoundIsPlaying:1;
    BITFIELD bFinished:1;
    BITFIELD bUseCommLink:1;
    BITFIELD bPlayerCanAbort:1;
    BITFIELD bAbortedByPlayer:1;
    class USoundCue* SingleLineSound;
    FLOAT SoundDuration;
    TArrayNoInit<class USoundCue*> AbortLines;
    FLOAT AbortabilityDelay;
    FLOAT AbortabilityDelayRemaining;
    //## END PROPS SeqAct_GearUseCommLink

    DECLARE_CLASS(USeqAct_GearUseCommLink,USeqAct_Latent,0,GearGame)
	void Activated();
	UBOOL UpdateOp(FLOAT DeltaTime);
	void DeActivated();
};

class USeqAct_SpectatorCameraPath : public USeqAct_Interp
{
public:
    //## BEGIN PROPS SeqAct_SpectatorCameraPath
    FLOAT TravelTimeBetweenStops;
    BITFIELD bSwapForwardAndReverse:1;
    BITFIELD bAutomaticFraming:1;
    BITFIELD bCachedInterpData:1;
    class ACameraActor* CachedCameraActor;
    class UInterpTrackMove* CachedMoveTrack;
    class UInterpTrackInstMove* CachedMoveTrackInst;
    class UInterpTrackEvent* CachedEventTrack;
    class UInterpTrackInstEvent* CachedEventTrackInst;
    INT LastStopIdx;
    INT DestinationStopIdx;
    FLOAT InterpTimeToNextStop;
    //## END PROPS SeqAct_SpectatorCameraPath

    void MoveToNextStop();
    void MoveToPrevStop();
    class ACameraActor* GetAssociatedCameraActor();
    void ResetToStartingPosition();
    void UpdateCameraPosition(FLOAT DeltaTime);
    DECLARE_FUNCTION(execMoveToNextStop)
    {
        P_FINISH;
        MoveToNextStop();
    }
    DECLARE_FUNCTION(execMoveToPrevStop)
    {
        P_FINISH;
        MoveToPrevStop();
    }
    DECLARE_FUNCTION(execGetAssociatedCameraActor)
    {
        P_FINISH;
        *(class ACameraActor**)Result=GetAssociatedCameraActor();
    }
    DECLARE_FUNCTION(execResetToStartingPosition)
    {
        P_FINISH;
        ResetToStartingPosition();
    }
    DECLARE_FUNCTION(execUpdateCameraPosition)
    {
        P_GET_FLOAT(DeltaTime);
        P_FINISH;
        UpdateCameraPosition(DeltaTime);
    }
    DECLARE_CLASS(USeqAct_SpectatorCameraPath,USeqAct_Interp,0,GearGame)
protected:
	void CacheInterpData();
	UBOOL IsValidCameraPath();

public:
	virtual void Activated();
	virtual UBOOL UpdateOp(FLOAT deltaTime) { return USequenceAction::UpdateOp(deltaTime); }
	virtual void DeActivated() { USequenceAction::DeActivated(); }

	virtual void UpdateConnectorsFromData();

	virtual void UpdateInterp(FLOAT NewPosition, UBOOL bPreview, UBOOL bJump);
	
	/**
	 * Activates the output for the named event.
	 */
	virtual void NotifyEventTriggered(class UInterpTrackEvent const* EventTrack, INT EventIdx);

	FLOAT GetInterpolationPercentage() const;
};

class USeqAct_Leviathan_Mouth : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_Leviathan_Mouth
    TArrayNoInit<class AActor*> Victims;
    FLOAT Duration;
    INT NumTentaclesToHurtToOpenMouth;
    //## END PROPS SeqAct_Leviathan_Mouth

    DECLARE_CLASS(USeqAct_Leviathan_Mouth,USeqAct_Latent,0,GearGame)
	virtual UBOOL UpdateOp( FLOAT DeltaTime );
};

class USeqAct_Speak : public USeqAct_PlaySound
{
public:
    //## BEGIN PROPS SeqAct_Speak
    BITFIELD bTurnHeadTowardsAddressee:1 GCC_BITFIELD_MAGIC;
    BITFIELD bTurnBodyTowardsAddressee:1;
    BITFIELD bUseTTS:1;
    BITFIELD bPCMGenerated:1;
    BITFIELD bSpokenLineACHasStartedPlaying:1;
    FLOAT ExtraHeadTurnTowardTime;
    FName GestureAnimName;
    BYTE TTSSpeaker;
    FStringNoInit TTSSpokenText;
    class USoundCue* TTSSoundCue;
    class UAudioComponent* SpokenLineAC;
    FLOAT ExtraDelayStartTime;
    class AGearPawn* DBNOSpeakerToWaitFor;
    //## END PROPS SeqAct_Speak

    DECLARE_CLASS(USeqAct_Speak,USeqAct_PlaySound,0,GearGame)
	void PostEditChange( UProperty* PropertyThatChanged );
	USoundCue* InitSpeakSoundCue( void );
	void Activated();
	UBOOL UpdateOp(FLOAT deltaTime);
protected:
	AActor* GetSpeaker(class AGearPawn*& PawnSpeaker, class AGearRemoteSpeaker*& RemoteSpeaker, class AVehicle_RideReaver_Base*& ReaverSpeaker) const;
	void ForceStopSpeech(USoundCue const* ActiveSoundCue);
	void SpeechFinished();
public:
};

class USeqAct_PopupCoverControl : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_PopupCoverControl
    BITFIELD bStartPoppedUp:1 GCC_BITFIELD_MAGIC;
    BITFIELD bCurrentPoppedUp:1;
    BITFIELD bDesiredPoppedUp:1;
    BITFIELD bAutoPlayMatinee:1;
    BITFIELD bCheckEncroachOnPopUp:1;
    BITFIELD bRetryOnFailPopUp:1;
    BITFIELD bAutoAdjustCover:1;
    FLOAT NextRetryTime;
    BYTE NumRetry;
    BYTE RetryCount;
    TArrayNoInit<class ABlockingVolume*> BlockingVolumes;
    TArrayNoInit<class ACoverLink*> CoverLinks;
    TArrayNoInit<struct FLinkSlotHelper> CoverList;
    FLOAT DelayAdjustCoverUp;
    FLOAT DelayAdjustCoverDown;
    TArrayNoInit<class ACoverSlotMarker*> MarkerList;
    TArrayNoInit<FString> MatineeObjList;
    TArrayNoInit<class USeqAct_Interp*> MatineeList;
    class APopupCoverControlHelper* Helper;
    //## END PROPS SeqAct_PopupCoverControl

    virtual UBOOL CanRetryPopup();
    DECLARE_FUNCTION(execCanRetryPopup)
    {
        P_FINISH;
        *(UBOOL*)Result=CanRetryPopup();
    }
    DECLARE_CLASS(USeqAct_PopupCoverControl,USeqAct_Latent,0,GearGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Initialize();
	virtual void Activated();
	virtual void DeActivated();
	virtual UBOOL UpdateOp( FLOAT DeltaTime );

	virtual void PrePathBuild(  AScout* Scout );
	virtual void PostPathBuild( AScout* Scout );

	virtual void OnDelete();

	void ResolveMatineeNames();
	void SetCoverState( UBOOL bUp );
};

class USeqAct_Skorge_ChargeAndDuel : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_Skorge_ChargeAndDuel
    class AActor* StartPosition;
    class AActor* Destination;
    BYTE DuelResult;
    BITFIELD bForceDraw:1 GCC_BITFIELD_MAGIC;
    //## END PROPS SeqAct_Skorge_ChargeAndDuel

    DECLARE_CLASS(USeqAct_Skorge_ChargeAndDuel,USeqAct_Latent,0,GearGame)
	UBOOL UpdateOp(FLOAT DeltaTime);
	void DeActivated();
};

class USeqAct_StreamByURL : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_StreamByURL
    INT Stage;
    //## END PROPS SeqAct_StreamByURL

    DECLARE_CLASS(USeqAct_StreamByURL,USeqAct_Latent,0,GearGame)
	UBOOL UpdateOp(FLOAT DeltaTime);
};

class USeqAct_ToggleConversation : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_ToggleConversation
    BITFIELD bPlayerCanAbort:1 GCC_BITFIELD_MAGIC;
    BITFIELD bAbortedByPlayer:1;
    //## END PROPS SeqAct_ToggleConversation

    DECLARE_CLASS(USeqAct_ToggleConversation,USeqAct_Latent,0,GearGame)
	virtual void Activated();
	virtual UBOOL UpdateOp(FLOAT DeltaTime);
	virtual void DeActivated();
};

class USeqAct_ToggleConversationCamera : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_ToggleConversationCamera
    BITFIELD bAbortedByPlayer:1 GCC_BITFIELD_MAGIC;
    //## END PROPS SeqAct_ToggleConversationCamera

    DECLARE_CLASS(USeqAct_ToggleConversationCamera,USeqAct_Latent,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_ToggleConversationCamera)
};

struct FTriggerTrackerInfo
{
    class AActor* Target;
    BITFIELD bTouchedFrontTrigger:1;

    /** Constructors */
    FTriggerTrackerInfo() {}
    FTriggerTrackerInfo(EEventParm)
    {
        appMemzero(this, sizeof(FTriggerTrackerInfo));
    }
};

class USeqAct_TriggerTracker : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_TriggerTracker
    class ATriggerVolume* BackTrigVol;
    class ATriggerVolume* FrontTrigVol;
    BITFIELD bTracking:1;
    class ATriggerTrackerHelper* Helper;
    TArrayNoInit<struct FTriggerTrackerInfo> InfoList;
    //## END PROPS SeqAct_TriggerTracker

    DECLARE_CLASS(USeqAct_TriggerTracker,USeqAct_Latent,0,GearGame)
	virtual void Initialize();
	virtual void OnReceivedImpulse( class USequenceOp* ActivatorOp, INT InputLinkIndex );
	virtual void DeActivated();
	virtual UBOOL UpdateOp( FLOAT DeltaTime );

	void SetTracking( UBOOL bTrack );
	void SetupTrackingList();
	void ClearTrackingList();
};

class USeqAct_WaitForGearsMovieComplete : public USeqAct_Latent
{
public:
    //## BEGIN PROPS SeqAct_WaitForGearsMovieComplete
    FStringNoInit MovieName;
    //## END PROPS SeqAct_WaitForGearsMovieComplete

    DECLARE_CLASS(USeqAct_WaitForGearsMovieComplete,USeqAct_Latent,0,GearGame)
	UBOOL UpdateOp(FLOAT DeltaTime);
};

class USeqAct_ManageObjectives : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ManageObjectives
    FName ObjectiveName;
    FStringNoInit ObjectiveDesc;
    BITFIELD bNotifyPlayer:1;
    //## END PROPS SeqAct_ManageObjectives

    DECLARE_CLASS(USeqAct_ManageObjectives,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_ManagePOI : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ManagePOI
    FStringNoInit POI_DisplayName;
    BITFIELD POI_bEnabled:1;
    BITFIELD POI_bForceLookCheckLineOfSight:1;
    BITFIELD POI_bFOVLineOfSightCheck:1;
    BITFIELD POI_bDisableOtherPOIs:1;
    BITFIELD POI_bLeavePlayerFacingPOI:1;
    BITFIELD bIsDone:1;
    FLOAT POI_IconDuration;
    BYTE POI_ForceLookType;
    FLOAT POI_ForceLookDuration;
    INT POI_LookAtPriority;
    FLOAT POI_DesiredFOV;
    INT POI_FOVCount;
    FLOAT POI_EnableDuration;
    class AGearPointOfInterest* POI;
    //## END PROPS SeqAct_ManagePOI

    DECLARE_CLASS(USeqAct_ManagePOI,USequenceAction,0|CLASS_Config,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	virtual void Activated();

	/**
	 * Polls to see if the async action is done
	 * @param ignored
	 * @return TRUE if the operation has completed, FALSE otherwise
	 */
	UBOOL UpdateOp(FLOAT);

	/** Checks for input impulses and calls the proper function accordingly */
	void ProcessInputImpulses();
};

class USeqAct_ManageTutorials : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ManageTutorials
    BYTE Tutorial_Type;
    BITFIELD bStartTutorialWhenAdded:1 GCC_BITFIELD_MAGIC;
    BITFIELD Objective_bNotifyPlayer:1;
    BITFIELD bWipeTutorialsOnSystemOn:1;
    BITFIELD bWipeTutorialsOnSystemOff:1;
    BITFIELD bActionIsDone:1;
    BITFIELD bTutorialCompleted:1;
    BITFIELD bTutorialAlreadyCompleted:1;
    BITFIELD bTutorialIsDead:1;
    BITFIELD bTutorialSystemIsDead:1;
    FName Objective_Name;
    FStringNoInit Objective_Desc;
    //## END PROPS SeqAct_ManageTutorials

    DECLARE_CLASS(USeqAct_ManageTutorials,USequenceAction,0,GearGame)
	/** Callback for when the event is activated. */
	virtual void Activated();

	/** Callback for when the event is deactivated. */
	virtual void DeActivated();

	/**
	* Polls to see if the async action is done
	*
	* @param ignored
	*
	* @return TRUE if the operation has completed, FALSE otherwise
	*/
	UBOOL UpdateOp(FLOAT);
};

struct FPropertyInfo
{
    FName PropertyName;
    BITFIELD bModifyProperty:1;
    FStringNoInit PropertyValue;

    /** Constructors */
    FPropertyInfo() {}
    FPropertyInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPropertyInfo));
    }
};

class USeqAct_ModifyProperty : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ModifyProperty
    TArrayNoInit<struct FPropertyInfo> Properties;
    //## END PROPS SeqAct_ModifyProperty

    DECLARE_CLASS(USeqAct_ModifyProperty,USequenceAction,0,GearGame)
	virtual void CheckForErrors();
	virtual void Activated();
};

class USeqAct_MPHealthManipulator : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_MPHealthManipulator
    INT Health;
    FLOAT HealthRegenPerSecond;
    //## END PROPS SeqAct_MPHealthManipulator

    DECLARE_CLASS(USeqAct_MPHealthManipulator,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_Mutate : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_Mutate
    BYTE MutateType;
    TArrayNoInit<FString> MutateClassNames;
    class UClass* PawnClass;
    //## END PROPS SeqAct_Mutate

    DECLARE_CLASS(USeqAct_Mutate,USequenceAction,0,GearGame)
	void SetTheHardReferences();
	virtual void PostLoad();
	virtual void PostEditChange( UProperty* PropertyThatChanged );
};

class USeqAct_NotifyCoopSplit : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_NotifyCoopSplit
    BITFIELD bSoloSplit:1;
    //## END PROPS SeqAct_NotifyCoopSplit

    DECLARE_CLASS(USeqAct_NotifyCoopSplit,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_PlayCinematic : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_PlayCinematic
    //## END PROPS SeqAct_PlayCinematic

    DECLARE_CLASS(USeqAct_PlayCinematic,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_PrecacheResources : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_PrecacheResources
    //## END PROPS SeqAct_PrecacheResources

    DECLARE_CLASS(USeqAct_PrecacheResources,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_RainCloudTurnOnOff : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_RainCloudTurnOnOff
    //## END PROPS SeqAct_RainCloudTurnOnOff

    DECLARE_CLASS(USeqAct_RainCloudTurnOnOff,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_RainCloudTurnOnOff)
};

class USeqAct_RainDropsGroundTurnOnOff : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_RainDropsGroundTurnOnOff
    //## END PROPS SeqAct_RainDropsGroundTurnOnOff

    DECLARE_CLASS(USeqAct_RainDropsGroundTurnOnOff,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_RainDropsGroundTurnOnOff)
};

class USeqAct_RainDropsSelfTurnOnOff : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_RainDropsSelfTurnOnOff
    //## END PROPS SeqAct_RainDropsSelfTurnOnOff

    DECLARE_CLASS(USeqAct_RainDropsSelfTurnOnOff,USequenceAction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqAct_RainDropsSelfTurnOnOff)
};

class USeqAct_RemoveDroppedPickups : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_RemoveDroppedPickups
    //## END PROPS SeqAct_RemoveDroppedPickups

    DECLARE_CLASS(USeqAct_RemoveDroppedPickups,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_RetrieveVariable : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_RetrieveVariable
    FName VariableName;
    class UObject* ObjectData;
    BITFIELD BoolData:1;
    INT IntData;
    FStringNoInit StringData;
    FLOAT FloatData;
    //## END PROPS SeqAct_RetrieveVariable

    DECLARE_CLASS(USeqAct_RetrieveVariable,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_SetGUDSFrequency : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_SetGUDSFrequency
    FLOAT GlobalFrequencyMultiplier;
    //## END PROPS SeqAct_SetGUDSFrequency

    DECLARE_CLASS(USeqAct_SetGUDSFrequency,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_SetWeather : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_SetWeather
    BITFIELD bOverrideRainEmitterHeight:1;
    BITFIELD bOverrideHailEmitterHeight:1;
    FLOAT RainEmitterHeight;
    FLOAT HailEmitterHeight;
    //## END PROPS SeqAct_SetWeather

    DECLARE_CLASS(USeqAct_SetWeather,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_StoreVariable : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_StoreVariable
    FName VariableName;
    class UObject* ObjectData;
    BITFIELD BoolData:1;
    INT IntData;
    FStringNoInit StringData;
    FLOAT FloatData;
    //## END PROPS SeqAct_StoreVariable

    DECLARE_CLASS(USeqAct_StoreVariable,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_ToggleGUDSStreaming : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ToggleGUDSStreaming
    BITFIELD bFlushVarietyBanksOnDisable:1;
    //## END PROPS SeqAct_ToggleGUDSStreaming

    DECLARE_CLASS(USeqAct_ToggleGUDSStreaming,USequenceAction,0,GearGame)
	virtual void Activated();
};

class USeqAct_ToggleHOD : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_ToggleHOD
    BITFIELD bSuppressAlert:1;
    //## END PROPS SeqAct_ToggleHOD

    DECLARE_CLASS(USeqAct_ToggleHOD,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_TravelMap : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_TravelMap
    FStringNoInit MapName;
    FStringNoInit Parameters;
    //## END PROPS SeqAct_TravelMap

    DECLARE_CLASS(USeqAct_TravelMap,USequenceAction,0,GearGame)
	void Activated();
};

class USeqAct_TriggerGUDSEvent : public USequenceAction
{
public:
    //## BEGIN PROPS SeqAct_TriggerGUDSEvent
    BYTE EventID;
    FLOAT DelaySeconds;
    //## END PROPS SeqAct_TriggerGUDSEvent

    DECLARE_CLASS(USeqAct_TriggerGUDSEvent,USequenceAction,0,GearGame)
	void Activated();
};

class USeqCond_GetDifficulty : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_GetDifficulty
    //## END PROPS SeqCond_GetDifficulty

    DECLARE_CLASS(USeqCond_GetDifficulty,USequenceCondition,0,GearGame)
	virtual void Activated();
};

class USeqCond_HasCOGTag : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_HasCOGTag
    //## END PROPS SeqCond_HasCOGTag

    DECLARE_CLASS(USeqCond_HasCOGTag,USequenceCondition,0,GearGame)
	void Activated();
};

class USeqCond_HasDiscoverable : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_HasDiscoverable
    //## END PROPS SeqCond_HasDiscoverable

    DECLARE_CLASS(USeqCond_HasDiscoverable,USequenceCondition,0,GearGame)
	void Activated();
};

class USeqCond_HasInventory : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_HasInventory
    TArrayNoInit<class UObject*> Players;
    TArrayNoInit<class UClass*> InventoryTypes;
    //## END PROPS SeqCond_HasInventory

    DECLARE_CLASS(USeqCond_HasInventory,USequenceCondition,0,GearGame)
	void Activated();
};

class USeqCond_IsCoop : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_IsCoop
    //## END PROPS SeqCond_IsCoop

    DECLARE_CLASS(USeqCond_IsCoop,USequenceCondition,0,GearGame)
	virtual void Activated();
};

class USeqCond_IsInCover : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_IsInCover
    //## END PROPS SeqCond_IsInCover

    DECLARE_CLASS(USeqCond_IsInCover,USequenceCondition,0,GearGame)
	virtual void Activated();
};

class USeqCond_IsPreviewGrenade : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_IsPreviewGrenade
    //## END PROPS SeqCond_IsPreviewGrenade

    DECLARE_CLASS(USeqCond_IsPreviewGrenade,USequenceCondition,0,GearGame)
	virtual void Activated();
};

class USeqCond_IsStunned : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_IsStunned
    //## END PROPS SeqCond_IsStunned

    DECLARE_CLASS(USeqCond_IsStunned,USequenceCondition,0,GearGame)
	virtual void Activated();
};

struct FArrayHack
{
    TArrayNoInit<FName> PawnTypes;

    /** Constructors */
    FArrayHack() {}
    FArrayHack(EEventParm)
    {
        appMemzero(this, sizeof(FArrayHack));
    }
};

class USeqCond_PawnType : public USequenceCondition
{
public:
    //## BEGIN PROPS SeqCond_PawnType
    class UObject* CheckPawn;
    TArrayNoInit<struct FArrayHack> PawnTypes;
    //## END PROPS SeqCond_PawnType

    DECLARE_CLASS(USeqCond_PawnType,USequenceCondition,0,GearGame)
	virtual void DeActivated();
};

class USeqEvt_CoopTouch : public USeqEvent_Touch
{
public:
    //## BEGIN PROPS SeqEvt_CoopTouch
    //## END PROPS SeqEvt_CoopTouch

    DECLARE_CLASS(USeqEvt_CoopTouch,USeqEvent_Touch,0,GearGame)
	UBOOL CheckUnTouchActivate(AActor *inOriginator, AActor *inInstigator, UBOOL bTest = FALSE);

private:
	virtual UBOOL CheckActivate(AActor *InOriginator, AActor *InInstigator, UBOOL bTest=FALSE, TArray<INT>* ActivateIndices = NULL, UBOOL bPushTop = FALSE);
};

class USeqEvt_GearTouch : public USeqEvent_Touch
{
public:
    //## BEGIN PROPS SeqEvt_GearTouch
    BYTE RoadieRunFilterType;
    BYTE CoverStatusFilterType;
    //## END PROPS SeqEvt_GearTouch

    DECLARE_CLASS(USeqEvt_GearTouch,USeqEvent_Touch,0,GearGame)
protected:
	virtual void DoTouchActivation(AActor *InOriginator, AActor *InInstigator);
	virtual void DoUnTouchActivation(AActor *InOriginator, AActor *InInstigator, INT TouchIdx);
};

class USeqEvt_EnteredCover : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_EnteredCover
    //## END PROPS SeqEvt_EnteredCover

    DECLARE_CLASS(USeqEvt_EnteredCover,USequenceEvent,0,GearGame)
	UBOOL RegisterEvent();
};

class USeqEvt_EnteredRevivalState : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_EnteredRevivalState
    //## END PROPS SeqEvt_EnteredRevivalState

    DECLARE_CLASS(USeqEvt_EnteredRevivalState,USequenceEvent,0,GearGame)
	virtual UBOOL CheckActivate(AActor *InOriginator, AActor *InInstigator, UBOOL bTest=FALSE, TArray<INT>* ActivateIndices = NULL, UBOOL bPushTop = FALSE);
};

class USeqEvt_Input : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_Input
    TArrayNoInit<BYTE> ButtonNames;
    BITFIELD bTrapInput:1;
    BYTE RegisterType GCC_BITFIELD_MAGIC;
    //## END PROPS SeqEvt_Input

    UBOOL CheckInputActivate(BYTE Button,UBOOL bPressed);
    DECLARE_FUNCTION(execCheckInputActivate)
    {
        P_GET_BYTE(Button);
        P_GET_UBOOL(bPressed);
        P_FINISH;
        *(UBOOL*)Result=CheckInputActivate(Button,bPressed);
    }
    DECLARE_CLASS(USeqEvt_Input,USequenceEvent,0,GearGame)
	UBOOL RegisterEvent();
};

class USeqEvt_Interaction : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_Interaction
    BITFIELD bCheckInteractDistance:1;
    BITFIELD bCheckInteractFOV:1;
    FLOAT InteractDistance;
    FLOAT InteractFOV;
    struct FActionInfo InteractAction;
    //## END PROPS SeqEvt_Interaction

    DECLARE_ABSTRACT_CLASS(USeqEvt_Interaction,USequenceEvent,0,GearGame)
	virtual UBOOL CheckActivate(AActor *InOriginator, AActor *InInstigator, UBOOL bTest=FALSE, TArray<INT>* ActivateIndices = NULL, UBOOL bPushTop = FALSE);
};

class USeqEvt_ChainsawInteraction : public USeqEvt_Interaction
{
public:
    //## BEGIN PROPS SeqEvt_ChainsawInteraction
    BITFIELD bDisableCamera:1;
    //## END PROPS SeqEvt_ChainsawInteraction

    DECLARE_CLASS(USeqEvt_ChainsawInteraction,USeqEvt_Interaction,0,GearGame)
    NO_DEFAULT_CONSTRUCTOR(USeqEvt_ChainsawInteraction)
};

class USeqEvt_LeftCover : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_LeftCover
    //## END PROPS SeqEvt_LeftCover

    DECLARE_CLASS(USeqEvt_LeftCover,USequenceEvent,0,GearGame)
	UBOOL RegisterEvent();
};

class USeqEvt_MPRoundEnd : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_MPRoundEnd
    //## END PROPS SeqEvt_MPRoundEnd

    DECLARE_CLASS(USeqEvt_MPRoundEnd,USequenceEvent,0,GearGame)
	UBOOL RegisterEvent();
};

class USeqEvt_MPRoundStart : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_MPRoundStart
    //## END PROPS SeqEvt_MPRoundStart

    DECLARE_CLASS(USeqEvt_MPRoundStart,USequenceEvent,0,GearGame)
	UBOOL RegisterEvent();
};

class USeqEvt_WDODamageModApplied : public USequenceEvent
{
public:
    //## BEGIN PROPS SeqEvt_WDODamageModApplied
    FName SubObjectName;
    FName DamageModName;
    //## END PROPS SeqEvt_WDODamageModApplied

    DECLARE_CLASS(USeqEvt_WDODamageModApplied,USequenceEvent,0,GearGame)
	void PostEditChange(UProperty* PropertyThatChanged);
};

class USeqVar_Anya : public USeqVar_Object
{
public:
    //## BEGIN PROPS SeqVar_Anya
    //## END PROPS SeqVar_Anya

    DECLARE_CLASS(USeqVar_Anya,USeqVar_Object,0,GearGame)
	UObject** GetObjectRef( INT Idx );

	virtual FString GetValueStr()
	{
		return FString(TEXT("Anya (Remote)"));
	}
};

class USeqVar_Dom : public USeqVar_Object
{
public:
    //## BEGIN PROPS SeqVar_Dom
    //## END PROPS SeqVar_Dom

    DECLARE_CLASS(USeqVar_Dom,USeqVar_Object,0,GearGame)
	UObject** GetObjectRef( INT Idx );

	virtual FString GetValueStr()
	{
		return FString(TEXT("Dom"));
	}

	virtual UBOOL SupportsProperty(UProperty *Property)
	{
		return FALSE;
	}
};

class USeqVar_GenericRemoteSpeaker : public USeqVar_Object
{
public:
    //## BEGIN PROPS SeqVar_GenericRemoteSpeaker
    //## END PROPS SeqVar_GenericRemoteSpeaker

    DECLARE_CLASS(USeqVar_GenericRemoteSpeaker,USeqVar_Object,0,GearGame)
	UObject** GetObjectRef( INT Idx );

	virtual FString GetValueStr()
	{
		return FString(TEXT("Generic Speaker (Remote)"));
	}
};

class USeqVar_Marcus : public USeqVar_Object
{
public:
    //## BEGIN PROPS SeqVar_Marcus
    //## END PROPS SeqVar_Marcus

    DECLARE_CLASS(USeqVar_Marcus,USeqVar_Object,0,GearGame)
	UObject** GetObjectRef( INT Idx );

	virtual FString GetValueStr()
	{
		return FString(TEXT("Marcus"));
	}

	virtual UBOOL SupportsProperty(UProperty *Property)
	{
		return FALSE;
	}
};

#endif // !INCLUDED_GEARGAME_SEQUENCE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AGearControlHelper,-1,execSetBlockingVolumeCollision);
AUTOGENERATE_FUNCTION(USeqAct_AIFactory,-1,execCanSpawnAtLocation);
AUTOGENERATE_FUNCTION(USeqAct_AIFactory,-1,execNotifyCombatEntered);
AUTOGENERATE_FUNCTION(USeqAct_AIFactory,-1,execNotifySpawnerDisabled);
AUTOGENERATE_FUNCTION(USeqAct_AIMove,-1,execReachedGoal);
AUTOGENERATE_FUNCTION(USeqAct_AIStealthTracker,-1,execGetTrackerTargetPairIndices);
AUTOGENERATE_FUNCTION(USeqAct_AIStealthTracker,-1,execUpdateLayerDelegate_ByTime);
AUTOGENERATE_FUNCTION(USeqAct_AIStealthTracker,-1,execCheckLayerDelegate_ByBehavior);
AUTOGENERATE_FUNCTION(USeqAct_AIStealthTracker,-1,execCheckLayerDelegate_ByRange);
AUTOGENERATE_FUNCTION(USeqAct_CineCleanWorldPost,-1,execRestoreGUDsStreaming);
AUTOGENERATE_FUNCTION(USeqAct_CineCleanWorldPre,-1,execTurnOffAndFlushGUDs);
AUTOGENERATE_FUNCTION(USeqAct_DoorControl,-1,execCanRetryDoor);
AUTOGENERATE_FUNCTION(USeqAct_DummyWeaponFire,-1,execAlignWeaponMuzzleToActor);
AUTOGENERATE_FUNCTION(USeqAct_DummyWeaponFire,-1,execSpawnDummyWeapon);
AUTOGENERATE_FUNCTION(USeqAct_PopupCoverControl,-1,execCanRetryPopup);
AUTOGENERATE_FUNCTION(USeqAct_SpectatorCameraPath,-1,execUpdateCameraPosition);
AUTOGENERATE_FUNCTION(USeqAct_SpectatorCameraPath,-1,execResetToStartingPosition);
AUTOGENERATE_FUNCTION(USeqAct_SpectatorCameraPath,-1,execGetAssociatedCameraActor);
AUTOGENERATE_FUNCTION(USeqAct_SpectatorCameraPath,-1,execMoveToPrevStop);
AUTOGENERATE_FUNCTION(USeqAct_SpectatorCameraPath,-1,execMoveToNextStop);
AUTOGENERATE_FUNCTION(USeqEvt_Input,-1,execCheckInputActivate);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_SEQUENCE_NATIVE_DEFS
#define GEARGAME_SEQUENCE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,ADoorControlHelper);
DECLARE_NATIVE_TYPE(GearGame,AGearControlHelper);
DECLARE_NATIVE_TYPE(GearGame,APopupCoverControlHelper);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_AIFactory);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_AIGrapple);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_AIMove);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_AIStealthTracker);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_BargeAddRocking);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_BrumakControl);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_CauseExplosion);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_CineCleanWorldPost);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_CineCleanWorldPre);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ControlGearsMovie);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_Countdown);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_CringePawn);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_DisplayPathChoice);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_DoorControl);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_DrawMessage);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_DummyWeaponFire);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_FlockSpawner);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GearAchievementUnlock);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GearPlayerAnim);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GearUnlockableUnlock);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GearUseCommLink);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GetMPGameType);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GetPlayerTeam);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_GetTeammate);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_KillPlayers);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_Leviathan_Mouth);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ManageObjectives);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ManagePOI);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ManageTutorials);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ModifyProperty);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_MPHealthManipulator);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_Mutate);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_NotifyCoopSplit);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_PlayCinematic);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_PopupCoverControl);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_PrecacheResources);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_RainCloudTurnOnOff);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_RainDropsGroundTurnOnOff);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_RainDropsSelfTurnOnOff);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_RemoveDroppedPickups);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_RetrieveVariable);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_SetGUDSFrequency);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_SetWeather);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_Skorge_ChargeAndDuel);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_Speak);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_SpectatorCameraPath);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_StoreVariable);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_StreamByURL);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ToggleConversation);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ToggleConversationCamera);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ToggleGUDSStreaming);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_ToggleHOD);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_TravelMap);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_TriggerGUDSEvent);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_TriggerTracker);
DECLARE_NATIVE_TYPE(GearGame,USeqAct_WaitForGearsMovieComplete);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_GetDifficulty);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_HasCOGTag);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_HasDiscoverable);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_HasInventory);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_IsCoop);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_IsInCover);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_IsPreviewGrenade);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_IsStunned);
DECLARE_NATIVE_TYPE(GearGame,USeqCond_PawnType);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_ChainsawInteraction);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_CoopTouch);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_EnteredCover);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_EnteredRevivalState);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_GearTouch);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_Input);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_Interaction);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_LeftCover);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_MPRoundEnd);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_MPRoundStart);
DECLARE_NATIVE_TYPE(GearGame,USeqEvt_WDODamageModApplied);
DECLARE_NATIVE_TYPE(GearGame,USeqVar_Anya);
DECLARE_NATIVE_TYPE(GearGame,USeqVar_Dom);
DECLARE_NATIVE_TYPE(GearGame,USeqVar_GenericRemoteSpeaker);
DECLARE_NATIVE_TYPE(GearGame,USeqVar_Marcus);
DECLARE_NATIVE_TYPE(GearGame,ATriggerTrackerHelper);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_SEQUENCE \
	ADoorControlHelper::StaticClass(); \
	AGearControlHelper::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameAGearControlHelperNative; \
	APopupCoverControlHelper::StaticClass(); \
	USeqAct_AIFactory::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_AIFactoryNative; \
	USeqAct_AIGrapple::StaticClass(); \
	USeqAct_AIMove::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_AIMoveNative; \
	USeqAct_AIStealthTracker::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_AIStealthTrackerNative; \
	USeqAct_BargeAddRocking::StaticClass(); \
	USeqAct_BrumakControl::StaticClass(); \
	USeqAct_CauseExplosion::StaticClass(); \
	USeqAct_CineCleanWorldPost::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_CineCleanWorldPostNative; \
	USeqAct_CineCleanWorldPre::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_CineCleanWorldPreNative; \
	USeqAct_ControlGearsMovie::StaticClass(); \
	USeqAct_Countdown::StaticClass(); \
	USeqAct_CringePawn::StaticClass(); \
	USeqAct_DisplayPathChoice::StaticClass(); \
	USeqAct_DoorControl::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_DoorControlNative; \
	USeqAct_DrawMessage::StaticClass(); \
	USeqAct_DummyWeaponFire::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_DummyWeaponFireNative; \
	USeqAct_FlockSpawner::StaticClass(); \
	USeqAct_GearAchievementUnlock::StaticClass(); \
	USeqAct_GearPlayerAnim::StaticClass(); \
	USeqAct_GearUnlockableUnlock::StaticClass(); \
	USeqAct_GearUseCommLink::StaticClass(); \
	USeqAct_GetMPGameType::StaticClass(); \
	USeqAct_GetPlayerTeam::StaticClass(); \
	USeqAct_GetTeammate::StaticClass(); \
	USeqAct_KillPlayers::StaticClass(); \
	USeqAct_Leviathan_Mouth::StaticClass(); \
	USeqAct_ManageObjectives::StaticClass(); \
	USeqAct_ManagePOI::StaticClass(); \
	USeqAct_ManageTutorials::StaticClass(); \
	USeqAct_ModifyProperty::StaticClass(); \
	USeqAct_MPHealthManipulator::StaticClass(); \
	USeqAct_Mutate::StaticClass(); \
	USeqAct_NotifyCoopSplit::StaticClass(); \
	USeqAct_PlayCinematic::StaticClass(); \
	USeqAct_PopupCoverControl::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_PopupCoverControlNative; \
	USeqAct_PrecacheResources::StaticClass(); \
	USeqAct_RainCloudTurnOnOff::StaticClass(); \
	USeqAct_RainDropsGroundTurnOnOff::StaticClass(); \
	USeqAct_RainDropsSelfTurnOnOff::StaticClass(); \
	USeqAct_RemoveDroppedPickups::StaticClass(); \
	USeqAct_RetrieveVariable::StaticClass(); \
	USeqAct_SetGUDSFrequency::StaticClass(); \
	USeqAct_SetWeather::StaticClass(); \
	USeqAct_Skorge_ChargeAndDuel::StaticClass(); \
	USeqAct_Speak::StaticClass(); \
	USeqAct_SpectatorCameraPath::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqAct_SpectatorCameraPathNative; \
	USeqAct_StoreVariable::StaticClass(); \
	USeqAct_StreamByURL::StaticClass(); \
	USeqAct_ToggleConversation::StaticClass(); \
	USeqAct_ToggleConversationCamera::StaticClass(); \
	USeqAct_ToggleGUDSStreaming::StaticClass(); \
	USeqAct_ToggleHOD::StaticClass(); \
	USeqAct_TravelMap::StaticClass(); \
	USeqAct_TriggerGUDSEvent::StaticClass(); \
	USeqAct_TriggerTracker::StaticClass(); \
	USeqAct_WaitForGearsMovieComplete::StaticClass(); \
	USeqCond_GetDifficulty::StaticClass(); \
	USeqCond_HasCOGTag::StaticClass(); \
	USeqCond_HasDiscoverable::StaticClass(); \
	USeqCond_HasInventory::StaticClass(); \
	USeqCond_IsCoop::StaticClass(); \
	USeqCond_IsInCover::StaticClass(); \
	USeqCond_IsPreviewGrenade::StaticClass(); \
	USeqCond_IsStunned::StaticClass(); \
	USeqCond_PawnType::StaticClass(); \
	USeqEvt_ChainsawInteraction::StaticClass(); \
	USeqEvt_CoopTouch::StaticClass(); \
	USeqEvt_EnteredCover::StaticClass(); \
	USeqEvt_EnteredRevivalState::StaticClass(); \
	USeqEvt_GearTouch::StaticClass(); \
	USeqEvt_Input::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUSeqEvt_InputNative; \
	USeqEvt_Interaction::StaticClass(); \
	USeqEvt_LeftCover::StaticClass(); \
	USeqEvt_MPRoundEnd::StaticClass(); \
	USeqEvt_MPRoundStart::StaticClass(); \
	USeqEvt_WDODamageModApplied::StaticClass(); \
	USeqVar_Anya::StaticClass(); \
	USeqVar_Dom::StaticClass(); \
	USeqVar_GenericRemoteSpeaker::StaticClass(); \
	USeqVar_Marcus::StaticClass(); \
	ATriggerTrackerHelper::StaticClass(); \

#endif // GEARGAME_SEQUENCE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AGearControlHelper) GGearGameAGearControlHelperNatives[] = 
{ 
	MAP_NATIVE(AGearControlHelper,execSetBlockingVolumeCollision)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,AGearControlHelper);

NATIVE_INFO(USeqAct_AIFactory) GGearGameUSeqAct_AIFactoryNatives[] = 
{ 
	MAP_NATIVE(USeqAct_AIFactory,execCanSpawnAtLocation)
	MAP_NATIVE(USeqAct_AIFactory,execNotifyCombatEntered)
	MAP_NATIVE(USeqAct_AIFactory,execNotifySpawnerDisabled)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_AIFactory);

NATIVE_INFO(USeqAct_AIMove) GGearGameUSeqAct_AIMoveNatives[] = 
{ 
	MAP_NATIVE(USeqAct_AIMove,execReachedGoal)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_AIMove);

NATIVE_INFO(USeqAct_AIStealthTracker) GGearGameUSeqAct_AIStealthTrackerNatives[] = 
{ 
	MAP_NATIVE(USeqAct_AIStealthTracker,execGetTrackerTargetPairIndices)
	MAP_NATIVE(USeqAct_AIStealthTracker,execUpdateLayerDelegate_ByTime)
	MAP_NATIVE(USeqAct_AIStealthTracker,execCheckLayerDelegate_ByBehavior)
	MAP_NATIVE(USeqAct_AIStealthTracker,execCheckLayerDelegate_ByRange)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_AIStealthTracker);

NATIVE_INFO(USeqAct_CineCleanWorldPost) GGearGameUSeqAct_CineCleanWorldPostNatives[] = 
{ 
	MAP_NATIVE(USeqAct_CineCleanWorldPost,execRestoreGUDsStreaming)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_CineCleanWorldPost);

NATIVE_INFO(USeqAct_CineCleanWorldPre) GGearGameUSeqAct_CineCleanWorldPreNatives[] = 
{ 
	MAP_NATIVE(USeqAct_CineCleanWorldPre,execTurnOffAndFlushGUDs)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_CineCleanWorldPre);

NATIVE_INFO(USeqAct_DoorControl) GGearGameUSeqAct_DoorControlNatives[] = 
{ 
	MAP_NATIVE(USeqAct_DoorControl,execCanRetryDoor)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_DoorControl);

NATIVE_INFO(USeqAct_DummyWeaponFire) GGearGameUSeqAct_DummyWeaponFireNatives[] = 
{ 
	MAP_NATIVE(USeqAct_DummyWeaponFire,execAlignWeaponMuzzleToActor)
	MAP_NATIVE(USeqAct_DummyWeaponFire,execSpawnDummyWeapon)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_DummyWeaponFire);

NATIVE_INFO(USeqAct_PopupCoverControl) GGearGameUSeqAct_PopupCoverControlNatives[] = 
{ 
	MAP_NATIVE(USeqAct_PopupCoverControl,execCanRetryPopup)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_PopupCoverControl);

NATIVE_INFO(USeqAct_SpectatorCameraPath) GGearGameUSeqAct_SpectatorCameraPathNatives[] = 
{ 
	MAP_NATIVE(USeqAct_SpectatorCameraPath,execUpdateCameraPosition)
	MAP_NATIVE(USeqAct_SpectatorCameraPath,execResetToStartingPosition)
	MAP_NATIVE(USeqAct_SpectatorCameraPath,execGetAssociatedCameraActor)
	MAP_NATIVE(USeqAct_SpectatorCameraPath,execMoveToPrevStop)
	MAP_NATIVE(USeqAct_SpectatorCameraPath,execMoveToNextStop)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqAct_SpectatorCameraPath);

NATIVE_INFO(USeqEvt_Input) GGearGameUSeqEvt_InputNatives[] = 
{ 
	MAP_NATIVE(USeqEvt_Input,execCheckInputActivate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,USeqEvt_Input);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,DoorControlHelper,BlockedWhenShut)
VERIFY_CLASS_SIZE_NODIE(ADoorControlHelper)
VERIFY_CLASS_OFFSET_NODIE(A,GearControlHelper,SeqObj)
VERIFY_CLASS_SIZE_NODIE(AGearControlHelper)
VERIFY_CLASS_OFFSET_NODIE(A,PopupCoverControlHelper,BlockedWhenUp)
VERIFY_CLASS_OFFSET_NODIE(A,PopupCoverControlHelper,BlockedWhenDown)
VERIFY_CLASS_SIZE_NODIE(APopupCoverControlHelper)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIFactory,InventoryTypeNames)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIFactory,RoundToCountSpawnsInHUD)
VERIFY_CLASS_SIZE_NODIE(USeqAct_AIFactory)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIGrapple,GrappleTargets)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIGrapple,GrappleRopeClass)
VERIFY_CLASS_SIZE_NODIE(USeqAct_AIGrapple)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIMove,TetherDistance)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIMove,AvailableTethers)
VERIFY_CLASS_SIZE_NODIE(USeqAct_AIMove)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIStealthTracker,Layers)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_AIStealthTracker,__OnCheckStealthLayer__Delegate)
VERIFY_CLASS_SIZE_NODIE(USeqAct_AIStealthTracker)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_BargeAddRocking,PitchVel)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_BargeAddRocking,RollVel)
VERIFY_CLASS_SIZE_NODIE(USeqAct_BargeAddRocking)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_BrumakControl,TargetList)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_BrumakControl,FireDuration)
VERIFY_CLASS_SIZE_NODIE(USeqAct_BrumakControl)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_CauseExplosion,CustomExplosionTemplate)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_CauseExplosion,ProjectileExplosionToEmulate)
VERIFY_CLASS_SIZE_NODIE(USeqAct_CauseExplosion)
VERIFY_CLASS_SIZE_NODIE(USeqAct_CineCleanWorldPost)
VERIFY_CLASS_SIZE_NODIE(USeqAct_CineCleanWorldPre)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ControlGearsMovie,MovieName)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ControlGearsMovie)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Countdown,TotalCountdownInSeconds)
VERIFY_CLASS_SIZE_NODIE(USeqAct_Countdown)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_CringePawn,CringeRadius)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_CringePawn,CringeDuration)
VERIFY_CLASS_SIZE_NODIE(USeqAct_CringePawn)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DisplayPathChoice,TitleLookup)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DisplayPathChoice,StingerSound)
VERIFY_CLASS_SIZE_NODIE(USeqAct_DisplayPathChoice)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DoorControl,NextRetryTime)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DoorControl,Helper)
VERIFY_CLASS_SIZE_NODIE(USeqAct_DoorControl)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DrawMessage,MessageText)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DrawMessage,DisplayTimeSeconds)
VERIFY_CLASS_SIZE_NODIE(USeqAct_DrawMessage)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DummyWeaponFire,ShotsToFire)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_DummyWeaponFire,MultipleOriginParams)
VERIFY_CLASS_SIZE_NODIE(USeqAct_DummyWeaponFire)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_FlockSpawner,SpawnedWeapon)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_FlockSpawner,OverlapDeathRadius)
VERIFY_CLASS_SIZE_NODIE(USeqAct_FlockSpawner)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearAchievementUnlock,AchievementMap)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearAchievementUnlock,Achievement)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GearAchievementUnlock)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearPlayerAnim,PlayMode)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearPlayerAnim,BlendOutTime)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GearPlayerAnim)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearUnlockableUnlock,UnlockableMap)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearUnlockableUnlock,Unlockable)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GearUnlockableUnlock)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearUseCommLink,SingleLineSound)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GearUseCommLink,AbortabilityDelayRemaining)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GearUseCommLink)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GetMPGameType,CurrentGameClass)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GetMPGameType)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GetPlayerTeam)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_GetTeammate,RequiredInventory)
VERIFY_CLASS_SIZE_NODIE(USeqAct_GetTeammate)
VERIFY_CLASS_SIZE_NODIE(USeqAct_KillPlayers)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Leviathan_Mouth,Victims)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Leviathan_Mouth,NumTentaclesToHurtToOpenMouth)
VERIFY_CLASS_SIZE_NODIE(USeqAct_Leviathan_Mouth)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManageObjectives,ObjectiveName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManageObjectives,ObjectiveDesc)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ManageObjectives)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManagePOI,POI_DisplayName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManagePOI,POI)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ManagePOI)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManageTutorials,Tutorial_Type)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ManageTutorials,Objective_Desc)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ManageTutorials)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_ModifyProperty,Properties)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ModifyProperty)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_MPHealthManipulator,Health)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_MPHealthManipulator,HealthRegenPerSecond)
VERIFY_CLASS_SIZE_NODIE(USeqAct_MPHealthManipulator)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Mutate,MutateType)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Mutate,PawnClass)
VERIFY_CLASS_SIZE_NODIE(USeqAct_Mutate)
VERIFY_CLASS_SIZE_NODIE(USeqAct_NotifyCoopSplit)
VERIFY_CLASS_SIZE_NODIE(USeqAct_PlayCinematic)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_PopupCoverControl,NextRetryTime)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_PopupCoverControl,Helper)
VERIFY_CLASS_SIZE_NODIE(USeqAct_PopupCoverControl)
VERIFY_CLASS_SIZE_NODIE(USeqAct_PrecacheResources)
VERIFY_CLASS_SIZE_NODIE(USeqAct_RainCloudTurnOnOff)
VERIFY_CLASS_SIZE_NODIE(USeqAct_RainDropsGroundTurnOnOff)
VERIFY_CLASS_SIZE_NODIE(USeqAct_RainDropsSelfTurnOnOff)
VERIFY_CLASS_SIZE_NODIE(USeqAct_RemoveDroppedPickups)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_RetrieveVariable,VariableName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_RetrieveVariable,FloatData)
VERIFY_CLASS_SIZE_NODIE(USeqAct_RetrieveVariable)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_SetGUDSFrequency,GlobalFrequencyMultiplier)
VERIFY_CLASS_SIZE_NODIE(USeqAct_SetGUDSFrequency)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_SetWeather,RainEmitterHeight)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_SetWeather,HailEmitterHeight)
VERIFY_CLASS_SIZE_NODIE(USeqAct_SetWeather)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Skorge_ChargeAndDuel,StartPosition)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Skorge_ChargeAndDuel,DuelResult)
VERIFY_CLASS_SIZE_NODIE(USeqAct_Skorge_ChargeAndDuel)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Speak,ExtraHeadTurnTowardTime)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_Speak,DBNOSpeakerToWaitFor)
VERIFY_CLASS_SIZE_NODIE(USeqAct_Speak)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_SpectatorCameraPath,TravelTimeBetweenStops)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_SpectatorCameraPath,InterpTimeToNextStop)
VERIFY_CLASS_SIZE_NODIE(USeqAct_SpectatorCameraPath)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_StoreVariable,VariableName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_StoreVariable,FloatData)
VERIFY_CLASS_SIZE_NODIE(USeqAct_StoreVariable)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_StreamByURL,Stage)
VERIFY_CLASS_SIZE_NODIE(USeqAct_StreamByURL)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ToggleConversation)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ToggleConversationCamera)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ToggleGUDSStreaming)
VERIFY_CLASS_SIZE_NODIE(USeqAct_ToggleHOD)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TravelMap,MapName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TravelMap,Parameters)
VERIFY_CLASS_SIZE_NODIE(USeqAct_TravelMap)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TriggerGUDSEvent,EventID)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TriggerGUDSEvent,DelaySeconds)
VERIFY_CLASS_SIZE_NODIE(USeqAct_TriggerGUDSEvent)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TriggerTracker,BackTrigVol)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_TriggerTracker,InfoList)
VERIFY_CLASS_SIZE_NODIE(USeqAct_TriggerTracker)
VERIFY_CLASS_OFFSET_NODIE(U,SeqAct_WaitForGearsMovieComplete,MovieName)
VERIFY_CLASS_SIZE_NODIE(USeqAct_WaitForGearsMovieComplete)
VERIFY_CLASS_SIZE_NODIE(USeqCond_GetDifficulty)
VERIFY_CLASS_SIZE_NODIE(USeqCond_HasCOGTag)
VERIFY_CLASS_SIZE_NODIE(USeqCond_HasDiscoverable)
VERIFY_CLASS_OFFSET_NODIE(U,SeqCond_HasInventory,Players)
VERIFY_CLASS_OFFSET_NODIE(U,SeqCond_HasInventory,InventoryTypes)
VERIFY_CLASS_SIZE_NODIE(USeqCond_HasInventory)
VERIFY_CLASS_SIZE_NODIE(USeqCond_IsCoop)
VERIFY_CLASS_SIZE_NODIE(USeqCond_IsInCover)
VERIFY_CLASS_SIZE_NODIE(USeqCond_IsPreviewGrenade)
VERIFY_CLASS_SIZE_NODIE(USeqCond_IsStunned)
VERIFY_CLASS_OFFSET_NODIE(U,SeqCond_PawnType,CheckPawn)
VERIFY_CLASS_OFFSET_NODIE(U,SeqCond_PawnType,PawnTypes)
VERIFY_CLASS_SIZE_NODIE(USeqCond_PawnType)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_ChainsawInteraction)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_CoopTouch)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_EnteredCover)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_EnteredRevivalState)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_GearTouch,RoadieRunFilterType)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_GearTouch,CoverStatusFilterType)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_GearTouch)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_Input,ButtonNames)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_Input,RegisterType)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_Input)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_Interaction,InteractDistance)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_Interaction,InteractAction)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_Interaction)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_LeftCover)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_MPRoundEnd)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_MPRoundStart)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_WDODamageModApplied,SubObjectName)
VERIFY_CLASS_OFFSET_NODIE(U,SeqEvt_WDODamageModApplied,DamageModName)
VERIFY_CLASS_SIZE_NODIE(USeqEvt_WDODamageModApplied)
VERIFY_CLASS_SIZE_NODIE(USeqVar_Anya)
VERIFY_CLASS_SIZE_NODIE(USeqVar_Dom)
VERIFY_CLASS_SIZE_NODIE(USeqVar_GenericRemoteSpeaker)
VERIFY_CLASS_SIZE_NODIE(USeqVar_Marcus)
VERIFY_CLASS_OFFSET_NODIE(A,TriggerTrackerHelper,SeqObj)
VERIFY_CLASS_SIZE_NODIE(ATriggerTrackerHelper)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
