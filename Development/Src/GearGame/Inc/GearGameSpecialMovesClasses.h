/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_GEARGAME_SPECIALMOVES_ENUMS
#define INCLUDED_GEARGAME_SPECIALMOVES_ENUMS 1

enum eMoveType
{
    EMT_Jump                =0,
    EMT_Fall                =1,
    EMT_Land                =2,
    EMT_MAX                 =3,
};

#endif // !INCLUDED_GEARGAME_SPECIALMOVES_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName GEARGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(DoingJumpToFallPhysicsTransition)
AUTOGENERATE_NAME(FinishedBlendToGetUp)
AUTOGENERATE_NAME(GetAimOffsetOverride)
AUTOGENERATE_NAME(IsMirrorTransitionSafe)
AUTOGENERATE_NAME(JoystickHeldLongEnough)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(MeleeDamageTo)
AUTOGENERATE_NAME(OnMirrorTransitionSafeNotifyInternal)
AUTOGENERATE_NAME(PlayEndAnimation)
AUTOGENERATE_NAME(ReachedPrecisePosition)
AUTOGENERATE_NAME(RigidBodyWorldCollision)
AUTOGENERATE_NAME(StartGrabAnim)

#ifndef NAMES_ONLY

#ifndef INCLUDED_GEARGAME_SPECIALMOVES_CLASSES
#define INCLUDED_GEARGAME_SPECIALMOVES_CLASSES 1

struct GearSpecialMove_eventRigidBodyWorldCollision_Parms
{
    class UPrimitiveComponent* HitComponent;
    class UPrimitiveComponent* OtherComponent;
    FCollisionImpactData RigidCollisionData;
    GearSpecialMove_eventRigidBodyWorldCollision_Parms(EEventParm)
    : RigidCollisionData(EC_EventParm)
    {
    }
};
struct GearSpecialMove_eventGetAimOffsetOverride_Parms
{
    FRotator DeltaRot;
    UBOOL ReturnValue;
    GearSpecialMove_eventGetAimOffsetOverride_Parms(EEventParm)
    {
    }
};
struct GearSpecialMove_eventReachedPrecisePosition_Parms
{
    GearSpecialMove_eventReachedPrecisePosition_Parms(EEventParm)
    {
    }
};
struct GearSpecialMove_eventOnMirrorTransitionSafeNotifyInternal_Parms
{
    GearSpecialMove_eventOnMirrorTransitionSafeNotifyInternal_Parms(EEventParm)
    {
    }
};
struct GearSpecialMove_eventIsMirrorTransitionSafe_Parms
{
    UBOOL ReturnValue;
    GearSpecialMove_eventIsMirrorTransitionSafe_Parms(EEventParm)
    {
    }
};
class UGearSpecialMove : public UObject
{
public:
    //## BEGIN PROPS GearSpecialMove
    class AGearPawn* PawnOwner;
    class AGearPC* PCOwner;
    class AGearAI* AIOwner;
    class UClass* DefaultAICommand;
    class UAICmd_Base_PushedBySpecialMove* AICommand;
    FLOAT SpeedModifier;
    FLOAT HeavyWeaponSpeedModifier;
    FLOAT GravityScale;
    BITFIELD bCanFireWeapon:1;
    BITFIELD bOnlyInteractionPawnCanDamageMe:1;
    BITFIELD bShouldAbortWeaponReload:1;
    BITFIELD bLockPawnRotation:1;
    BITFIELD bPawnRotationLocked:1;
    BITFIELD bDisableMovement:1;
    BITFIELD bMovementDisabled:1;
    BITFIELD bDisableTurnInPlace:1;
    BITFIELD bBreakFromCover:1;
    BITFIELD bBreakFromCoverOnEnd:1;
    BITFIELD bDisableLook:1;
    BITFIELD bDisableCollision:1;
    BITFIELD bDisablePhysics:1;
    BITFIELD bDisableLeftHandIK:1;
    BITFIELD bDisablePOIs:1;
    BITFIELD bNoStoppingPower:1;
    BITFIELD bCoverExitMirrorTransition:1;
    BITFIELD bMirrorTransitionSafeNotify:1;
    BITFIELD bCameraFocusOnPawn:1;
    BITFIELD bDisableAI:1;
    BITFIELD bLastCanDoSpecialMove:1;
    BITFIELD bReachPreciseDestination:1;
    BITFIELD bReachedPreciseDestination:1;
    BITFIELD bReachPreciseRotation:1;
    BITFIELD bReachedPreciseRotation:1;
    BITFIELD bForcePrecisePosition:1;
    BITFIELD bForwardFirePressedNotification:1;
    BITFIELD bCheckForGlobalInterrupts:1;
    BITFIELD bPlayingCameraAnim:1;
    BITFIELD bConformMeshRotationToFloor:1;
    BITFIELD bConformMeshTranslationToFloor:1;
    BITFIELD bRestoreMovementAfterMove:1;
    FLOAT DamageScale;
    class AActor* AlignToActor;
    FLOAT MotionBlurAmount;
    struct FActionInfo Action;
    FLOAT LastCanDoSpecialMoveTime;
    FVector PreciseDestination;
    class AActor* PreciseDestBase;
    FVector PreciseDestRelOffset;
    FLOAT PreciseRotationInterpolationTime;
    FRotator PreciseRotation;
    FLOAT SceneRatingValue;
    FLOAT MaxConformToFloorMeshRotation;
    FLOAT MaxConformToFloorMeshTranslation;
    struct FBasedPosition OldFocalPoint;
    FVector OldAccel;
    //## END PROPS GearSpecialMove

    virtual FLOAT GetSpeedModifier();
    void SetReachPreciseDestination(FVector DestinationToReach,UBOOL bCancel=FALSE);
    void SetFacePreciseRotation(FRotator RotationToFace,FLOAT InterpolationTime);
    void ForcePawnRotation(class APawn* P,FRotator NewRotation);
    FVector WorldToRelativeOffset(FRotator InRotation,FVector WorldSpaceOffset) const;
    FVector RelativeToWorldOffset(FRotator InRotation,FVector RelativeSpaceOffset) const;
    virtual void SetBasedPosition(struct FBasedPosition& BP,FVector inLoc);
    virtual FVector GetBasedPosition(struct FBasedPosition& BP);
    DECLARE_FUNCTION(execGetSpeedModifier)
    {
        P_FINISH;
        *(FLOAT*)Result=GetSpeedModifier();
    }
    DECLARE_FUNCTION(execSetReachPreciseDestination)
    {
        P_GET_STRUCT(FVector,DestinationToReach);
        P_GET_UBOOL_OPTX(bCancel,FALSE);
        P_FINISH;
        SetReachPreciseDestination(DestinationToReach,bCancel);
    }
    DECLARE_FUNCTION(execSetFacePreciseRotation)
    {
        P_GET_STRUCT(FRotator,RotationToFace);
        P_GET_FLOAT(InterpolationTime);
        P_FINISH;
        SetFacePreciseRotation(RotationToFace,InterpolationTime);
    }
    DECLARE_FUNCTION(execForcePawnRotation)
    {
        P_GET_OBJECT(APawn,P);
        P_GET_STRUCT(FRotator,NewRotation);
        P_FINISH;
        ForcePawnRotation(P,NewRotation);
    }
    DECLARE_FUNCTION(execWorldToRelativeOffset)
    {
        P_GET_STRUCT(FRotator,InRotation);
        P_GET_STRUCT(FVector,WorldSpaceOffset);
        P_FINISH;
        *(FVector*)Result=WorldToRelativeOffset(InRotation,WorldSpaceOffset);
    }
    DECLARE_FUNCTION(execRelativeToWorldOffset)
    {
        P_GET_STRUCT(FRotator,InRotation);
        P_GET_STRUCT(FVector,RelativeSpaceOffset);
        P_FINISH;
        *(FVector*)Result=RelativeToWorldOffset(InRotation,RelativeSpaceOffset);
    }
    DECLARE_FUNCTION(execSetBasedPosition)
    {
        P_GET_STRUCT_REF(struct FBasedPosition,BP);
        P_GET_STRUCT(FVector,inLoc);
        P_FINISH;
        SetBasedPosition(BP,inLoc);
    }
    DECLARE_FUNCTION(execGetBasedPosition)
    {
        P_GET_STRUCT_REF(struct FBasedPosition,BP);
        P_FINISH;
        *(FVector*)Result=GetBasedPosition(BP);
    }
    void eventRigidBodyWorldCollision(class UPrimitiveComponent* HitComponent,class UPrimitiveComponent* OtherComponent,const FCollisionImpactData& RigidCollisionData)
    {
        GearSpecialMove_eventRigidBodyWorldCollision_Parms Parms(EC_EventParm);
        Parms.HitComponent=HitComponent;
        Parms.OtherComponent=OtherComponent;
        Parms.RigidCollisionData=RigidCollisionData;
        ProcessEvent(FindFunctionChecked(GEARGAME_RigidBodyWorldCollision),&Parms);
    }
    UBOOL eventGetAimOffsetOverride(FRotator& DeltaRot)
    {
        GearSpecialMove_eventGetAimOffsetOverride_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.DeltaRot=DeltaRot;
        ProcessEvent(FindFunctionChecked(GEARGAME_GetAimOffsetOverride),&Parms);
        DeltaRot=Parms.DeltaRot;
        return Parms.ReturnValue;
    }
    void eventReachedPrecisePosition()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_ReachedPrecisePosition),NULL);
    }
    void eventOnMirrorTransitionSafeNotifyInternal()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_OnMirrorTransitionSafeNotifyInternal),NULL);
    }
    UBOOL eventIsMirrorTransitionSafe()
    {
        GearSpecialMove_eventIsMirrorTransitionSafe_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(GEARGAME_IsMirrorTransitionSafe),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(UGearSpecialMove,UObject,0|CLASS_Config,GearGame)
    static const TCHAR* StaticConfigName() {return TEXT("Pawn");}

	virtual void PrePerformPhysics(FLOAT DeltaTime);
	virtual void PostProcessPhysics(FLOAT DeltaTime) {}
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_BasePawnToPawnInteractionLeader : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_BasePawnToPawnInteractionLeader
    class AGearPawn* Follower;
    BYTE FollowerSpecialMove;
    //## END PROPS GSM_BasePawnToPawnInteractionLeader

    DECLARE_CLASS(UGSM_BasePawnToPawnInteractionLeader,UGearSpecialMove,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_BasePawnToPawnInteractionLeader)
};

class UGSM_GrabWretch : public UGSM_BasePawnToPawnInteractionLeader
{
public:
    //## BEGIN PROPS GSM_GrabWretch
    struct FBodyStance BS_LastPlayedAnimation;
    struct FBodyStance BS_GrabAnim;
    struct FBodyStance BS_GrabIdleAnim;
    struct FBodyStance BS_ThrowWretch;
    BITFIELD bIsSynchronized:1;
    BITFIELD bWaitingForWeaponToBeHolstered:1;
    BITFIELD bWaitingForFollowerToBeInPosition:1;
    BITFIELD bWaitingForLeaderToBeInPosition:1;
    FVector AlignmentOffset;
    FVector LeaderLoc;
    FVector FollowerLoc;
    FRotator FacingRot;
    FLOAT ThrowMagnitude;
    //## END PROPS GSM_GrabWretch

    void PrePositioning_MRLeader_RFollower(class AGearPawn* ALeader,class AGearPawn* AFollower,FVector& out_LeaderLoc,FVector& out_FollowerLoc,FRotator& out_FacingRot);
    DECLARE_FUNCTION(execPrePositioning_MRLeader_RFollower)
    {
        P_GET_OBJECT(AGearPawn,ALeader);
        P_GET_OBJECT(AGearPawn,AFollower);
        P_GET_STRUCT_REF(FVector,out_LeaderLoc);
        P_GET_STRUCT_REF(FVector,out_FollowerLoc);
        P_GET_STRUCT_REF(FRotator,out_FacingRot);
        P_FINISH;
        PrePositioning_MRLeader_RFollower(ALeader,AFollower,out_LeaderLoc,out_FollowerLoc,out_FacingRot);
    }
    DECLARE_CLASS(UGSM_GrabWretch,UGSM_BasePawnToPawnInteractionLeader,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_GrabWretch)
};

class UGSM_BasePlaySingleAnim : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_BasePlaySingleAnim
    struct FBodyStance BS_Animation;
    FLOAT BlendInTime;
    FLOAT BlendOutTime;
    TArrayNoInit<struct FCameraBoneAnimation> SpecialMoveCameraBoneAnims;
    //## END PROPS GSM_BasePlaySingleAnim

    DECLARE_ABSTRACT_CLASS(UGSM_BasePlaySingleAnim,UGearSpecialMove,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_BasePlaySingleAnim)
};

class UGSM_Brumak_BasePlaySingleAnim : public UGSM_BasePlaySingleAnim
{
public:
    //## BEGIN PROPS GSM_Brumak_BasePlaySingleAnim
    class AGearPawn_LocustBrumakBase* Brumak;
    FName NearbyPlayerSynchedCameraAnimName;
    FVector2D NearbyPlayerSynchedCameraAnimRadius;
    FLOAT NearbyPlayerSynchedCameraAnimScale;
    BITFIELD bCamShakeDampenWhenTargeting:1;
    //## END PROPS GSM_Brumak_BasePlaySingleAnim

    DECLARE_ABSTRACT_CLASS(UGSM_Brumak_BasePlaySingleAnim,UGSM_BasePlaySingleAnim,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_Brumak_BasePlaySingleAnim)
};

struct GSM_Brumak_MeleeAttack_eventMeleeDamageTo_Parms
{
    class AActor* Other;
    FVector HitLocation;
    GSM_Brumak_MeleeAttack_eventMeleeDamageTo_Parms(EEventParm)
    {
    }
};
class UGSM_Brumak_MeleeAttack : public UGSM_Brumak_BasePlaySingleAnim
{
public:
    //## BEGIN PROPS GSM_Brumak_MeleeAttack
    FVector RHand_OldLocation;
    FVector LHand_OldLocation;
    BITFIELD bDamageActive:1;
    BITFIELD bDebugLines:1;
    //## END PROPS GSM_Brumak_MeleeAttack

    void eventMeleeDamageTo(class AActor* Other,FVector HitLocation)
    {
        GSM_Brumak_MeleeAttack_eventMeleeDamageTo_Parms Parms(EC_EventParm);
        Parms.Other=Other;
        Parms.HitLocation=HitLocation;
        ProcessEvent(FindFunctionChecked(GEARGAME_MeleeDamageTo),&Parms);
    }
    DECLARE_CLASS(UGSM_Brumak_MeleeAttack,UGSM_Brumak_BasePlaySingleAnim,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(float DeltaTime);
};

struct GSM_Brumak_OverlayBite_eventMeleeDamageTo_Parms
{
    class AActor* Other;
    FVector HitLocation;
    GSM_Brumak_OverlayBite_eventMeleeDamageTo_Parms(EEventParm)
    {
    }
};
class UGSM_Brumak_OverlayBite : public UGSM_Brumak_BasePlaySingleAnim
{
public:
    //## BEGIN PROPS GSM_Brumak_OverlayBite
    FVector Mouth_OldLocation;
    FName JawSocketName;
    BITFIELD bDamageActive:1;
    BITFIELD bDebugLines:1;
    //## END PROPS GSM_Brumak_OverlayBite

    void eventMeleeDamageTo(class AActor* Other,FVector HitLocation)
    {
        GSM_Brumak_OverlayBite_eventMeleeDamageTo_Parms Parms(EC_EventParm);
        Parms.Other=Other;
        Parms.HitLocation=HitLocation;
        ProcessEvent(FindFunctionChecked(GEARGAME_MeleeDamageTo),&Parms);
    }
    DECLARE_CLASS(UGSM_Brumak_OverlayBite,UGSM_Brumak_BasePlaySingleAnim,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(float DeltaTime);
};

struct GSM_BaseVariableFall_eventLanded_Parms
{
    FLOAT DistanceToImpact;
    FLOAT TimeToImpact;
    GSM_BaseVariableFall_eventLanded_Parms(EEventParm)
    {
    }
};
class UGSM_BaseVariableFall : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_BaseVariableFall
    struct FBodyStance BS_Jump;
    struct FBodyStance BS_Fall;
    struct FBodyStance BS_Land;
    BYTE JumpingPhysics;
    BYTE FallingPhysics;
    BYTE MoveType;
    FLOAT PreImpactTime;
    //## END PROPS GSM_BaseVariableFall

    void eventLanded(FLOAT DistanceToImpact,FLOAT TimeToImpact)
    {
        GSM_BaseVariableFall_eventLanded_Parms Parms(EC_EventParm);
        if(IsProbing(NAME_Landed)) {
        Parms.DistanceToImpact=DistanceToImpact;
        Parms.TimeToImpact=TimeToImpact;
        ProcessEvent(FindFunctionChecked(GEARGAME_Landed),&Parms);
        }
    }
    DECLARE_ABSTRACT_CLASS(UGSM_BaseVariableFall,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

struct GSM_MantleOverCoverBase_eventDoingJumpToFallPhysicsTransition_Parms
{
    GSM_MantleOverCoverBase_eventDoingJumpToFallPhysicsTransition_Parms(EEventParm)
    {
    }
};
class UGSM_MantleOverCoverBase : public UGSM_BaseVariableFall
{
public:
    //## BEGIN PROPS GSM_MantleOverCoverBase
    TArrayNoInit<struct FBodyStance> BSList_Jump;
    TArrayNoInit<struct FBodyStance> BSList_Fall;
    TArrayNoInit<struct FBodyStance> BSList_Land;
    TArrayNoInit<struct FBodyStance> BSList_MirroredJump;
    TArrayNoInit<struct FBodyStance> BSList_MirroredFall;
    TArrayNoInit<struct FBodyStance> BSList_MirroredLand;
    struct FBodyStance BS_PlayedStance;
    INT VariationIndex;
    BITFIELD bCheckForMirrorTransition:1;
    BITFIELD bUsingMirroredVersion:1;
    BITFIELD bJumpToFallPhysicsTransition:1;
    BITFIELD bIsOnASlot:1;
    BITFIELD bAllowTransitionToAMove:1;
    FLOAT CheckForAutoMantleOverFOV;
    FLOAT DefaultMantleDistance;
    FLOAT RootMotionScaleFactor;
    FLOAT JumpToFallTransitionTime;
    FLOAT FallForwardVelocity;
    class AMantlePlaceholderCylinder* PlaceholderCylinder;
    class AMantlePlaceholderCylinder* PlaceholderCylinder2;
    class ACoverLink* CurrentLink;
    class ACoverLink* DestLink;
    class ACoverLink* RightLink;
    class ACoverLink* LeftLink;
    struct FCoverSlot CurrentSlot;
    struct FCoverSlot RightSlot;
    struct FCoverSlot LeftSlot;
    INT CurrentSlotIdx;
    INT RightSlotIdx;
    INT LeftSlotIdx;
    FLOAT CurrentSlotPct;
    struct FBasedPosition StartLoc;
    FVector AccumRootMotionDelta;
    FVector AccumLocationDelta;
    FLOAT MantleDistance;
    struct FBasedPosition MantleStartLoc;
    struct FBasedPosition MantleEndLoc;
    TArrayNoInit<class AGearPawn*> AIsToPushOutOfDestination;
    struct FBasedPosition EstimatedLandingLoc;
    //## END PROPS GSM_MantleOverCoverBase

    virtual FVector GetMantleDir(FVector InStartLoc,FVector InEndLoc);
    virtual FVector GetIdealCameraOrigin();
    DECLARE_FUNCTION(execGetMantleDir)
    {
        P_GET_STRUCT(FVector,InStartLoc);
        P_GET_STRUCT(FVector,InEndLoc);
        P_FINISH;
        *(FVector*)Result=GetMantleDir(InStartLoc,InEndLoc);
    }
    DECLARE_FUNCTION(execGetIdealCameraOrigin)
    {
        P_FINISH;
        *(FVector*)Result=GetIdealCameraOrigin();
    }
    void eventDoingJumpToFallPhysicsTransition()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_DoingJumpToFallPhysicsTransition),NULL);
    }
    DECLARE_ABSTRACT_CLASS(UGSM_MantleOverCoverBase,UGSM_BaseVariableFall,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_MidLvlJumpOver : public UGSM_MantleOverCoverBase
{
public:
    //## BEGIN PROPS GSM_MidLvlJumpOver
    //## END PROPS GSM_MidLvlJumpOver

    DECLARE_CLASS(UGSM_MidLvlJumpOver,UGSM_MantleOverCoverBase,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_MidLvlJumpOver)
};

class UGSM_MantleOverGears : public UGSM_MidLvlJumpOver
{
public:
    //## BEGIN PROPS GSM_MantleOverGears
    FLOAT LastRollTime;
    FLOAT SecondsBetweenRolls;
    FLOAT RollChance;
    BITFIELD bForceMantleVariation:1;
    FLOAT RollCameraOriginZOffset;
    //## END PROPS GSM_MantleOverGears

    virtual FVector GetIdealCameraOrigin();
    DECLARE_CLASS(UGSM_MantleOverGears,UGSM_MidLvlJumpOver,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_MantleOverGears)
};

class UGSM_MantleOverLocust : public UGSM_MidLvlJumpOver
{
public:
    //## BEGIN PROPS GSM_MantleOverLocust
    BITFIELD bForceMantleVariation:1;
    //## END PROPS GSM_MantleOverLocust

    virtual FVector GetIdealCameraOrigin();
    DECLARE_CLASS(UGSM_MantleOverLocust,UGSM_MidLvlJumpOver,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_MantleOverLocust)
};

class UGSM_Berserker_Charge : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_Berserker_Charge
    FRotator DesiredChargeRot;
    BITFIELD bInterpolateRotation:1;
    FLOAT RotationInterpolationTime;
    struct FBodyStance BS_PlayedStance;
    struct FBodyStance BS_Idle2ChargeFd;
    struct FBodyStance BS_Idle2ChargeBd;
    struct FBodyStance BS_Idle2ChargeLt;
    struct FBodyStance BS_Idle2ChargeRt;
    //## END PROPS GSM_Berserker_Charge

    DECLARE_CLASS(UGSM_Berserker_Charge,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

struct GSM_Berserker_Smash_eventMeleeDamageTo_Parms
{
    class AActor* Other;
    FVector HitLocation;
    GSM_Berserker_Smash_eventMeleeDamageTo_Parms(EEventParm)
    {
    }
};
class UGSM_Berserker_Smash : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_Berserker_Smash
    struct FBodyStance BS_Animation;
    FVector RHand_OldLocation;
    FVector LHand_OldLocation;
    BITFIELD bDamageActive:1;
    BITFIELD bDebugLines:1;
    //## END PROPS GSM_Berserker_Smash

    void eventMeleeDamageTo(class AActor* Other,FVector HitLocation)
    {
        GSM_Berserker_Smash_eventMeleeDamageTo_Parms Parms(EC_EventParm);
        Parms.Other=Other;
        Parms.HitLocation=HitLocation;
        ProcessEvent(FindFunctionChecked(GEARGAME_MeleeDamageTo),&Parms);
    }
    DECLARE_CLASS(UGSM_Berserker_Smash,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_CoverSlip : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_CoverSlip
    struct FBodyStance BS_Cov_Mid_Slip;
    struct FBodyStance BS_Cov_Mid_Slip_Mirrored;
    struct FBodyStance BS_Cov_Std_Slip;
    struct FBodyStance BS_Cov_Std_Slip_Mirrored;
    //## END PROPS GSM_CoverSlip

    DECLARE_CLASS(UGSM_CoverSlip,UGearSpecialMove,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_CoverSlip)
};

class UGSM_DBNO : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_DBNO
    struct FBodyStance BS_StumbleAnim;
    FLOAT GuardToggleBlendTime;
    class UParticleSystemComponent* PSC_DBNO_BloodCrawlSpurt;
    FVector DBNOStartLocation;
    BITFIELD bTriggeredCrawlingGUDS:1;
    //## END PROPS GSM_DBNO

    void CheckForClipping();
    DECLARE_FUNCTION(execCheckForClipping)
    {
        P_FINISH;
        CheckForClipping();
    }
    DECLARE_CLASS(UGSM_DBNO,UGearSpecialMove,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_DBNO)
};

class UGSM_Engage : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_Engage
    //## END PROPS GSM_Engage

    FVector GetTargetPosition();
    DECLARE_FUNCTION(execGetTargetPosition)
    {
        P_FINISH;
        *(FVector*)Result=GetTargetPosition();
    }
    DECLARE_CLASS(UGSM_Engage,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

struct GSM_EngageStart_eventStartGrabAnim_Parms
{
    GSM_EngageStart_eventStartGrabAnim_Parms(EEventParm)
    {
    }
};
class UGSM_EngageStart : public UGSM_Engage
{
public:
    //## BEGIN PROPS GSM_EngageStart
    BITFIELD bHasReachedDestination:1;
    //## END PROPS GSM_EngageStart

    void eventStartGrabAnim()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_StartGrabAnim),NULL);
    }
    DECLARE_CLASS(UGSM_EngageStart,UGSM_Engage,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_InteractionPawnLeader_Base : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_InteractionPawnLeader_Base
    class AGearPawn* Follower;
    BYTE FollowerSpecialMove;
    FLOAT InteractionStartTimeOut;
    BITFIELD bAlignPawns:1;
    BITFIELD bAlignFollowerLookSameDirAsMe:1;
    FLOAT AlignDistance;
    //## END PROPS GSM_InteractionPawnLeader_Base

    DECLARE_ABSTRACT_CLASS(UGSM_InteractionPawnLeader_Base,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void PrePerformPhysics(FLOAT DeltaTime);
};

class UGSM_PushButton : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_PushButton
    struct FBodyStance BS_ButtonPush;
    FLOAT ReachTime;
    FLOAT ReachPullBack;
    FLOAT StandPullBack;
    BITFIELD bPlayAnimation:1;
    //## END PROPS GSM_PushButton

    DECLARE_CLASS(UGSM_PushButton,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_PushObject : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_PushObject
    struct FBodyStance BS_PushObject;
    FLOAT ContinuePercent;
    BITFIELD bCanCheckForContinueMove:1;
    BITFIELD bContinueMove:1;
    FLOAT PushAnimLength;
    //## END PROPS GSM_PushObject

    DECLARE_CLASS(UGSM_PushObject,UGearSpecialMove,0|CLASS_Config,GearGame)
    NO_DEFAULT_CONSTRUCTOR(UGSM_PushObject)
};

class UGSM_RaiseShieldOverHead : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_RaiseShieldOverHead
    struct FBodyStance BS_ShieldCoverHeadLoop;
    FLOAT TimeSpentCoveringHead;
    //## END PROPS GSM_RaiseShieldOverHead

    DECLARE_CLASS(UGSM_RaiseShieldOverHead,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual FLOAT GetSpeedModifier();
};

struct GSM_RecoverFromRagdoll_eventFinishedBlendToGetUp_Parms
{
    GSM_RecoverFromRagdoll_eventFinishedBlendToGetUp_Parms(EEventParm)
    {
    }
};
class UGSM_RecoverFromRagdoll : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_RecoverFromRagdoll
    struct FBodyStance BS_GetUpFront;
    struct FBodyStance BS_GetUpBack;
    BITFIELD bBlendToGetUp:1;
    BITFIELD bGetUpFromBack:1;
    BITFIELD bInvertUpDownBoneAxis:1;
    BITFIELD bIgnorePawnsOnRecover:1;
    FLOAT GetUpBlendStartTime;
    FLOAT GetUpBlendTime;
    FLOAT GetUpAnimRate;
    FLOAT GetUpAnimStartPos;
    FName UpDownBoneName;
    BYTE UpDownAxis;
    BYTE OrientationAxis;
    FName OrientationBoneName;
    INT GetUpFromBackYawOffset;
    struct FBodyStance BSToPlay;
    //## END PROPS GSM_RecoverFromRagdoll

    void eventFinishedBlendToGetUp()
    {
        ProcessEvent(FindFunctionChecked(GEARGAME_FinishedBlendToGetUp),NULL);
    }
    DECLARE_CLASS(UGSM_RecoverFromRagdoll,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

class UGSM_RoadieRun : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_RoadieRun
    FLOAT RunAbortTimer;
    TArrayNoInit<class UAudioComponent*> LoopingSounds;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    //## END PROPS GSM_RoadieRun

    virtual FLOAT GetSpeedModifier();
    DECLARE_CLASS(UGSM_RoadieRun,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

struct GSM_Run2Cover_eventJoystickHeldLongEnough_Parms
{
    class AGearPC* PC;
    GSM_Run2Cover_eventJoystickHeldLongEnough_Parms(EEventParm)
    {
    }
};
class UGSM_Run2Cover : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_Run2Cover
    struct FBodyStance BS_TravelAnimation;
    struct FBodyStance BS_TravelAnimationMirrored;
    struct FBodyStance BS_ImpactAnimation;
    FLOAT MinTravelAnimDuration;
    BITFIELD bEnableJoystickMonitoring:1;
    FLOAT HoldingRight;
    FLOAT HoldingLeft;
    FLOAT HoldingBack;
    FLOAT MinHoldTimeToSwitchMirroring;
    FLOAT AISpeedModifier;
    FLOAT ImpactAnimSpeedModifier;
    //## END PROPS GSM_Run2Cover

    void eventJoystickHeldLongEnough(class AGearPC* PC)
    {
        GSM_Run2Cover_eventJoystickHeldLongEnough_Parms Parms(EC_EventParm);
        Parms.PC=PC;
        ProcessEvent(FindFunctionChecked(GEARGAME_JoystickHeldLongEnough),&Parms);
    }
    DECLARE_CLASS(UGSM_Run2Cover,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void	TickSpecialMove(FLOAT DeltaTime);
};

struct GSM_StdLvlSwatTurn_eventPlayEndAnimation_Parms
{
    FLOAT DistanceFromTarget;
    GSM_StdLvlSwatTurn_eventPlayEndAnimation_Parms(EEventParm)
    {
    }
};
class UGSM_StdLvlSwatTurn : public UGearSpecialMove
{
public:
    //## BEGIN PROPS GSM_StdLvlSwatTurn
    struct FBodyStance BS_Std_Start;
    struct FBodyStance BS_Std_End;
    struct FBodyStance BS_Mid_Start;
    struct FBodyStance BS_Mid_End;
    struct FBodyStance BS_PlayedStance;
    FLOAT EndTurnAnimDist;
    BITFIELD bPlayedEndAnim:1;
    struct FCovPosInfo SWATTurnTargetCovInfo;
    struct FBasedPosition SwatTurnDestination;
    FLOAT AnimRateScale;
    struct FCoverInfo DestSlotInfo;
    //## END PROPS GSM_StdLvlSwatTurn

    void eventPlayEndAnimation(FLOAT DistanceFromTarget)
    {
        GSM_StdLvlSwatTurn_eventPlayEndAnimation_Parms Parms(EC_EventParm);
        Parms.DistanceFromTarget=DistanceFromTarget;
        ProcessEvent(FindFunctionChecked(GEARGAME_PlayEndAnimation),&Parms);
    }
    DECLARE_CLASS(UGSM_StdLvlSwatTurn,UGearSpecialMove,0|CLASS_Config,GearGame)
	virtual void TickSpecialMove(FLOAT DeltaTime);
};

#endif // !INCLUDED_GEARGAME_SPECIALMOVES_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execGetBasedPosition);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execSetBasedPosition);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execRelativeToWorldOffset);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execWorldToRelativeOffset);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execForcePawnRotation);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execSetFacePreciseRotation);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execSetReachPreciseDestination);
AUTOGENERATE_FUNCTION(UGearSpecialMove,-1,execGetSpeedModifier);
AUTOGENERATE_FUNCTION(UGSM_DBNO,-1,execCheckForClipping);
AUTOGENERATE_FUNCTION(UGSM_Engage,-1,execGetTargetPosition);
AUTOGENERATE_FUNCTION(UGSM_GrabWretch,-1,execPrePositioning_MRLeader_RFollower);
AUTOGENERATE_FUNCTION(UGSM_MantleOverCoverBase,-1,execGetIdealCameraOrigin);
AUTOGENERATE_FUNCTION(UGSM_MantleOverCoverBase,-1,execGetMantleDir);
AUTOGENERATE_FUNCTION(UGSM_MantleOverGears,-1,execGetIdealCameraOrigin);
AUTOGENERATE_FUNCTION(UGSM_MantleOverLocust,-1,execGetIdealCameraOrigin);
AUTOGENERATE_FUNCTION(UGSM_RoadieRun,-1,execGetSpeedModifier);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef GEARGAME_SPECIALMOVES_NATIVE_DEFS
#define GEARGAME_SPECIALMOVES_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GearGame,UGearSpecialMove);
DECLARE_NATIVE_TYPE(GearGame,UGSM_BasePawnToPawnInteractionLeader);
DECLARE_NATIVE_TYPE(GearGame,UGSM_BasePlaySingleAnim);
DECLARE_NATIVE_TYPE(GearGame,UGSM_BaseVariableFall);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Berserker_Charge);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Berserker_Smash);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Brumak_BasePlaySingleAnim);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Brumak_MeleeAttack);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Brumak_OverlayBite);
DECLARE_NATIVE_TYPE(GearGame,UGSM_CoverSlip);
DECLARE_NATIVE_TYPE(GearGame,UGSM_DBNO);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Engage);
DECLARE_NATIVE_TYPE(GearGame,UGSM_EngageStart);
DECLARE_NATIVE_TYPE(GearGame,UGSM_GrabWretch);
DECLARE_NATIVE_TYPE(GearGame,UGSM_InteractionPawnLeader_Base);
DECLARE_NATIVE_TYPE(GearGame,UGSM_MantleOverCoverBase);
DECLARE_NATIVE_TYPE(GearGame,UGSM_MantleOverGears);
DECLARE_NATIVE_TYPE(GearGame,UGSM_MantleOverLocust);
DECLARE_NATIVE_TYPE(GearGame,UGSM_MidLvlJumpOver);
DECLARE_NATIVE_TYPE(GearGame,UGSM_PushButton);
DECLARE_NATIVE_TYPE(GearGame,UGSM_PushObject);
DECLARE_NATIVE_TYPE(GearGame,UGSM_RaiseShieldOverHead);
DECLARE_NATIVE_TYPE(GearGame,UGSM_RecoverFromRagdoll);
DECLARE_NATIVE_TYPE(GearGame,UGSM_RoadieRun);
DECLARE_NATIVE_TYPE(GearGame,UGSM_Run2Cover);
DECLARE_NATIVE_TYPE(GearGame,UGSM_StdLvlSwatTurn);

#define AUTO_INITIALIZE_REGISTRANTS_GEARGAME_SPECIALMOVES \
	UGearSpecialMove::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGearSpecialMoveNative; \
	UGSM_BasePawnToPawnInteractionLeader::StaticClass(); \
	UGSM_BasePlaySingleAnim::StaticClass(); \
	UGSM_BaseVariableFall::StaticClass(); \
	UGSM_Berserker_Charge::StaticClass(); \
	UGSM_Berserker_Smash::StaticClass(); \
	UGSM_Brumak_BasePlaySingleAnim::StaticClass(); \
	UGSM_Brumak_MeleeAttack::StaticClass(); \
	UGSM_Brumak_OverlayBite::StaticClass(); \
	UGSM_CoverSlip::StaticClass(); \
	UGSM_DBNO::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_DBNONative; \
	UGSM_Engage::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_EngageNative; \
	UGSM_EngageStart::StaticClass(); \
	UGSM_GrabWretch::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_GrabWretchNative; \
	UGSM_InteractionPawnLeader_Base::StaticClass(); \
	UGSM_MantleOverCoverBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_MantleOverCoverBaseNative; \
	UGSM_MantleOverGears::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_MantleOverGearsNative; \
	UGSM_MantleOverLocust::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_MantleOverLocustNative; \
	UGSM_MidLvlJumpOver::StaticClass(); \
	UGSM_PushButton::StaticClass(); \
	UGSM_PushObject::StaticClass(); \
	UGSM_RaiseShieldOverHead::StaticClass(); \
	UGSM_RecoverFromRagdoll::StaticClass(); \
	UGSM_RoadieRun::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGearGameUGSM_RoadieRunNative; \
	UGSM_Run2Cover::StaticClass(); \
	UGSM_StdLvlSwatTurn::StaticClass(); \

#endif // GEARGAME_SPECIALMOVES_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UGearSpecialMove) GGearGameUGearSpecialMoveNatives[] = 
{ 
	MAP_NATIVE(UGearSpecialMove,execGetBasedPosition)
	MAP_NATIVE(UGearSpecialMove,execSetBasedPosition)
	MAP_NATIVE(UGearSpecialMove,execRelativeToWorldOffset)
	MAP_NATIVE(UGearSpecialMove,execWorldToRelativeOffset)
	MAP_NATIVE(UGearSpecialMove,execForcePawnRotation)
	MAP_NATIVE(UGearSpecialMove,execSetFacePreciseRotation)
	MAP_NATIVE(UGearSpecialMove,execSetReachPreciseDestination)
	MAP_NATIVE(UGearSpecialMove,execGetSpeedModifier)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGearSpecialMove);

NATIVE_INFO(UGSM_DBNO) GGearGameUGSM_DBNONatives[] = 
{ 
	MAP_NATIVE(UGSM_DBNO,execCheckForClipping)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_DBNO);

NATIVE_INFO(UGSM_Engage) GGearGameUGSM_EngageNatives[] = 
{ 
	MAP_NATIVE(UGSM_Engage,execGetTargetPosition)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_Engage);

NATIVE_INFO(UGSM_GrabWretch) GGearGameUGSM_GrabWretchNatives[] = 
{ 
	MAP_NATIVE(UGSM_GrabWretch,execPrePositioning_MRLeader_RFollower)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_GrabWretch);

NATIVE_INFO(UGSM_MantleOverCoverBase) GGearGameUGSM_MantleOverCoverBaseNatives[] = 
{ 
	MAP_NATIVE(UGSM_MantleOverCoverBase,execGetIdealCameraOrigin)
	MAP_NATIVE(UGSM_MantleOverCoverBase,execGetMantleDir)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_MantleOverCoverBase);

NATIVE_INFO(UGSM_MantleOverGears) GGearGameUGSM_MantleOverGearsNatives[] = 
{ 
	MAP_NATIVE(UGSM_MantleOverGears,execGetIdealCameraOrigin)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_MantleOverGears);

NATIVE_INFO(UGSM_MantleOverLocust) GGearGameUGSM_MantleOverLocustNatives[] = 
{ 
	MAP_NATIVE(UGSM_MantleOverLocust,execGetIdealCameraOrigin)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_MantleOverLocust);

NATIVE_INFO(UGSM_RoadieRun) GGearGameUGSM_RoadieRunNatives[] = 
{ 
	MAP_NATIVE(UGSM_RoadieRun,execGetSpeedModifier)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GearGame,UGSM_RoadieRun);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,GearSpecialMove,PawnOwner)
VERIFY_CLASS_OFFSET_NODIE(U,GearSpecialMove,OldAccel)
VERIFY_CLASS_SIZE_NODIE(UGearSpecialMove)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BasePawnToPawnInteractionLeader,Follower)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BasePawnToPawnInteractionLeader,FollowerSpecialMove)
VERIFY_CLASS_SIZE_NODIE(UGSM_BasePawnToPawnInteractionLeader)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BasePlaySingleAnim,BS_Animation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BasePlaySingleAnim,SpecialMoveCameraBoneAnims)
VERIFY_CLASS_SIZE_NODIE(UGSM_BasePlaySingleAnim)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BaseVariableFall,BS_Jump)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_BaseVariableFall,PreImpactTime)
VERIFY_CLASS_SIZE_NODIE(UGSM_BaseVariableFall)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Berserker_Charge,DesiredChargeRot)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Berserker_Charge,BS_Idle2ChargeRt)
VERIFY_CLASS_SIZE_NODIE(UGSM_Berserker_Charge)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Berserker_Smash,BS_Animation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Berserker_Smash,LHand_OldLocation)
VERIFY_CLASS_SIZE_NODIE(UGSM_Berserker_Smash)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_BasePlaySingleAnim,Brumak)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_BasePlaySingleAnim,NearbyPlayerSynchedCameraAnimScale)
VERIFY_CLASS_SIZE_NODIE(UGSM_Brumak_BasePlaySingleAnim)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_MeleeAttack,RHand_OldLocation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_MeleeAttack,LHand_OldLocation)
VERIFY_CLASS_SIZE_NODIE(UGSM_Brumak_MeleeAttack)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_OverlayBite,Mouth_OldLocation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Brumak_OverlayBite,JawSocketName)
VERIFY_CLASS_SIZE_NODIE(UGSM_Brumak_OverlayBite)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_CoverSlip,BS_Cov_Mid_Slip)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_CoverSlip,BS_Cov_Std_Slip_Mirrored)
VERIFY_CLASS_SIZE_NODIE(UGSM_CoverSlip)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_DBNO,BS_StumbleAnim)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_DBNO,DBNOStartLocation)
VERIFY_CLASS_SIZE_NODIE(UGSM_DBNO)
VERIFY_CLASS_SIZE_NODIE(UGSM_Engage)
VERIFY_CLASS_SIZE_NODIE(UGSM_EngageStart)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_GrabWretch,BS_LastPlayedAnimation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_GrabWretch,ThrowMagnitude)
VERIFY_CLASS_SIZE_NODIE(UGSM_GrabWretch)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_InteractionPawnLeader_Base,Follower)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_InteractionPawnLeader_Base,AlignDistance)
VERIFY_CLASS_SIZE_NODIE(UGSM_InteractionPawnLeader_Base)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_MantleOverCoverBase,BSList_Jump)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_MantleOverCoverBase,EstimatedLandingLoc)
VERIFY_CLASS_SIZE_NODIE(UGSM_MantleOverCoverBase)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_MantleOverGears,LastRollTime)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_MantleOverGears,RollCameraOriginZOffset)
VERIFY_CLASS_SIZE_NODIE(UGSM_MantleOverGears)
VERIFY_CLASS_SIZE_NODIE(UGSM_MantleOverLocust)
VERIFY_CLASS_SIZE_NODIE(UGSM_MidLvlJumpOver)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_PushButton,BS_ButtonPush)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_PushButton,StandPullBack)
VERIFY_CLASS_SIZE_NODIE(UGSM_PushButton)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_PushObject,BS_PushObject)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_PushObject,PushAnimLength)
VERIFY_CLASS_SIZE_NODIE(UGSM_PushObject)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RaiseShieldOverHead,BS_ShieldCoverHeadLoop)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RaiseShieldOverHead,TimeSpentCoveringHead)
VERIFY_CLASS_SIZE_NODIE(UGSM_RaiseShieldOverHead)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RecoverFromRagdoll,BS_GetUpFront)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RecoverFromRagdoll,BSToPlay)
VERIFY_CLASS_SIZE_NODIE(UGSM_RecoverFromRagdoll)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RoadieRun,RunAbortTimer)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_RoadieRun,LoopingSounds)
VERIFY_CLASS_SIZE_NODIE(UGSM_RoadieRun)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Run2Cover,BS_TravelAnimation)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_Run2Cover,ImpactAnimSpeedModifier)
VERIFY_CLASS_SIZE_NODIE(UGSM_Run2Cover)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_StdLvlSwatTurn,BS_Std_Start)
VERIFY_CLASS_OFFSET_NODIE(U,GSM_StdLvlSwatTurn,DestSlotInfo)
VERIFY_CLASS_SIZE_NODIE(UGSM_StdLvlSwatTurn)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
