/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS
#define INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS 1


#endif // !INCLUDED_ONLINESUBSYSTEMLIVE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ONLINESUBSYSTEMLIVE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(OnAddFriendByNameComplete)
AUTOGENERATE_NAME(OnArbitrationRegistrationComplete)
AUTOGENERATE_NAME(OnCancelFindOnlineGamesComplete)
AUTOGENERATE_NAME(OnConnectionStatusChange)
AUTOGENERATE_NAME(OnContentChange)
AUTOGENERATE_NAME(OnControllerChange)
AUTOGENERATE_NAME(OnCreateOnlineGameComplete)
AUTOGENERATE_NAME(OnDestroyOnlineGameComplete)
AUTOGENERATE_NAME(OnDeviceSelectionComplete)
AUTOGENERATE_NAME(OnEndOnlineGameComplete)
AUTOGENERATE_NAME(OnExternalUIChange)
AUTOGENERATE_NAME(OnFindOnlineGamesComplete)
AUTOGENERATE_NAME(OnFlushOnlineStatsComplete)
AUTOGENERATE_NAME(OnFriendInviteReceived)
AUTOGENERATE_NAME(OnFriendMessageReceived)
AUTOGENERATE_NAME(OnFriendsChange)
AUTOGENERATE_NAME(OnGameInviteAccepted)
AUTOGENERATE_NAME(OnJoinFriendGameComplete)
AUTOGENERATE_NAME(OnJoinOnlineGameComplete)
AUTOGENERATE_NAME(OnKeyboardInputComplete)
AUTOGENERATE_NAME(OnLinkStatusChange)
AUTOGENERATE_NAME(OnLoginCancelled)
AUTOGENERATE_NAME(OnLoginChange)
AUTOGENERATE_NAME(OnLoginFailed)
AUTOGENERATE_NAME(OnLogoutCompleted)
AUTOGENERATE_NAME(OnMutingChange)
AUTOGENERATE_NAME(OnPlayerTalking)
AUTOGENERATE_NAME(OnProfileDataChanged)
AUTOGENERATE_NAME(OnQueryAvailableDownloadsComplete)
AUTOGENERATE_NAME(OnReadAchievementsComplete)
AUTOGENERATE_NAME(OnReadContentComplete)
AUTOGENERATE_NAME(OnReadFriendsComplete)
AUTOGENERATE_NAME(OnReadOnlineStatsComplete)
AUTOGENERATE_NAME(OnReadProfileSettingsComplete)
AUTOGENERATE_NAME(OnReadTitleFileComplete)
AUTOGENERATE_NAME(OnReceivedGameInvite)
AUTOGENERATE_NAME(OnRecognitionComplete)
AUTOGENERATE_NAME(OnRegisterHostStatGuidComplete)
AUTOGENERATE_NAME(OnRegisterPlayerComplete)
AUTOGENERATE_NAME(OnStartOnlineGameComplete)
AUTOGENERATE_NAME(OnStorageDeviceChange)
AUTOGENERATE_NAME(OnUnlockAchievementComplete)
AUTOGENERATE_NAME(OnUnregisterPlayerComplete)
AUTOGENERATE_NAME(OnUpdateOnlineGameComplete)
AUTOGENERATE_NAME(OnWriteProfileSettingsComplete)

#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES
#define INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES 1

class UOnlineEventsInterfaceMcpLive : public UOnlineEventsInterfaceMcp
{
public:
    //## BEGIN PROPS OnlineEventsInterfaceMcpLive
    //## END PROPS OnlineEventsInterfaceMcpLive

    virtual UBOOL UploadHardwareData(struct FUniqueNetId UniqueId,const FString& PlayerNick);
    virtual UBOOL UploadMatchmakingSearchData(struct FUniqueNetId UniqueId,class UOnlineGameSearch* Search,INT SelectedIndex,const TArray<struct FPlayerReservation>& Players);
    virtual UBOOL UploadMatchmakingSessionData(class UOnlineGameSettings* GameSettings,const TArray<struct FPlayerReservation>& Players);
    DECLARE_FUNCTION(execUploadHardwareData)
    {
        P_GET_STRUCT(struct FUniqueNetId,UniqueId);
        P_GET_STR(PlayerNick);
        P_FINISH;
        *(UBOOL*)Result=UploadHardwareData(UniqueId,PlayerNick);
    }
    DECLARE_FUNCTION(execUploadMatchmakingSearchData)
    {
        P_GET_STRUCT(struct FUniqueNetId,UniqueId);
        P_GET_OBJECT(UOnlineGameSearch,Search);
        P_GET_INT(SelectedIndex);
        P_GET_TARRAY_REF(struct FPlayerReservation,Players);
        P_FINISH;
        *(UBOOL*)Result=UploadMatchmakingSearchData(UniqueId,Search,SelectedIndex,Players);
    }
    DECLARE_FUNCTION(execUploadMatchmakingSessionData)
    {
        P_GET_OBJECT(UOnlineGameSettings,GameSettings);
        P_GET_TARRAY_REF(struct FPlayerReservation,Players);
        P_FINISH;
        *(UBOOL*)Result=UploadMatchmakingSessionData(GameSettings,Players);
    }
    DECLARE_CLASS(UOnlineEventsInterfaceMcpLive,UOnlineEventsInterfaceMcp,0|CLASS_Config,OnlineSubsystemLive)
	/**
	 * Converts the net id to a string with the one way hash of it
	 *
	 * @param Id the net id to convert
	 *
	 * @return the string form of the id
	 */
	virtual FString FormatAsString(const FUniqueNetId& Id)
	{
		XUID ZeroId = 0;
		// Don't SHA bot's ids
		if ((XUID&)Id != ZeroId)
		{
			return FString::Printf(TEXT("%s"),*appHashUniqueNetId(Id));
		}
		return TEXT("0");
	}

	/**
	 * Returns a true/false string for the bool
	 *
	 * @param bBool the bool being converted
	 *
	 * @return true/false string
	 */
	FORCEINLINE const TCHAR* BoolToString(UBOOL bBool)
	{
		return bBool ? TEXT("true") : TEXT("false");
	}

	/**
	 * Returns a string for the video standard
	 *
	 * @param VideoStd the video standard to convert
	 *
	 * @return either NTSC, NTSC-J, or PAL
	 */
	FORCEINLINE const TCHAR* VideoStdToString(DWORD VideoStd)
	{
#if CONSOLE
		switch (VideoStd)
		{
			case XC_VIDEO_STANDARD_NTSC_J:
			{
				return TEXT("NTSC-J");
			}
			case XC_VIDEO_STANDARD_PAL_I:
			{
				return TEXT("PAL");
			}
		}
		return TEXT("NTSC");
#else
		return TEXT("VGA");
#endif
	}

	/**
	 * Returns a string for the device type
	 *
	 * @param DeviceType the device type to convert
	 *
	 * @return either HD, MU, or Unknown
	 */
	FORCEINLINE const TCHAR* DeviceTypeToString(DWORD DeviceType)
	{
#if CONSOLE
		switch (DeviceType)
		{
			case XCONTENTDEVICETYPE_HDD:
			{
				return TEXT("HD");
			}
			case XCONTENTDEVICETYPE_MU:
			{
				return TEXT("MU");
			}
		}
#endif
		return TEXT("UNKNOWN");
	}

	/**
	 * Returns a string for the NAT type
	 *
	 * @param NatType the NAT type to convert
	 *
	 * @return either OPEN, STRICT, or MODERATE
	 */
	FORCEINLINE const TCHAR* NatTypeToString(DWORD NatType)
	{
		switch (NatType)
		{
			case XONLINE_NAT_OPEN:
			{
				return TEXT("OPEN");
			}
			case XONLINE_NAT_MODERATE:
			{
				return TEXT("MODERATE");
			}
		}
		return TEXT("STRICT");
	}

	/**
	 * Adds the XML information for a particular match
	 *
	 * @param XmlPayload the string that is appended to
	 * @parma HostSettings the match that is being added
	 */
	void AppendMatchData(FString& XmlPayload,UOnlineGameSettings* HostSettings);

	/**
	 * Appends the players to the XML data for matchmaking information
	 *
	 * @param XmlPayload the string being appended to
	 * @param Players the group of players to add skill information for
	 */
	void AppendPlayerMatchmakingData(FString& XmlPayload,const TArray<FPlayerReservation>& Players);
};

struct FFriendsListCache
{
    TArrayNoInit<struct FOnlineFriend> Friends;
    BYTE ReadState;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;

    /** Constructors */
    FFriendsListCache() {}
    FFriendsListCache(EEventParm)
    {
        appMemzero(this, sizeof(FFriendsListCache));
    }
};

struct FLoginDelegates
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FLoginDelegates() {}
    FLoginDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FLoginDelegates));
    }
};

struct FXuidPair
{
    struct FUniqueNetId OnlineXuid;
    struct FUniqueNetId OfflineXuid;

    /** Constructors */
    FXuidPair() {}
    FXuidPair(EEventParm)
    {
        appMemzero(this, sizeof(FXuidPair));
    }
};

struct FContentListCache
{
    TArrayNoInit<struct FOnlineContent> Content;
    BYTE ReadState;
    TArrayNoInit<FScriptDelegate> ContentChangeDelegates;
    TArrayNoInit<FScriptDelegate> ReadCompleteDelegates;
    INT NewDownloadCount;
    INT TotalDownloadCount;
    TArrayNoInit<FScriptDelegate> QueryDownloadsDelegates;

    /** Constructors */
    FContentListCache() {}
    FContentListCache(EEventParm)
    {
        appMemzero(this, sizeof(FContentListCache));
    }
};

struct FDeviceIdCache
{
    INT DeviceID;
    FScriptDelegate DeviceSelectionMulticast;
    TArrayNoInit<FScriptDelegate> DeviceSelectionDelegates;

    /** Constructors */
    FDeviceIdCache() {}
    FDeviceIdCache(EEventParm)
    {
        appMemzero(this, sizeof(FDeviceIdCache));
    }
};

struct FProfileSettingsCache
{
    class UOnlineProfileSettings* Profile;
    TArrayNoInit<FScriptDelegate> ReadDelegates;
    TArrayNoInit<FScriptDelegate> WriteDelegates;
    TArrayNoInit<FScriptDelegate> ProfileDataChangedDelegates;

    /** Constructors */
    FProfileSettingsCache() {}
    FProfileSettingsCache(EEventParm)
    {
        appMemzero(this, sizeof(FProfileSettingsCache));
    }
};

struct FTalkerPriority
{
    INT CurrentPriority;
    INT LastPriority;

    /** Constructors */
    FTalkerPriority() {}
    FTalkerPriority(EEventParm)
    {
        appMemzero(this, sizeof(FTalkerPriority));
    }
};

struct FLiveRemoteTalker : public FRemoteTalker
{
    struct FTalkerPriority LocalPriorities[4];

		/** @return TRUE if any of the local players have this player muted, otherwise FALSE */
		inline UBOOL IsLocallyMuted(void)
		{
			for (INT Index = 0; Index < 4; Index++)
			{
				if (LocalPriorities[Index].CurrentPriority == XHV_PLAYBACK_PRIORITY_NEVER)
				{
					return TRUE;
				}
			}
			return FALSE;
		}
	
};

struct FPerUserDelegateLists
{
    TArrayNoInit<FScriptDelegate> SpeechRecognitionDelegates;
    TArrayNoInit<FScriptDelegate> AchievementDelegates;
    TArrayNoInit<FScriptDelegate> AchievementReadDelegates;

    /** Constructors */
    FPerUserDelegateLists() {}
    FPerUserDelegateLists(EEventParm)
    {
        appMemzero(this, sizeof(FPerUserDelegateLists));
    }
};

struct FInviteData
{
    TArrayNoInit<FScriptDelegate> InviteDelegates;
    XINVITE_INFO* InviteData;
    class UOnlineGameSearch* InviteSearch;

    /** Constructors */
    FInviteData() {}
    FInviteData(EEventParm)
    {
        appMemzero(this, sizeof(FInviteData));
    }
};

struct FCachedAchievements
{
    INT PlayerNum;
    INT TitleId;
    TArrayNoInit<struct FAchievementDetails> Achievements;
    BYTE ReadState;

    /** Constructors */
    FCachedAchievements() {}
    FCachedAchievements(EEventParm)
    {
        appMemzero(this, sizeof(FCachedAchievements));
    }
};

struct OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms
{
    INT TitleId;
    OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemLive_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemLive_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemLive_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemLive_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnPlayerTalking_Parms
{
    struct FUniqueNetId Player;
    OnlineSubsystemLive_eventOnPlayerTalking_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadContentComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadContentComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnContentChange_Parms
{
    OnlineSubsystemLive_eventOnContentChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnGameInviteAccepted_Parms
{
    class UOnlineGameSettings* InviteSettings;
    OnlineSubsystemLive_eventOnGameInviteAccepted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnProfileDataChanged_Parms
{
    OnlineSubsystemLive_eventOnProfileDataChanged_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemLive_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemLive_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemLive_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemLive_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemLive_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemLive_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnFriendsChange_Parms
{
    OnlineSubsystemLive_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnMutingChange_Parms
{
    OnlineSubsystemLive_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginCancelled_Parms
{
    OnlineSubsystemLive_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemLive_eventOnLoginChange_Parms
{
    OnlineSubsystemLive_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemLive : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemLive
    void* NotificationHandle;
    void* XLocatorServiceHandle;
    class UOnlineGameSearch* GameSearch;
    BYTE LanBeaconState;
    BYTE LanNonce[8];
    BYTE CurrentNotificationPosition;
    BYTE bWasKeyboardInputCanceled;
    BYTE QoSPacket[512];
    BYTE DelayedInviteUserMask;
    INT LiveSystemLinkPort;
    INT LanAnnouncePort;
    INT LanGameUniqueId;
    INT LanPacketPlatformMask;
    FLOAT LanQueryTimeLeft;
    FLOAT LanQueryTimeout;
    FLanBeacon* LanBeacon;
    INT NumLogins;
    TArrayNoInit<FOnlineAsyncTaskLive*> AsyncTasks;
    struct FFriendsListCache FriendsCache[4];
    struct FLoginDelegates PlayerLoginDelegates[4];
    struct FLoginDelegates AllLoginDelegates;
    INT LastSignInMask;
    struct FXuidPair LastXuids[4];
    struct FContentListCache ContentCache[4];
    TArrayNoInit<FScriptDelegate> AnyContentChangeDelegates;
    FStringNoInit KeyboardInputResults;
    struct FDeviceIdCache DeviceCache[4];
    struct FProfileSettingsCache ProfileCache[4];
    struct FLocalTalker LocalTalkers[4];
    TArrayNoInit<struct FLiveRemoteTalker> RemoteTalkers;
    TArrayNoInit<FScriptDelegate> TalkingDelegates;
    struct FPerUserDelegateLists PerUserDelegates[4];
    class UOnlineStatsRead* CurrentStatsRead;
    BITFIELD bIsInSignInUI:1;
    BITFIELD bShouldLogArbitrationData:1;
    BITFIELD bShouldLogStatsData:1;
    BITFIELD bShouldUseMcp:1;
    BITFIELD bIsCountingDownSigninNotification:1;
    TArrayNoInit<FScriptDelegate> LoginCancelledDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> LogoutCompletedDelegates;
    TArrayNoInit<FScriptDelegate> CreateOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UpdateOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> DestroyOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> JoinOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> StartOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> EndOnlineGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FindOnlineGamesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> CancelFindOnlineGamesCompleteDelegates;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ArbitrationRegistrationCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ExternalUIChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    INT LastInputDeviceConnectedMask;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> StorageDeviceChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> KeyboardInputDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    struct FInviteData InviteCache[4];
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<struct FTitleFile> TitleManagedFiles;
    TArrayNoInit<struct FCachedAchievements> AchievementList;
    FLOAT SigninCountDownCounter;
    FLOAT SigninCountDownDelay;
    INT DebugLogLevel;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnFindOnlineGamesComplete__Delegate;
    FScriptDelegate __OnCreateOnlineGameComplete__Delegate;
    FScriptDelegate __OnUpdateOnlineGameComplete__Delegate;
    FScriptDelegate __OnDestroyOnlineGameComplete__Delegate;
    FScriptDelegate __OnCancelFindOnlineGamesComplete__Delegate;
    FScriptDelegate __OnJoinOnlineGameComplete__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnDeviceSelectionComplete__Delegate;
    FScriptDelegate __OnUnlockAchievementComplete__Delegate;
    FScriptDelegate __OnProfileDataChanged__Delegate;
    FScriptDelegate __OnStartOnlineGameComplete__Delegate;
    FScriptDelegate __OnEndOnlineGameComplete__Delegate;
    FScriptDelegate __OnArbitrationRegistrationComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnContentChange__Delegate;
    FScriptDelegate __OnReadContentComplete__Delegate;
    FScriptDelegate __OnQueryAvailableDownloadsComplete__Delegate;
    FScriptDelegate __OnPlayerTalking__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    FScriptDelegate __OnReadAchievementsComplete__Delegate;
    //## END PROPS OnlineSubsystemLive

    virtual UBOOL Init();
    virtual void Exit();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual UBOOL Logout(BYTE LocalUserNum);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual UBOOL IsGuestLogin(BYTE LocalUserNum);
    virtual UBOOL IsLocalLogin(BYTE LocalUserNum);
    virtual UBOOL GetUniquePlayerId(BYTE LocalUserNum,struct FUniqueNetId& PlayerID);
    virtual FString GetPlayerNickname(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual BYTE CanDownloadUserContent(BYTE LocalUserNum);
    virtual BYTE CanPurchaseContent(BYTE LocalUserNum);
    virtual BYTE CanViewPlayerProfiles(BYTE LocalUserNum);
    virtual BYTE CanShowPresenceInformation(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL IsMuted(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFriendsUI(BYTE LocalUserNum);
    virtual UBOOL ShowFriendsInviteUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowFeedbackUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowGamerCardUI(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL ShowMessagesUI(BYTE LocalUserNum);
    virtual UBOOL ShowAchievementsUI(BYTE LocalUserNum);
    virtual UBOOL ShowGuideUI();
    virtual UBOOL ShowPlayersUI(BYTE LocalUserNum);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bIsPassword=FALSE,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL HasLinkConnection();
    virtual void SetNetworkNotificationPosition(BYTE NewPos);
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL CreateOnlineGame(BYTE HostingPlayerNum,FName SessionName,class UOnlineGameSettings* NewGameSettings);
    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL DestroyOnlineGame(FName SessionName);
    virtual UBOOL FindOnlineGames(BYTE SearchingPlayerNum,class UOnlineGameSearch* SearchSettings);
    virtual UBOOL CancelFindOnlineGames();
    virtual UBOOL ReadPlatformSpecificSessionInfo(const struct FOnlineGameSearchResult& DesiredGame,BYTE* PlatformSpecificInfo);
    virtual UBOOL ReadPlatformSpecificSessionInfoBySessionName(FName SessionName,BYTE* PlatformSpecificInfo);
    virtual UBOOL BindPlatformSpecificSessionToSearch(BYTE SearchingPlayerNum,class UOnlineGameSearch* SearchSettings,BYTE* PlatformSpecificInfo);
    virtual UBOOL FreeSearchResults(class UOnlineGameSearch* Search=NULL);
    virtual UBOOL JoinOnlineGame(BYTE PlayerNum,FName SessionName,const struct FOnlineGameSearchResult& DesiredGame);
    virtual UBOOL GetResolvedConnectString(FName SessionName,FString& ConnectInfo);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    virtual UBOOL RecalculateSkillRating(FName SessionName,const TArray<struct FUniqueNetId>& Players);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT PresenceMode,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowInviteUI(BYTE LocalUserNum,const FString& InviteText=TEXT(""));
    virtual UBOOL ShowContentMarketplaceUI(BYTE LocalUserNum,INT CategoryMask=-1,INT OfferId=0);
    virtual UBOOL ShowMembershipMarketplaceUI(BYTE LocalUserNum);
    virtual UBOOL ShowDeviceSelectionUI(BYTE LocalUserNum,INT SizeNeeded,UBOOL bForceShowUI=FALSE,UBOOL bManageStorage=FALSE);
    virtual INT GetDeviceSelectionResults(BYTE LocalPlayerNum,FString& DeviceName);
    virtual UBOOL IsDeviceValid(INT DeviceID,INT SizeNeeded=0);
    virtual UBOOL UnlockAchievement(BYTE LocalUserNum,INT AchievementId);
    virtual UBOOL UnlockGamerPicture(BYTE LocalUserNum,INT PictureId);
    virtual UBOOL StartOnlineGame(FName SessionName);
    virtual UBOOL EndOnlineGame(FName SessionName);
    virtual UBOOL RegisterForArbitration(FName SessionName);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL ReadContentList(BYTE LocalUserNum);
    virtual BYTE GetContentList(BYTE LocalUserNum,TArray<struct FOnlineContent>& ContentList);
    virtual UBOOL QueryAvailableDownloads(BYTE LocalUserNum,INT CategoryMask=-1);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual UBOOL ReadAchievements(BYTE LocalUserNum,INT TitleId=0,UBOOL bShouldReadText=TRUE,UBOOL bShouldReadImages=FALSE);
    virtual BYTE GetAchievements(BYTE LocalUserNum,TArray<struct FAchievementDetails>& Achievements,INT TitleId=0);
    virtual UBOOL ShowCustomPlayersUI(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Players,const FString& Title,const FString& Description);
    virtual void DumpLiveSessionState();
    virtual void DumpVoiceRegistration();
    virtual void SetDebugSpewLevel(INT DebugSpewLevel);
    DECLARE_FUNCTION(execExit)
    {
        P_FINISH;
        Exit();
    }
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=AutoLogin();
    }
    DECLARE_FUNCTION(execLogout)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=Logout(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsGuestLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsGuestLogin(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsLocalLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsLocalLogin(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetUniquePlayerId)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT_REF(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=GetUniquePlayerId(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execGetPlayerNickname)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(FString*)Result=GetPlayerNickname(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanDownloadUserContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanDownloadUserContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPurchaseContent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanPurchaseContent(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanViewPlayerProfiles)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanViewPlayerProfiles(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanShowPresenceInformation)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanShowPresenceInformation(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execIsMuted)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsMuted(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFriendsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowFriendsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowFriendsInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowFriendsInviteUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowFeedbackUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowFeedbackUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowGamerCardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=ShowGamerCardUI(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execShowMessagesUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowMessagesUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowAchievementsUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowAchievementsUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowGuideUI)
    {
        P_FINISH;
        *(UBOOL*)Result=ShowGuideUI();
    }
    DECLARE_FUNCTION(execShowPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowPlayersUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bIsPassword,FALSE);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bIsPassword,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=HasLinkConnection();
    }
    DECLARE_FUNCTION(execSetNetworkNotificationPosition)
    {
        P_GET_BYTE(NewPos);
        P_FINISH;
        SetNetworkNotificationPosition(NewPos);
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=GetNATType();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execCreateOnlineGame)
    {
        P_GET_BYTE(HostingPlayerNum);
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,NewGameSettings);
        P_FINISH;
        *(UBOOL*)Result=CreateOnlineGame(HostingPlayerNum,SessionName,NewGameSettings);
    }
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execDestroyOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=DestroyOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execFindOnlineGames)
    {
        P_GET_BYTE(SearchingPlayerNum);
        P_GET_OBJECT(UOnlineGameSearch,SearchSettings);
        P_FINISH;
        *(UBOOL*)Result=FindOnlineGames(SearchingPlayerNum,SearchSettings);
    }
    DECLARE_FUNCTION(execCancelFindOnlineGames)
    {
        P_FINISH;
        *(UBOOL*)Result=CancelFindOnlineGames();
    }
    DECLARE_FUNCTION(execReadPlatformSpecificSessionInfo)
    {
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_GET_ARRAY_REF(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=ReadPlatformSpecificSessionInfo(DesiredGame,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execReadPlatformSpecificSessionInfoBySessionName)
    {
        P_GET_NAME(SessionName);
        P_GET_ARRAY_REF(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=ReadPlatformSpecificSessionInfoBySessionName(SessionName,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execBindPlatformSpecificSessionToSearch)
    {
        P_GET_BYTE(SearchingPlayerNum);
        P_GET_OBJECT(UOnlineGameSearch,SearchSettings);
        P_GET_ARRAY(BYTE,PlatformSpecificInfo);
        P_FINISH;
        *(UBOOL*)Result=BindPlatformSpecificSessionToSearch(SearchingPlayerNum,SearchSettings,PlatformSpecificInfo);
    }
    DECLARE_FUNCTION(execFreeSearchResults)
    {
        P_GET_OBJECT_OPTX(UOnlineGameSearch,Search,NULL);
        P_FINISH;
        *(UBOOL*)Result=FreeSearchResults(Search);
    }
    DECLARE_FUNCTION(execJoinOnlineGame)
    {
        P_GET_BYTE(PlayerNum);
        P_GET_NAME(SessionName);
        P_GET_STRUCT_REF(struct FOnlineGameSearchResult,DesiredGame);
        P_FINISH;
        *(UBOOL*)Result=JoinOnlineGame(PlayerNum,SessionName,DesiredGame);
    }
    DECLARE_FUNCTION(execGetResolvedConnectString)
    {
        P_GET_NAME(SessionName);
        P_GET_STR_REF(ConnectInfo);
        P_FINISH;
        *(UBOOL*)Result=GetResolvedConnectString(SessionName,ConnectInfo);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_FUNCTION(execRecalculateSkillRating)
    {
        P_GET_NAME(SessionName);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_FINISH;
        *(UBOOL*)Result=RecalculateSkillRating(SessionName,Players);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PresenceMode);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        SetOnlineStatus(LocalUserNum,PresenceMode,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowInviteUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR_OPTX(InviteText,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=ShowInviteUI(LocalUserNum,InviteText);
    }
    DECLARE_FUNCTION(execShowContentMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_GET_INT_OPTX(OfferId,0);
        P_FINISH;
        *(UBOOL*)Result=ShowContentMarketplaceUI(LocalUserNum,CategoryMask,OfferId);
    }
    DECLARE_FUNCTION(execShowMembershipMarketplaceUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ShowMembershipMarketplaceUI(LocalUserNum);
    }
    DECLARE_FUNCTION(execShowDeviceSelectionUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(SizeNeeded);
        P_GET_UBOOL_OPTX(bForceShowUI,FALSE);
        P_GET_UBOOL_OPTX(bManageStorage,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ShowDeviceSelectionUI(LocalUserNum,SizeNeeded,bForceShowUI,bManageStorage);
    }
    DECLARE_FUNCTION(execGetDeviceSelectionResults)
    {
        P_GET_BYTE(LocalPlayerNum);
        P_GET_STR_REF(DeviceName);
        P_FINISH;
        *(INT*)Result=GetDeviceSelectionResults(LocalPlayerNum,DeviceName);
    }
    DECLARE_FUNCTION(execIsDeviceValid)
    {
        P_GET_INT(DeviceID);
        P_GET_INT_OPTX(SizeNeeded,0);
        P_FINISH;
        *(UBOOL*)Result=IsDeviceValid(DeviceID,SizeNeeded);
    }
    DECLARE_FUNCTION(execUnlockAchievement)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(AchievementId);
        P_FINISH;
        *(UBOOL*)Result=UnlockAchievement(LocalUserNum,AchievementId);
    }
    DECLARE_FUNCTION(execUnlockGamerPicture)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(PictureId);
        P_FINISH;
        *(UBOOL*)Result=UnlockGamerPicture(LocalUserNum,PictureId);
    }
    DECLARE_FUNCTION(execStartOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=StartOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execEndOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=EndOnlineGame(SessionName);
    }
    DECLARE_FUNCTION(execRegisterForArbitration)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=RegisterForArbitration(SessionName);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execReadContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=ReadContentList(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetContentList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineContent,ContentList);
        P_FINISH;
        *(BYTE*)Result=GetContentList(LocalUserNum,ContentList);
    }
    DECLARE_FUNCTION(execQueryAvailableDownloads)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(CategoryMask,-1);
        P_FINISH;
        *(UBOOL*)Result=QueryAvailableDownloads(LocalUserNum,CategoryMask);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=MuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnmuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execReadAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(TitleId,0);
        P_GET_UBOOL_OPTX(bShouldReadText,TRUE);
        P_GET_UBOOL_OPTX(bShouldReadImages,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ReadAchievements(LocalUserNum,TitleId,bShouldReadText,bShouldReadImages);
    }
    DECLARE_FUNCTION(execGetAchievements)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FAchievementDetails,Achievements);
        P_GET_INT_OPTX(TitleId,0);
        P_FINISH;
        *(BYTE*)Result=GetAchievements(LocalUserNum,Achievements,TitleId);
    }
    DECLARE_FUNCTION(execShowCustomPlayersUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_STR(Title);
        P_GET_STR(Description);
        P_FINISH;
        *(UBOOL*)Result=ShowCustomPlayersUI(LocalUserNum,Players,Title,Description);
    }
    DECLARE_FUNCTION(execDumpLiveSessionState)
    {
        P_FINISH;
        DumpLiveSessionState();
    }
    DECLARE_FUNCTION(execDumpVoiceRegistration)
    {
        P_FINISH;
        DumpVoiceRegistration();
    }
    DECLARE_FUNCTION(execSetDebugSpewLevel)
    {
        P_GET_INT(DebugSpewLevel);
        P_FINISH;
        SetDebugSpewLevel(DebugSpewLevel);
    }
    void delegateOnReadAchievementsComplete(INT TitleId)
    {
        OnlineSubsystemLive_eventOnReadAchievementsComplete_Parms Parms(EC_EventParm);
        Parms.TitleId=TitleId;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadAchievementsComplete,&__OnReadAchievementsComplete__Delegate,&Parms);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemLive_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemLive_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemLive_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalking(struct FUniqueNetId Player)
    {
        OnlineSubsystemLive_eventOnPlayerTalking_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnPlayerTalking,&__OnPlayerTalking__Delegate,&Parms);
    }
    void delegateOnQueryAvailableDownloadsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnQueryAvailableDownloadsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnQueryAvailableDownloadsComplete,&__OnQueryAvailableDownloadsComplete__Delegate,&Parms);
    }
    void delegateOnReadContentComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadContentComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadContentComplete,&__OnReadContentComplete__Delegate,&Parms);
    }
    void delegateOnContentChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnContentChange,&__OnContentChange__Delegate,NULL);
    }
    void delegateOnGameInviteAccepted(class UOnlineGameSettings* InviteSettings)
    {
        OnlineSubsystemLive_eventOnGameInviteAccepted_Parms Parms(EC_EventParm);
        Parms.InviteSettings=InviteSettings;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnGameInviteAccepted,&__OnGameInviteAccepted__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnArbitrationRegistrationComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnArbitrationRegistrationComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnArbitrationRegistrationComplete,&__OnArbitrationRegistrationComplete__Delegate,&Parms);
    }
    void delegateOnEndOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnEndOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnEndOnlineGameComplete,&__OnEndOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnStartOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnStartOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnStartOnlineGameComplete,&__OnStartOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnProfileDataChanged()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnProfileDataChanged,&__OnProfileDataChanged__Delegate,NULL);
    }
    void delegateOnUnlockAchievementComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnlockAchievementComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnlockAchievementComplete,&__OnUnlockAchievementComplete__Delegate,&Parms);
    }
    void delegateOnDeviceSelectionComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDeviceSelectionComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDeviceSelectionComplete,&__OnDeviceSelectionComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnUnregisterPlayerComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUnregisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUnregisterPlayerComplete,&__OnUnregisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnRegisterPlayerComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnRegisterPlayerComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnRegisterPlayerComplete,&__OnRegisterPlayerComplete__Delegate,&Parms);
    }
    void delegateOnJoinOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnJoinOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnJoinOnlineGameComplete,&__OnJoinOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnCancelFindOnlineGamesComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnCancelFindOnlineGamesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnCancelFindOnlineGamesComplete,&__OnCancelFindOnlineGamesComplete__Delegate,&Parms);
    }
    void delegateOnDestroyOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnDestroyOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnDestroyOnlineGameComplete,&__OnDestroyOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnUpdateOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnUpdateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnUpdateOnlineGameComplete,&__OnUpdateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineGameComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnCreateOnlineGameComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnCreateOnlineGameComplete,&__OnCreateOnlineGameComplete__Delegate,&Parms);
    }
    void delegateOnFindOnlineGamesComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnFindOnlineGamesComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFindOnlineGamesComplete,&__OnFindOnlineGamesComplete__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemLive_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemLive_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemLive_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemLive_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemLive_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemLive_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMLIVE_OnLoginChange,&__OnLoginChange__Delegate,NULL);
    }
    DECLARE_CLASS(UOnlineSubsystemLive,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemLive)
    #include "UOnlineSubsystemLive.h"
};

class UPartyBeaconClientLive : public UPartyBeaconClient
{
public:
    //## BEGIN PROPS PartyBeaconClientLive
    //## END PROPS PartyBeaconClientLive

    DECLARE_CLASS(UPartyBeaconClientLive,UPartyBeaconClient,0|CLASS_Config,OnlineSubsystemLive)
	/**
	 * Performs platform specific resolution of the address
	 *
	 * @param DesiredHost the host to resolve the IP address for
	 * @param Addr out param having it's address set
	 *
	 * @return true if the address could be resolved, false otherwise
	 */
	virtual UBOOL ResolveAddress(const FOnlineGameSearchResult& DesiredHost,FInternetIpAddr& Addr)
	{
		// Use the session information to build the address
		XSESSION_INFO* SessionInfo = (XSESSION_INFO*)DesiredHost.PlatformData;
		if (SessionInfo != NULL)
		{
			// Figure out if we need to do the secure IP handling or not
			if (GSocketSubsystem->RequiresEncryptedPackets())
			{
				in_addr InAddr;
				DWORD Result = XNetXnAddrToInAddr(&SessionInfo->hostAddress,&SessionInfo->sessionID,&InAddr);
				debugf(NAME_DevOnline,
					TEXT("Beacon (%s) XNetXnAddrToInAddr() returned 0x%08X"),
					*BeaconName.ToString(),
					Result);
				// Try to decode the secure address so we can connect to it
				if (Result == 0)
				{
					Addr.SetIp(InAddr);
					// Set to the configured port rather than what's in the address
					Addr.SetPort(PartyBeaconPort);
					return TRUE;
				}
				else
				{
					debugf(NAME_DevOnline,TEXT("Failed to resolve secure IP"));
				}
			}
			else
			{
				// Don't use the encrypted/decrypted form of the IP when it's not required
				Addr.SetIp(SessionInfo->hostAddress.ina);
				// Set to the configured port rather than what's in the address
				Addr.SetPort(PartyBeaconPort);
				return TRUE;
			}
		}
		return FALSE;
	}

	/**
	 * Allows for per platform registration of secure keys, so that a secure connection
	 * can be opened and used for sending/receiving data.
	 *
	 * @param DesiredHost the host that is being registered
	 */
	virtual UBOOL RegisterAddress(const FOnlineGameSearchResult& DesiredHost)
	{
		if (GSocketSubsystem->RequiresEncryptedPackets())
		{
			// Grab the secure keys from the session info
			XSESSION_INFO* SessionInfo = (XSESSION_INFO*)DesiredHost.PlatformData;
			if (SessionInfo != NULL)
			{
				// Now register them with the net layer so we can send packets
				DWORD Result = XNetRegisterKey(&SessionInfo->sessionID,&SessionInfo->keyExchangeKey);
				debugf(NAME_DevOnline,
					TEXT("Beacon (%s) XNetRegisterKey() returned 0x%08X"),
					*BeaconName.ToString(),
					Result);
				return Result == 0;
			}
			return FALSE;
		}
		return TRUE;
	}

	/**
	 * Allows for per platform unregistration of secure keys, which breaks the link between
	 * a client and server. This also releases any memory associated with the keys.
	 *
	 * @param DesiredHost the host that is being registered
	 */
	virtual UBOOL UnregisterAddress(const FOnlineGameSearchResult& DesiredHost)
	{
		if (GSocketSubsystem->RequiresEncryptedPackets())
		{
			// Grab the secure keys from the session info
			XSESSION_INFO* SessionInfo = (XSESSION_INFO*)DesiredHost.PlatformData;
			if (SessionInfo != NULL)
			{
				// Unregister the keys so we don't leak
				DWORD Result = XNetUnregisterKey(&SessionInfo->sessionID);
				debugf(NAME_DevOnline,
					TEXT("Beacon (%s) XNetUnregisterKey() returned 0x%08X"),
					*BeaconName.ToString(),
					Result);
				return Result == 0;
			}
			return FALSE;
		}
		return TRUE;
	}
};

#endif // !INCLUDED_ONLINESUBSYSTEMLIVE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UOnlineEventsInterfaceMcpLive,-1,execUploadMatchmakingSessionData);
AUTOGENERATE_FUNCTION(UOnlineEventsInterfaceMcpLive,-1,execUploadMatchmakingSearchData);
AUTOGENERATE_FUNCTION(UOnlineEventsInterfaceMcpLive,-1,execUploadHardwareData);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetDebugSpewLevel);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDumpVoiceRegistration);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDumpLiveSessionState);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowCustomPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadAchievements);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execQueryAvailableDownloads);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadContentList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterForArbitration);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execEndOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execStartOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockGamerPicture);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnlockAchievement);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsDeviceValid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetDeviceSelectionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowDeviceSelectionUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMembershipMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowContentMarketplaceUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRecalculateSkillRating);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetResolvedConnectString);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execJoinOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFreeSearchResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execBindPlatformSpecificSessionToSearch);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlatformSpecificSessionInfoBySessionName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadPlatformSpecificSessionInfo);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCancelFindOnlineGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execFindOnlineGames);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execDestroyOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCreateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execSetNetworkNotificationPosition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowPlayersUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowGuideUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowAchievementsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowMessagesUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowGamerCardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFeedbackUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsInviteUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowFriendsUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsMuted);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanShowPresenceInformation);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanViewPlayerProfiles);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPurchaseContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanDownloadUserContent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetPlayerNickname);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetUniquePlayerId);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsLocalLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execIsGuestLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execLogout);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execExit);
AUTOGENERATE_FUNCTION(UOnlineSubsystemLive,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMLIVE_NATIVE_DEFS
#define ONLINESUBSYSTEMLIVE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(OnlineSubsystemLive,UOnlineEventsInterfaceMcpLive);
DECLARE_NATIVE_TYPE(OnlineSubsystemLive,UOnlineSubsystemLive);
DECLARE_NATIVE_TYPE(OnlineSubsystemLive,UPartyBeaconClientLive);

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMLIVE \
	UOnlineEventsInterfaceMcpLive::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindOnlineSubsystemLiveUOnlineEventsInterfaceMcpLiveNative; \
	UOnlineSubsystemLive::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindOnlineSubsystemLiveUOnlineSubsystemLiveNative; \
	UPartyBeaconClientLive::StaticClass(); \

#endif // ONLINESUBSYSTEMLIVE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UOnlineEventsInterfaceMcpLive) GOnlineSubsystemLiveUOnlineEventsInterfaceMcpLiveNatives[] = 
{ 
	MAP_NATIVE(UOnlineEventsInterfaceMcpLive,execUploadMatchmakingSessionData)
	MAP_NATIVE(UOnlineEventsInterfaceMcpLive,execUploadMatchmakingSearchData)
	MAP_NATIVE(UOnlineEventsInterfaceMcpLive,execUploadHardwareData)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(OnlineSubsystemLive,UOnlineEventsInterfaceMcpLive);

NATIVE_INFO(UOnlineSubsystemLive) GOnlineSubsystemLiveUOnlineSubsystemLiveNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemLive,execSetDebugSpewLevel)
	MAP_NATIVE(UOnlineSubsystemLive,execDumpVoiceRegistration)
	MAP_NATIVE(UOnlineSubsystemLive,execDumpLiveSessionState)
	MAP_NATIVE(UOnlineSubsystemLive,execShowCustomPlayersUI)
	MAP_NATIVE(UOnlineSubsystemLive,execGetAchievements)
	MAP_NATIVE(UOnlineSubsystemLive,execReadAchievements)
	MAP_NATIVE(UOnlineSubsystemLive,execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemLive,execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemLive,execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemLive,execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemLive,execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execFreeStats)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemLive,execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemLive,execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemLive,execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemLive,execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemLive,execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive,execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemLive,execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemLive,execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemLive,execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemLive,execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemLive,execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive,execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemLive,execQueryAvailableDownloads)
	MAP_NATIVE(UOnlineSubsystemLive,execGetContentList)
	MAP_NATIVE(UOnlineSubsystemLive,execReadContentList)
	MAP_NATIVE(UOnlineSubsystemLive,execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive,execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemLive,execAcceptGameInvite)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterForArbitration)
	MAP_NATIVE(UOnlineSubsystemLive,execEndOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execStartOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execUnlockGamerPicture)
	MAP_NATIVE(UOnlineSubsystemLive,execUnlockAchievement)
	MAP_NATIVE(UOnlineSubsystemLive,execIsDeviceValid)
	MAP_NATIVE(UOnlineSubsystemLive,execGetDeviceSelectionResults)
	MAP_NATIVE(UOnlineSubsystemLive,execShowDeviceSelectionUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowMembershipMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowContentMarketplaceUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive,execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemLive,execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive,execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemLive,execRecalculateSkillRating)
	MAP_NATIVE(UOnlineSubsystemLive,execUnregisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execRegisterPlayer)
	MAP_NATIVE(UOnlineSubsystemLive,execGetResolvedConnectString)
	MAP_NATIVE(UOnlineSubsystemLive,execJoinOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execFreeSearchResults)
	MAP_NATIVE(UOnlineSubsystemLive,execBindPlatformSpecificSessionToSearch)
	MAP_NATIVE(UOnlineSubsystemLive,execReadPlatformSpecificSessionInfoBySessionName)
	MAP_NATIVE(UOnlineSubsystemLive,execReadPlatformSpecificSessionInfo)
	MAP_NATIVE(UOnlineSubsystemLive,execCancelFindOnlineGames)
	MAP_NATIVE(UOnlineSubsystemLive,execFindOnlineGames)
	MAP_NATIVE(UOnlineSubsystemLive,execDestroyOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execUpdateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execCreateOnlineGame)
	MAP_NATIVE(UOnlineSubsystemLive,execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemLive,execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemLive,execGetNATType)
	MAP_NATIVE(UOnlineSubsystemLive,execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemLive,execSetNetworkNotificationPosition)
	MAP_NATIVE(UOnlineSubsystemLive,execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemLive,execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowPlayersUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowGuideUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowAchievementsUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowMessagesUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowGamerCardUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFeedbackUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFriendsInviteUI)
	MAP_NATIVE(UOnlineSubsystemLive,execShowFriendsUI)
	MAP_NATIVE(UOnlineSubsystemLive,execIsMuted)
	MAP_NATIVE(UOnlineSubsystemLive,execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemLive,execIsFriend)
	MAP_NATIVE(UOnlineSubsystemLive,execCanShowPresenceInformation)
	MAP_NATIVE(UOnlineSubsystemLive,execCanViewPlayerProfiles)
	MAP_NATIVE(UOnlineSubsystemLive,execCanPurchaseContent)
	MAP_NATIVE(UOnlineSubsystemLive,execCanDownloadUserContent)
	MAP_NATIVE(UOnlineSubsystemLive,execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemLive,execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemLive,execGetPlayerNickname)
	MAP_NATIVE(UOnlineSubsystemLive,execGetUniquePlayerId)
	MAP_NATIVE(UOnlineSubsystemLive,execIsLocalLogin)
	MAP_NATIVE(UOnlineSubsystemLive,execIsGuestLogin)
	MAP_NATIVE(UOnlineSubsystemLive,execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemLive,execLogout)
	MAP_NATIVE(UOnlineSubsystemLive,execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemLive,execLogin)
	MAP_NATIVE(UOnlineSubsystemLive,execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemLive,execExit)
	MAP_NATIVE(UOnlineSubsystemLive,execInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(OnlineSubsystemLive,UOnlineSubsystemLive);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UOnlineEventsInterfaceMcpLive)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemLive,NotificationHandle)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemLive,__OnReadAchievementsComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemLive)
VERIFY_CLASS_SIZE_NODIE(UPartyBeaconClientLive)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
