/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS
#define INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS 1

enum EMuteType
{
    MUTE_None               =0,
    MUTE_AllButFriends      =1,
    MUTE_All                =2,
    MUTE_MAX                =3,
};

#endif // !INCLUDED_ONLINESUBSYSTEMGAMESPY_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ONLINESUBSYSTEMGAMESPY_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(OnAddFriendByNameComplete)
AUTOGENERATE_NAME(OnConnectionStatusChange)
AUTOGENERATE_NAME(OnControllerChange)
AUTOGENERATE_NAME(OnCreateOnlineAccountCompleted)
AUTOGENERATE_NAME(OnExternalUIChange)
AUTOGENERATE_NAME(OnFlushOnlineStatsComplete)
AUTOGENERATE_NAME(OnFriendInviteReceived)
AUTOGENERATE_NAME(OnFriendMessageReceived)
AUTOGENERATE_NAME(OnFriendsChange)
AUTOGENERATE_NAME(OnJoinFriendGameComplete)
AUTOGENERATE_NAME(OnKeyboardInputComplete)
AUTOGENERATE_NAME(OnLinkStatusChange)
AUTOGENERATE_NAME(OnLoginCancelled)
AUTOGENERATE_NAME(OnLoginChange)
AUTOGENERATE_NAME(OnLoginFailed)
AUTOGENERATE_NAME(OnLogoutCompleted)
AUTOGENERATE_NAME(OnMutingChange)
AUTOGENERATE_NAME(OnPlayerTalking)
AUTOGENERATE_NAME(OnReadFriendsComplete)
AUTOGENERATE_NAME(OnReadOnlineStatsComplete)
AUTOGENERATE_NAME(OnReadProfileSettingsComplete)
AUTOGENERATE_NAME(OnReadTitleFileComplete)
AUTOGENERATE_NAME(OnReceivedGameInvite)
AUTOGENERATE_NAME(OnRecognitionComplete)
AUTOGENERATE_NAME(OnRegisterHostStatGuidComplete)
AUTOGENERATE_NAME(OnStorageDeviceChange)
AUTOGENERATE_NAME(OnWriteProfileSettingsComplete)

#ifndef NAMES_ONLY

#ifndef INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES
#define INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES 1

struct FSBServer
{
    _SBServer* Server;

    /** Constructors */
    FSBServer() {}
    FSBServer(EEventParm)
    {
        appMemzero(this, sizeof(FSBServer));
    }
};

class UOnlineGameInterfaceGameSpy : public UOnlineGameInterfaceImpl
{
public:
    //## BEGIN PROPS OnlineGameInterfaceGameSpy
    struct qr2_implementation_s* QR2Handle;
    struct _ServerBrowser* SBHandle;
    INT QR2OwningPlayerIdKeyId;
    INT QR2FirstDataBindableKeyId;
    INT QR2NumDataBindableKeys;
    TArrayNoInit<FName> QR2DataBindableKeyNames;
    INT QR2FirstSettingKeyId;
    INT QR2NumSettingKeys;
    INT QR2FirstPropertyKeyId;
    INT QR2NumPropertyKeys;
    INT QR2NpIdKeyId;
    FStringNoInit QR2NpIdString;
    TArrayNoInit<FScriptDelegate> GameInviteAcceptedDelegates;
    class UOnlineGameSearch* InviteGameSearch;
    FStringNoInit InviteLocationUrl;
    TArrayNoInit<FScriptDelegate> RegisterPlayerCompleteDelegates;
    TArrayNoInit<FScriptDelegate> UnregisterPlayerCompleteDelegates;
    TArrayNoInit<struct FSBServer> ServersPendingInfo;
    FScriptDelegate __OnGameInviteAccepted__Delegate;
    FScriptDelegate __OnRegisterPlayerComplete__Delegate;
    FScriptDelegate __OnUnregisterPlayerComplete__Delegate;
    //## END PROPS OnlineGameInterfaceGameSpy

    virtual UBOOL UpdateOnlineGame(FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,UBOOL bShouldRefreshOnlineData=FALSE);
    virtual UBOOL AcceptGameInvite(BYTE LocalUserNum,FName SessionName);
    virtual UBOOL RegisterPlayer(FName SessionName,struct FUniqueNetId PlayerID,UBOOL bWasInvited);
    virtual UBOOL UnregisterPlayer(FName SessionName,struct FUniqueNetId PlayerID);
    virtual UBOOL QueryNonAdvertisedData(INT StartAt,INT NumberToQuery);
    DECLARE_FUNCTION(execUpdateOnlineGame)
    {
        P_GET_NAME(SessionName);
        P_GET_OBJECT(UOnlineGameSettings,UpdatedGameSettings);
        P_GET_UBOOL_OPTX(bShouldRefreshOnlineData,FALSE);
        P_FINISH;
        *(UBOOL*)Result=UpdateOnlineGame(SessionName,UpdatedGameSettings,bShouldRefreshOnlineData);
    }
    DECLARE_FUNCTION(execAcceptGameInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=AcceptGameInvite(LocalUserNum,SessionName);
    }
    DECLARE_FUNCTION(execRegisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_UBOOL(bWasInvited);
        P_FINISH;
        *(UBOOL*)Result=RegisterPlayer(SessionName,PlayerID,bWasInvited);
    }
    DECLARE_FUNCTION(execUnregisterPlayer)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterPlayer(SessionName,PlayerID);
    }
    DECLARE_FUNCTION(execQueryNonAdvertisedData)
    {
        P_GET_INT(StartAt);
        P_GET_INT(NumberToQuery);
        P_FINISH;
        *(UBOOL*)Result=QueryNonAdvertisedData(StartAt,NumberToQuery);
    }
    DECLARE_CLASS(UOnlineGameInterfaceGameSpy,UOnlineGameInterfaceImpl,0|CLASS_Config,OnlineSubsystemGameSpy)
    #include "UOnlineGameInterfaceGameSpy.h"
};

struct FPerUserProfileDelegates
{
    TArrayNoInit<FScriptDelegate> Delegates;

    /** Constructors */
    FPerUserProfileDelegates() {}
    FPerUserProfileDelegates(EEventParm)
    {
        appMemzero(this, sizeof(FPerUserProfileDelegates));
    }
};

struct FLocalTalkerGS : public FLocalTalker
{
    BYTE MuteType GCC_BITFIELD_MAGIC;

    /** Constructors */
    FLocalTalkerGS() {}
    FLocalTalkerGS(EEventParm)
    {
        appMemzero(this, sizeof(FLocalTalkerGS));
    }
};

struct FViewPropertyToKeyId
{
    INT ViewId;
    INT PropertyId;
    INT KeyId;

    /** Constructors */
    FViewPropertyToKeyId() {}
    FViewPropertyToKeyId(EEventParm)
    {
        appMemzero(this, sizeof(FViewPropertyToKeyId));
    }
};

struct FPlayerStat
{
    INT KeyId;
    struct FSettingsData Data;

    /** Constructors */
    FPlayerStat() {}
    FPlayerStat(EEventParm)
    {
        appMemzero(this, sizeof(FPlayerStat));
    }
};

struct FPendingPlayerStats
{
    struct FUniqueNetId Player;
    FStringNoInit PlayerName;
    FStringNoInit StatGuid;
    TArrayNoInit<struct FPlayerStat> Stats;
    struct FOnlinePlayerScore Score;
    FStringNoInit Place;

    /** Constructors */
    FPendingPlayerStats() {}
    FPendingPlayerStats(EEventParm)
    {
        appMemzero(this, sizeof(FPendingPlayerStats));
    }
};

struct FOnlineStatusMapping
{
    INT StatusId;
    FStringNoInit StatusString;

    /** Constructors */
    FOnlineStatusMapping() {}
    FOnlineStatusMapping(EEventParm)
    {
        appMemzero(this, sizeof(FOnlineStatusMapping));
    }
};

struct FControllerConnectionState
{
    INT bIsControllerConnected;
    INT bLastIsControllerConnected;

    /** Constructors */
    FControllerConnectionState() {}
    FControllerConnectionState(EEventParm)
    {
        appMemzero(this, sizeof(FControllerConnectionState));
    }
};

struct OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId SendingPlayer;
    FString SendingNick;
    FString Message;
    OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms
{
    BYTE LocalUserNum;
    FString InviterName;
    OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms
{
    BYTE LocalUserNum;
    struct FUniqueNetId RequestingPlayer;
    FString RequestingNick;
    FString Message;
    OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms
{
    BYTE ErrorStatus;
    OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms
{
    UBOOL bWasSuccessful;
    FString Filename;
    OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnStorageDeviceChange_Parms
{
    OnlineSubsystemGameSpy_eventOnStorageDeviceChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms
{
    BYTE ConnectionStatus;
    OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnControllerChange_Parms
{
    INT ControllerId;
    UBOOL bIsConnected;
    OnlineSubsystemGameSpy_eventOnControllerChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms
{
    UBOOL bIsOpening;
    OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms
{
    UBOOL bIsConnected;
    OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms
{
    FName SessionName;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnRecognitionComplete_Parms
{
    OnlineSubsystemGameSpy_eventOnRecognitionComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnPlayerTalking_Parms
{
    struct FUniqueNetId Player;
    OnlineSubsystemGameSpy_eventOnPlayerTalking_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms
{
    BYTE LocalUserNum;
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms
{
    UBOOL bWasSuccessful;
    OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginFailed_Parms
{
    BYTE LocalUserNum;
    BYTE ErrorCode;
    OnlineSubsystemGameSpy_eventOnLoginFailed_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnFriendsChange_Parms
{
    OnlineSubsystemGameSpy_eventOnFriendsChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnMutingChange_Parms
{
    OnlineSubsystemGameSpy_eventOnMutingChange_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginCancelled_Parms
{
    OnlineSubsystemGameSpy_eventOnLoginCancelled_Parms(EEventParm)
    {
    }
};
struct OnlineSubsystemGameSpy_eventOnLoginChange_Parms
{
    OnlineSubsystemGameSpy_eventOnLoginChange_Parms(EEventParm)
    {
    }
};
class UOnlineSubsystemGameSpy : public UOnlineSubsystemCommonImpl
{
public:
    //## BEGIN PROPS OnlineSubsystemGameSpy
    class UOnlineGameInterfaceGameSpy* CachedGameInt;
    FStringNoInit LocalProfileName;
    FStringNoInit LoggedInPlayerName;
    struct FUniqueNetId LoggedInPlayerId;
    BITFIELD bIsLoginInProcess:1;
    BITFIELD bNeedsKeyboardTicking:1;
    BITFIELD bLastHasConnection:1;
    BITFIELD bIsStatsSessionOk:1;
    BITFIELD bHasGameSpyAccount:1;
    BITFIELD bShouldUseMcp:1;
    FStringNoInit LoggedInPlayerPassword;
    INT LoggedInPlayerNum;
    BYTE LoggedInStatus;
    BYTE bWasKeyboardInputCanceled;
    FStringNoInit RemoteAuthToken;
    FStringNoInit RemoteAuthPartnerChallenge;
    TArrayNoInit<FOnlineAsyncTaskGameSpy*> AsyncTasks;
    FStringNoInit ProfileDataDirectory;
    FStringNoInit ProfileDataExtension;
    struct FPerUserProfileDelegates PerUserReadProfileSettings[4];
    TArrayNoInit<FScriptDelegate> WriteProfileSettingsDelegates;
    class UOnlineProfileSettings* CachedProfile;
    TArrayNoInit<FScriptDelegate> SpeechRecognitionCompleteDelegates;
    TArrayNoInit<FScriptDelegate> ReadFriendsDelegates;
    TArrayNoInit<FScriptDelegate> FriendsChangeDelegates;
    TArrayNoInit<FScriptDelegate> MutingChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginChangeDelegates;
    TArrayNoInit<FScriptDelegate> LoginFailedDelegates;
    TArrayNoInit<FScriptDelegate> LogoutCompletedDelegates;
    TArrayNoInit<FScriptDelegate> AccountCreateDelegates;
    TArrayNoInit<FScriptDelegate> PlayerTalkingDelegates;
    TArrayNoInit<FScriptDelegate> ReadOnlineStatsCompleteDelegates;
    TArrayNoInit<FScriptDelegate> FlushOnlineStatsDelegates;
    TArrayNoInit<FScriptDelegate> ConnectionStatusChangeDelegates;
    TArrayNoInit<FScriptDelegate> ControllerChangeDelegates;
    TArrayNoInit<FScriptDelegate> LinkStatusDelegates;
    TArrayNoInit<FScriptDelegate> ReadTitleFileCompleteDelegates;
    struct FLocalTalkerGS CurrentLocalTalker;
    TArrayNoInit<struct FRemoteTalker> RemoteTalkers;
    void* GPHandle;
    struct SAKEInternal* SakeHandle;
    void* SCHandle;
    GSLoginCertificate* LoginCertificate;
    GSLoginPrivateData* LoginPrivateData;
    INT SakeProfileRecordID;
    INT GameID;
    INT ProductID;
    INT NamespaceID;
    INT PartnerID;
    class UOnlineStatsRead* CurrentStatsRead;
    INT StatsVersion;
    INT NickStatsKeyId;
    INT PlaceStatsKeyId;
    TArrayNoInit<struct FViewPropertyToKeyId> StatsKeyMappings;
    TArrayNoInit<struct FPendingPlayerStats> PendingStats;
    FStringNoInit KeyboardResultsString;
    TArrayNoInit<FScriptDelegate> KeyboardInputDelegates;
    TArrayNoInit<FScriptDelegate> FriendInviteReceivedDelegates;
    TArrayNoInit<FScriptDelegate> FriendMessageReceivedDelegates;
    TArrayNoInit<FScriptDelegate> AddFriendByNameCompleteDelegates;
    FStringNoInit CachedFriendMessage;
    TArrayNoInit<FString> LocationUrlsForInvites;
    FStringNoInit LocationUrl;
    TArrayNoInit<FScriptDelegate> ReceivedGameInviteDelegates;
    TArrayNoInit<FScriptDelegate> JoinFriendGameCompleteDelegates;
    TArrayNoInit<FScriptDelegate> RegisterHostStatGuidCompleteDelegates;
    TArrayNoInit<struct FOnlineFriendMessage> CachedFriendMessages;
    TArrayNoInit<struct FOnlineStatusMapping> StatusMappings;
    FStringNoInit DefaultStatus;
    FStringNoInit GameInviteMessage;
    FNpData* NpData;
    struct FControllerConnectionState ControllerStates[4];
    FLOAT ConnectionPresenceTimeInterval;
    FLOAT ConnectionPresenceElapsedTime;
    FStringNoInit EncryptedProductKey;
    INT NextAuthId;
    FStringNoInit ServerChallenge;
    FStringNoInit ServerResponse;
    INT ServerLocalId;
    TArrayNoInit<struct FUniqueNetId> MuteList;
    FScriptDelegate __OnLoginChange__Delegate;
    FScriptDelegate __OnLoginCancelled__Delegate;
    FScriptDelegate __OnMutingChange__Delegate;
    FScriptDelegate __OnFriendsChange__Delegate;
    FScriptDelegate __OnLoginFailed__Delegate;
    FScriptDelegate __OnLogoutCompleted__Delegate;
    FScriptDelegate __OnReadProfileSettingsComplete__Delegate;
    FScriptDelegate __OnWriteProfileSettingsComplete__Delegate;
    FScriptDelegate __OnReadFriendsComplete__Delegate;
    FScriptDelegate __OnPlayerTalking__Delegate;
    FScriptDelegate __OnRecognitionComplete__Delegate;
    FScriptDelegate __OnReadOnlineStatsComplete__Delegate;
    FScriptDelegate __OnFlushOnlineStatsComplete__Delegate;
    FScriptDelegate __OnLinkStatusChange__Delegate;
    FScriptDelegate __OnExternalUIChange__Delegate;
    FScriptDelegate __OnControllerChange__Delegate;
    FScriptDelegate __OnConnectionStatusChange__Delegate;
    FScriptDelegate __OnStorageDeviceChange__Delegate;
    FScriptDelegate __OnReadTitleFileComplete__Delegate;
    FScriptDelegate __OnCreateOnlineAccountCompleted__Delegate;
    FScriptDelegate __OnKeyboardInputComplete__Delegate;
    FScriptDelegate __OnAddFriendByNameComplete__Delegate;
    FScriptDelegate __OnFriendInviteReceived__Delegate;
    FScriptDelegate __OnReceivedGameInvite__Delegate;
    FScriptDelegate __OnJoinFriendGameComplete__Delegate;
    FScriptDelegate __OnFriendMessageReceived__Delegate;
    FScriptDelegate __OnRegisterHostStatGuidComplete__Delegate;
    //## END PROPS OnlineSubsystemGameSpy

    virtual UBOOL Init();
    virtual UBOOL ShowLoginUI(UBOOL bShowOnlineOnly=FALSE);
    virtual UBOOL Login(BYTE LocalUserNum,const FString& LoginName,const FString& Password,UBOOL bWantsLocalOnly=FALSE);
    virtual UBOOL AutoLogin();
    virtual UBOOL Logout(BYTE LocalUserNum);
    virtual BYTE GetLoginStatus(BYTE LocalUserNum);
    virtual BYTE CanPlayOnline(BYTE LocalUserNum);
    virtual BYTE CanCommunicate(BYTE LocalUserNum);
    virtual UBOOL IsFriend(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL AreAnyFriends(BYTE LocalUserNum,TArray<struct FFriendsQuery>& Query);
    virtual UBOOL ReadProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL WriteProfileSettings(BYTE LocalUserNum,class UOnlineProfileSettings* ProfileSettings);
    virtual UBOOL ReadFriendsList(BYTE LocalUserNum,INT Count=0,INT StartingAt=0);
    virtual BYTE GetFriendsList(BYTE LocalUserNum,TArray<struct FOnlineFriend>& Friends,INT Count=0,INT StartingAt=0);
    virtual UBOOL RegisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL UnregisterLocalTalker(BYTE LocalUserNum);
    virtual UBOOL RegisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL UnregisterRemoteTalker(struct FUniqueNetId PlayerID);
    virtual UBOOL IsLocalPlayerTalking(BYTE LocalUserNum);
    virtual UBOOL IsRemotePlayerTalking(struct FUniqueNetId PlayerID);
    virtual UBOOL IsHeadsetPresent(BYTE LocalUserNum);
    virtual UBOOL SetRemoteTalkerPriority(BYTE LocalUserNum,struct FUniqueNetId PlayerID,INT Priority);
    virtual UBOOL MuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual UBOOL UnmuteRemoteTalker(BYTE LocalUserNum,struct FUniqueNetId PlayerID);
    virtual void StartNetworkedVoice(BYTE LocalUserNum);
    virtual void StopNetworkedVoice(BYTE LocalUserNum);
    virtual UBOOL StartSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL StopSpeechRecognition(BYTE LocalUserNum);
    virtual UBOOL GetRecognitionResults(BYTE LocalUserNum,TArray<FSpeechRecognizedWord>& Words);
    virtual UBOOL SelectVocabulary(BYTE LocalUserNum,INT VocabularyId);
    virtual UBOOL SetSpeechRecognitionObject(BYTE LocalUserNum,class USpeechRecognition* SpeechRecogObj);
    virtual UBOOL ReadOnlineStats(const TArray<struct FUniqueNetId>& Players,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsForFriends(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead);
    virtual UBOOL ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,INT StartIndex=1,INT NumToRead=100);
    virtual UBOOL ReadOnlineStatsByRankAroundPlayer(BYTE LocalUserNum,class UOnlineStatsRead* StatsRead,INT NumRows=10);
    virtual void FreeStats(class UOnlineStatsRead* StatsRead);
    virtual UBOOL WriteOnlineStats(FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);
    virtual UBOOL FlushOnlineStats(FName SessionName);
    virtual UBOOL WriteOnlinePlayerScores(FName SessionName,INT LeaderboardId,const TArray<struct FOnlinePlayerScore>& PlayerScores);
    virtual UBOOL HasLinkConnection();
    virtual UBOOL IsControllerConnected(INT ControllerId);
    virtual BYTE GetNATType();
    virtual UBOOL ReadTitleFile(const FString& FileToRead);
    virtual UBOOL GetTitleFileContents(const FString& Filename,TArray<BYTE>& FileContents);
    virtual UBOOL CreateOnlineAccount(const FString& UserName,const FString& Password,const FString& EmailAddress,const FString& ProductKey=TEXT(""));
    virtual void SetOnlineStatus(BYTE LocalUserNum,INT StatusId,const TArray<struct FLocalizedStringSetting>& LocalizedStringSettings,const TArray<struct FSettingsProperty>& Properties);
    virtual UBOOL ShowKeyboardUI(BYTE LocalUserNum,const FString& TitleText,const FString& DescriptionText,UBOOL bIsPassword=FALSE,UBOOL bShouldValidate=TRUE,const FString& DefaultText=TEXT(""),INT MaxResultLength=256);
    virtual UBOOL AddFriend(BYTE LocalUserNum,struct FUniqueNetId NewFriend,const FString& Message=TEXT(""));
    virtual UBOOL AddFriendByName(BYTE LocalUserNum,const FString& FriendName,const FString& Message=TEXT(""));
    virtual UBOOL RemoveFriend(BYTE LocalUserNum,struct FUniqueNetId FormerFriend);
    virtual UBOOL AcceptFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL DenyFriendInvite(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer);
    virtual UBOOL SendMessageToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Message);
    virtual UBOOL SendGameInviteToFriend(BYTE LocalUserNum,struct FUniqueNetId Friend,const FString& Text=TEXT(""));
    virtual UBOOL SendGameInviteToFriends(BYTE LocalUserNum,const TArray<struct FUniqueNetId>& Friends,const FString& Text=TEXT(""));
    virtual UBOOL JoinFriendGame(BYTE LocalUserNum,struct FUniqueNetId Friend);
    virtual FString GetHostStatGuid();
    virtual UBOOL RegisterHostStatGuid(const FString& HostStatGuid);
    virtual FString GetClientStatGuid();
    virtual UBOOL RegisterStatGuid(struct FUniqueNetId PlayerID,const FString& ClientStatGuid);
    DECLARE_FUNCTION(execShowLoginUI)
    {
        P_GET_UBOOL_OPTX(bShowOnlineOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=ShowLoginUI(bShowOnlineOnly);
    }
    DECLARE_FUNCTION(execLogin)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(LoginName);
        P_GET_STR(Password);
        P_GET_UBOOL_OPTX(bWantsLocalOnly,FALSE);
        P_FINISH;
        *(UBOOL*)Result=Login(LocalUserNum,LoginName,Password,bWantsLocalOnly);
    }
    DECLARE_FUNCTION(execAutoLogin)
    {
        P_FINISH;
        *(UBOOL*)Result=AutoLogin();
    }
    DECLARE_FUNCTION(execLogout)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=Logout(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetLoginStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=GetLoginStatus(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanPlayOnline)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanPlayOnline(LocalUserNum);
    }
    DECLARE_FUNCTION(execCanCommunicate)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(BYTE*)Result=CanCommunicate(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsFriend(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execAreAnyFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FFriendsQuery,Query);
        P_FINISH;
        *(UBOOL*)Result=AreAnyFriends(LocalUserNum,Query);
    }
    DECLARE_FUNCTION(execReadProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=ReadProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execWriteProfileSettings)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineProfileSettings,ProfileSettings);
        P_FINISH;
        *(UBOOL*)Result=WriteProfileSettings(LocalUserNum,ProfileSettings);
    }
    DECLARE_FUNCTION(execReadFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(UBOOL*)Result=ReadFriendsList(LocalUserNum,Count,StartingAt);
    }
    DECLARE_FUNCTION(execGetFriendsList)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(struct FOnlineFriend,Friends);
        P_GET_INT_OPTX(Count,0);
        P_GET_INT_OPTX(StartingAt,0);
        P_FINISH;
        *(BYTE*)Result=GetFriendsList(LocalUserNum,Friends,Count,StartingAt);
    }
    DECLARE_FUNCTION(execRegisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=RegisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execUnregisterLocalTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=UnregisterLocalTalker(LocalUserNum);
    }
    DECLARE_FUNCTION(execRegisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=RegisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execUnregisterRemoteTalker)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnregisterRemoteTalker(PlayerID);
    }
    DECLARE_FUNCTION(execIsLocalPlayerTalking)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsLocalPlayerTalking(LocalUserNum);
    }
    DECLARE_FUNCTION(execIsRemotePlayerTalking)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=IsRemotePlayerTalking(PlayerID);
    }
    DECLARE_FUNCTION(execIsHeadsetPresent)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=IsHeadsetPresent(LocalUserNum);
    }
    DECLARE_FUNCTION(execSetRemoteTalkerPriority)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_INT(Priority);
        P_FINISH;
        *(UBOOL*)Result=SetRemoteTalkerPriority(LocalUserNum,PlayerID,Priority);
    }
    DECLARE_FUNCTION(execMuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=MuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execUnmuteRemoteTalker)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_FINISH;
        *(UBOOL*)Result=UnmuteRemoteTalker(LocalUserNum,PlayerID);
    }
    DECLARE_FUNCTION(execStartNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        StartNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopNetworkedVoice)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        StopNetworkedVoice(LocalUserNum);
    }
    DECLARE_FUNCTION(execStartSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StartSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execStopSpeechRecognition)
    {
        P_GET_BYTE(LocalUserNum);
        P_FINISH;
        *(UBOOL*)Result=StopSpeechRecognition(LocalUserNum);
    }
    DECLARE_FUNCTION(execGetRecognitionResults)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY_REF(FSpeechRecognizedWord,Words);
        P_FINISH;
        *(UBOOL*)Result=GetRecognitionResults(LocalUserNum,Words);
    }
    DECLARE_FUNCTION(execSelectVocabulary)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(VocabularyId);
        P_FINISH;
        *(UBOOL*)Result=SelectVocabulary(LocalUserNum,VocabularyId);
    }
    DECLARE_FUNCTION(execSetSpeechRecognitionObject)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(USpeechRecognition,SpeechRecogObj);
        P_FINISH;
        *(UBOOL*)Result=SetSpeechRecognitionObject(LocalUserNum,SpeechRecogObj);
    }
    DECLARE_FUNCTION(execReadOnlineStats)
    {
        P_GET_TARRAY_REF(struct FUniqueNetId,Players);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStats(Players,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsForFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsForFriends(LocalUserNum,StatsRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRank)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(StartIndex,1);
        P_GET_INT_OPTX(NumToRead,100);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRank(StatsRead,StartIndex,NumToRead);
    }
    DECLARE_FUNCTION(execReadOnlineStatsByRankAroundPlayer)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_GET_INT_OPTX(NumRows,10);
        P_FINISH;
        *(UBOOL*)Result=ReadOnlineStatsByRankAroundPlayer(LocalUserNum,StatsRead,NumRows);
    }
    DECLARE_FUNCTION(execFreeStats)
    {
        P_GET_OBJECT(UOnlineStatsRead,StatsRead);
        P_FINISH;
        FreeStats(StatsRead);
    }
    DECLARE_FUNCTION(execWriteOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_GET_STRUCT(struct FUniqueNetId,Player);
        P_GET_OBJECT(UOnlineStatsWrite,StatsWrite);
        P_FINISH;
        *(UBOOL*)Result=WriteOnlineStats(SessionName,Player,StatsWrite);
    }
    DECLARE_FUNCTION(execFlushOnlineStats)
    {
        P_GET_NAME(SessionName);
        P_FINISH;
        *(UBOOL*)Result=FlushOnlineStats(SessionName);
    }
    DECLARE_FUNCTION(execWriteOnlinePlayerScores)
    {
        P_GET_NAME(SessionName);
        P_GET_INT(LeaderboardId);
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        *(UBOOL*)Result=WriteOnlinePlayerScores(SessionName,LeaderboardId,PlayerScores);
    }
    DECLARE_FUNCTION(execHasLinkConnection)
    {
        P_FINISH;
        *(UBOOL*)Result=HasLinkConnection();
    }
    DECLARE_FUNCTION(execIsControllerConnected)
    {
        P_GET_INT(ControllerId);
        P_FINISH;
        *(UBOOL*)Result=IsControllerConnected(ControllerId);
    }
    DECLARE_FUNCTION(execGetNATType)
    {
        P_FINISH;
        *(BYTE*)Result=GetNATType();
    }
    DECLARE_FUNCTION(execReadTitleFile)
    {
        P_GET_STR(FileToRead);
        P_FINISH;
        *(UBOOL*)Result=ReadTitleFile(FileToRead);
    }
    DECLARE_FUNCTION(execGetTitleFileContents)
    {
        P_GET_STR(Filename);
        P_GET_TARRAY_REF(BYTE,FileContents);
        P_FINISH;
        *(UBOOL*)Result=GetTitleFileContents(Filename,FileContents);
    }
    DECLARE_FUNCTION(execCreateOnlineAccount)
    {
        P_GET_STR(UserName);
        P_GET_STR(Password);
        P_GET_STR(EmailAddress);
        P_GET_STR_OPTX(ProductKey,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=CreateOnlineAccount(UserName,Password,EmailAddress,ProductKey);
    }
    DECLARE_FUNCTION(execSetOnlineStatus)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_INT(StatusId);
        P_GET_TARRAY_REF(struct FLocalizedStringSetting,LocalizedStringSettings);
        P_GET_TARRAY_REF(struct FSettingsProperty,Properties);
        P_FINISH;
        SetOnlineStatus(LocalUserNum,StatusId,LocalizedStringSettings,Properties);
    }
    DECLARE_FUNCTION(execShowKeyboardUI)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(TitleText);
        P_GET_STR(DescriptionText);
        P_GET_UBOOL_OPTX(bIsPassword,FALSE);
        P_GET_UBOOL_OPTX(bShouldValidate,TRUE);
        P_GET_STR_OPTX(DefaultText,TEXT(""));
        P_GET_INT_OPTX(MaxResultLength,256);
        P_FINISH;
        *(UBOOL*)Result=ShowKeyboardUI(LocalUserNum,TitleText,DescriptionText,bIsPassword,bShouldValidate,DefaultText,MaxResultLength);
    }
    DECLARE_FUNCTION(execAddFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,NewFriend);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=AddFriend(LocalUserNum,NewFriend,Message);
    }
    DECLARE_FUNCTION(execAddFriendByName)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STR(FriendName);
        P_GET_STR_OPTX(Message,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=AddFriendByName(LocalUserNum,FriendName,Message);
    }
    DECLARE_FUNCTION(execRemoveFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,FormerFriend);
        P_FINISH;
        *(UBOOL*)Result=RemoveFriend(LocalUserNum,FormerFriend);
    }
    DECLARE_FUNCTION(execAcceptFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=AcceptFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execDenyFriendInvite)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,RequestingPlayer);
        P_FINISH;
        *(UBOOL*)Result=DenyFriendInvite(LocalUserNum,RequestingPlayer);
    }
    DECLARE_FUNCTION(execSendMessageToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR(Message);
        P_FINISH;
        *(UBOOL*)Result=SendMessageToFriend(LocalUserNum,Friend,Message);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriend)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=SendGameInviteToFriend(LocalUserNum,Friend,Text);
    }
    DECLARE_FUNCTION(execSendGameInviteToFriends)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_TARRAY(struct FUniqueNetId,Friends);
        P_GET_STR_OPTX(Text,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=SendGameInviteToFriends(LocalUserNum,Friends,Text);
    }
    DECLARE_FUNCTION(execJoinFriendGame)
    {
        P_GET_BYTE(LocalUserNum);
        P_GET_STRUCT(struct FUniqueNetId,Friend);
        P_FINISH;
        *(UBOOL*)Result=JoinFriendGame(LocalUserNum,Friend);
    }
    DECLARE_FUNCTION(execGetHostStatGuid)
    {
        P_FINISH;
        *(FString*)Result=GetHostStatGuid();
    }
    DECLARE_FUNCTION(execRegisterHostStatGuid)
    {
        P_GET_STR_REF(HostStatGuid);
        P_FINISH;
        *(UBOOL*)Result=RegisterHostStatGuid(HostStatGuid);
    }
    DECLARE_FUNCTION(execGetClientStatGuid)
    {
        P_FINISH;
        *(FString*)Result=GetClientStatGuid();
    }
    DECLARE_FUNCTION(execRegisterStatGuid)
    {
        P_GET_STRUCT(struct FUniqueNetId,PlayerID);
        P_GET_STR_REF(ClientStatGuid);
        P_FINISH;
        *(UBOOL*)Result=RegisterStatGuid(PlayerID,ClientStatGuid);
    }
    void delegateOnRegisterHostStatGuidComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnRegisterHostStatGuidComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnRegisterHostStatGuidComplete,&__OnRegisterHostStatGuidComplete__Delegate,&Parms);
    }
    void delegateOnFriendMessageReceived(BYTE LocalUserNum,struct FUniqueNetId SendingPlayer,const FString& SendingNick,const FString& Message)
    {
        OnlineSubsystemGameSpy_eventOnFriendMessageReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.SendingPlayer=SendingPlayer;
        Parms.SendingNick=SendingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendMessageReceived,&__OnFriendMessageReceived__Delegate,&Parms);
    }
    void delegateOnJoinFriendGameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnJoinFriendGameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnJoinFriendGameComplete,&__OnJoinFriendGameComplete__Delegate,&Parms);
    }
    void delegateOnReceivedGameInvite(BYTE LocalUserNum,const FString& InviterName)
    {
        OnlineSubsystemGameSpy_eventOnReceivedGameInvite_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.InviterName=InviterName;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReceivedGameInvite,&__OnReceivedGameInvite__Delegate,&Parms);
    }
    void delegateOnFriendInviteReceived(BYTE LocalUserNum,struct FUniqueNetId RequestingPlayer,const FString& RequestingNick,const FString& Message)
    {
        OnlineSubsystemGameSpy_eventOnFriendInviteReceived_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.RequestingPlayer=RequestingPlayer;
        Parms.RequestingNick=RequestingNick;
        Parms.Message=Message;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendInviteReceived,&__OnFriendInviteReceived__Delegate,&Parms);
    }
    void delegateOnAddFriendByNameComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnAddFriendByNameComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnAddFriendByNameComplete,&__OnAddFriendByNameComplete__Delegate,&Parms);
    }
    void delegateOnKeyboardInputComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnKeyboardInputComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnKeyboardInputComplete,&__OnKeyboardInputComplete__Delegate,&Parms);
    }
    void delegateOnCreateOnlineAccountCompleted(BYTE ErrorStatus)
    {
        OnlineSubsystemGameSpy_eventOnCreateOnlineAccountCompleted_Parms Parms(EC_EventParm);
        Parms.ErrorStatus=ErrorStatus;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnCreateOnlineAccountCompleted,&__OnCreateOnlineAccountCompleted__Delegate,&Parms);
    }
    void delegateOnReadTitleFileComplete(UBOOL bWasSuccessful,const FString& Filename)
    {
        OnlineSubsystemGameSpy_eventOnReadTitleFileComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        Parms.Filename=Filename;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadTitleFileComplete,&__OnReadTitleFileComplete__Delegate,&Parms);
    }
    void delegateOnStorageDeviceChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnStorageDeviceChange,&__OnStorageDeviceChange__Delegate,NULL);
    }
    void delegateOnConnectionStatusChange(BYTE ConnectionStatus)
    {
        OnlineSubsystemGameSpy_eventOnConnectionStatusChange_Parms Parms(EC_EventParm);
        Parms.ConnectionStatus=ConnectionStatus;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnConnectionStatusChange,&__OnConnectionStatusChange__Delegate,&Parms);
    }
    void delegateOnControllerChange(INT ControllerId,UBOOL bIsConnected)
    {
        OnlineSubsystemGameSpy_eventOnControllerChange_Parms Parms(EC_EventParm);
        Parms.ControllerId=ControllerId;
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnControllerChange,&__OnControllerChange__Delegate,&Parms);
    }
    void delegateOnExternalUIChange(UBOOL bIsOpening)
    {
        OnlineSubsystemGameSpy_eventOnExternalUIChange_Parms Parms(EC_EventParm);
        Parms.bIsOpening=bIsOpening ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnExternalUIChange,&__OnExternalUIChange__Delegate,&Parms);
    }
    void delegateOnLinkStatusChange(UBOOL bIsConnected)
    {
        OnlineSubsystemGameSpy_eventOnLinkStatusChange_Parms Parms(EC_EventParm);
        Parms.bIsConnected=bIsConnected ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLinkStatusChange,&__OnLinkStatusChange__Delegate,&Parms);
    }
    void delegateOnFlushOnlineStatsComplete(FName SessionName,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnFlushOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.SessionName=SessionName;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFlushOnlineStatsComplete,&__OnFlushOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnReadOnlineStatsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadOnlineStatsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadOnlineStatsComplete,&__OnReadOnlineStatsComplete__Delegate,&Parms);
    }
    void delegateOnRecognitionComplete()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnRecognitionComplete,&__OnRecognitionComplete__Delegate,NULL);
    }
    void delegateOnPlayerTalking(struct FUniqueNetId Player)
    {
        OnlineSubsystemGameSpy_eventOnPlayerTalking_Parms Parms(EC_EventParm);
        Parms.Player=Player;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnPlayerTalking,&__OnPlayerTalking__Delegate,&Parms);
    }
    void delegateOnReadFriendsComplete(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadFriendsComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadFriendsComplete,&__OnReadFriendsComplete__Delegate,&Parms);
    }
    void delegateOnWriteProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnWriteProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnWriteProfileSettingsComplete,&__OnWriteProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnReadProfileSettingsComplete(BYTE LocalUserNum,UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnReadProfileSettingsComplete_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnReadProfileSettingsComplete,&__OnReadProfileSettingsComplete__Delegate,&Parms);
    }
    void delegateOnLogoutCompleted(UBOOL bWasSuccessful)
    {
        OnlineSubsystemGameSpy_eventOnLogoutCompleted_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLogoutCompleted,&__OnLogoutCompleted__Delegate,&Parms);
    }
    void delegateOnLoginFailed(BYTE LocalUserNum,BYTE ErrorCode)
    {
        OnlineSubsystemGameSpy_eventOnLoginFailed_Parms Parms(EC_EventParm);
        Parms.LocalUserNum=LocalUserNum;
        Parms.ErrorCode=ErrorCode;
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginFailed,&__OnLoginFailed__Delegate,&Parms);
    }
    void delegateOnFriendsChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnFriendsChange,&__OnFriendsChange__Delegate,NULL);
    }
    void delegateOnMutingChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnMutingChange,&__OnMutingChange__Delegate,NULL);
    }
    void delegateOnLoginCancelled()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginCancelled,&__OnLoginCancelled__Delegate,NULL);
    }
    void delegateOnLoginChange()
    {
        ProcessDelegate(ONLINESUBSYSTEMGAMESPY_OnLoginChange,&__OnLoginChange__Delegate,NULL);
    }
    DECLARE_CLASS(UOnlineSubsystemGameSpy,UOnlineSubsystemCommonImpl,0|CLASS_Config,OnlineSubsystemGameSpy)
    #include "UOnlineSubsystemGameSpy.h"
};

#endif // !INCLUDED_ONLINESUBSYSTEMGAMESPY_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execQueryNonAdvertisedData);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execUnregisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execRegisterPlayer);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UOnlineGameInterfaceGameSpy,-1,execUpdateOnlineGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetClientStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetHostStatGuid);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execJoinFriendGame);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendGameInviteToFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendGameInviteToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSendMessageToFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execDenyFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAcceptFriendInvite);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRemoveFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAddFriendByName);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAddFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execShowKeyboardUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCreateOnlineAccount);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetTitleFileContents);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadTitleFile);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetNATType);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsControllerConnected);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execHasLinkConnection);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteOnlinePlayerScores);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execFlushOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execFreeStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsByRankAroundPlayer);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsByRank);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStatsForFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadOnlineStats);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetSpeechRecognitionObject);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSelectVocabulary);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetRecognitionResults);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStopSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStartSpeechRecognition);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStopNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execStartNetworkedVoice);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnmuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execMuteRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execSetRemoteTalkerPriority);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsHeadsetPresent);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsRemotePlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsLocalPlayerTalking);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnregisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterRemoteTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execUnregisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execRegisterLocalTalker);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadFriendsList);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execWriteProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execReadProfileSettings);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAreAnyFriends);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCanCommunicate);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execCanPlayOnline);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execGetLoginStatus);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execLogout);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execAutoLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execLogin);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execShowLoginUI);
AUTOGENERATE_FUNCTION(UOnlineSubsystemGameSpy,-1,execInit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS
#define ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS

DECLARE_NATIVE_TYPE(OnlineSubsystemGameSpy,UOnlineGameInterfaceGameSpy);
DECLARE_NATIVE_TYPE(OnlineSubsystemGameSpy,UOnlineSubsystemGameSpy);

#define AUTO_INITIALIZE_REGISTRANTS_ONLINESUBSYSTEMGAMESPY \
	UOnlineGameInterfaceGameSpy::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindOnlineSubsystemGameSpyUOnlineGameInterfaceGameSpyNative; \
	UOnlineSubsystemGameSpy::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindOnlineSubsystemGameSpyUOnlineSubsystemGameSpyNative; \

#endif // ONLINESUBSYSTEMGAMESPY_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UOnlineGameInterfaceGameSpy) GOnlineSubsystemGameSpyUOnlineGameInterfaceGameSpyNatives[] = 
{ 
	MAP_NATIVE(UOnlineGameInterfaceGameSpy,execQueryNonAdvertisedData)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy,execUnregisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy,execRegisterPlayer)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy,execAcceptGameInvite)
	MAP_NATIVE(UOnlineGameInterfaceGameSpy,execUpdateOnlineGame)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(OnlineSubsystemGameSpy,UOnlineGameInterfaceGameSpy);

NATIVE_INFO(UOnlineSubsystemGameSpy) GOnlineSubsystemGameSpyUOnlineSubsystemGameSpyNatives[] = 
{ 
	MAP_NATIVE(UOnlineSubsystemGameSpy,execRegisterStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetClientStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execRegisterHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetHostStatGuid)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execJoinFriendGame)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSendGameInviteToFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSendGameInviteToFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSendMessageToFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execDenyFriendInvite)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execAcceptFriendInvite)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execRemoveFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execAddFriendByName)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execAddFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execShowKeyboardUI)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSetOnlineStatus)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execCreateOnlineAccount)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetTitleFileContents)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadTitleFile)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetNATType)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execIsControllerConnected)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execHasLinkConnection)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execWriteOnlinePlayerScores)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execFlushOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execWriteOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execFreeStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadOnlineStatsByRankAroundPlayer)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadOnlineStatsByRank)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadOnlineStatsForFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadOnlineStats)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSetSpeechRecognitionObject)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSelectVocabulary)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetRecognitionResults)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execStopSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execStartSpeechRecognition)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execStopNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execStartNetworkedVoice)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execUnmuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execMuteRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execSetRemoteTalkerPriority)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execIsHeadsetPresent)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execIsRemotePlayerTalking)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execIsLocalPlayerTalking)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execUnregisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execRegisterRemoteTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execUnregisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execRegisterLocalTalker)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetFriendsList)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadFriendsList)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execWriteProfileSettings)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execReadProfileSettings)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execAreAnyFriends)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execIsFriend)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execCanCommunicate)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execCanPlayOnline)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execGetLoginStatus)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execLogout)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execAutoLogin)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execLogin)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execShowLoginUI)
	MAP_NATIVE(UOnlineSubsystemGameSpy,execInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(OnlineSubsystemGameSpy,UOnlineSubsystemGameSpy);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,OnlineGameInterfaceGameSpy,QR2Handle)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineGameInterfaceGameSpy,__OnUnregisterPlayerComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineGameInterfaceGameSpy)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemGameSpy,CachedGameInt)
VERIFY_CLASS_OFFSET_NODIE(U,OnlineSubsystemGameSpy,__OnRegisterHostStatGuidComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UOnlineSubsystemGameSpy)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
