/**
 * Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
 */
class UTInvulnerability extends UTTimedPowerup;

/** ambient sound */
var SoundCue InvulnerabilitySound;
/** sound played when the Invulnerability is running out */
var SoundCue InvulnerabilityFadingSound;
/** overlay material applied to owner */
var MaterialInterface OverlayMaterialInstance;

function GivenTo(Pawn NewOwner, optional bool bDoNotActivate)
{
	local UTPawn P;

	Super.GivenTo(NewOwner, bDoNotActivate);

	P = UTPawn(NewOwner);
	if (P != None)
	{
		// make invulnerable
		P.bIsInvulnerable = true;

		// apply Invulnerability overlay
		P.SetOverlayMaterial(OverlayMaterialInstance);

		// set ambient sound
		P.SetPawnAmbientSound(InvulnerabilitySound);

		// juggernaut if already has berserk or invulnerability
		if ( ((P.FireRateMultiplier < 1.0) || (P.DamageScaling > 1.0)) && (PlayerController(P.Controller) != None) )
		{
			PlayerController(P.Controller).ReceiveLocalizedMessage( class'UTPowerupRewardMessage', 0 );
		}
	}
	if ( UTGame(WorldInfo.Game) != None )
		UTGame(WorldInfo.Game).bTempForceRespawn = true;

	// set timer for ending sounds
	SetTimer(TimeRemaining - 3.0, false, 'PlayInvulnerabilityFadingSound');
}

reliable client function ClientGivenTo(Pawn NewOwner, bool bDoNotActivate)
{
	Super.ClientGivenTo(NewOwner, bDoNotActivate);

	if (UTPawn(NewOwner) != None)
	{
		UTPawn(NewOwner).RemainingBodyMatDuration = 0.0;
	}
}

function ItemRemovedFromInvManager()
{
	local UTPlayerReplicationInfo UTPRI;
	local UTPawn P;

	P = UTPawn(Owner);
	if (P != None)
	{
		P.bIsInvulnerable = false;
		P.SetOverlayMaterial(none);
		P.SetPawnAmbientSound(None);

		//Stop the timer on the powerup stat
		if (P.DrivenVehicle != None)
		{
			UTPRI = UTPlayerReplicationInfo(P.DrivenVehicle.PlayerReplicationInfo);
		}
		else
		{
			UTPRI = UTPlayerReplicationInfo(P.PlayerReplicationInfo);
		}
		if (UTPRI != None)
		{
			UTPRI.StopPowerupTimeStat(GetPowerupStatName());
		}
	}
	SetTimer(0.0, false, 'PlayInvulnerabilityFadingSound');
	if ( UTGame(WorldInfo.Game) != None )
		UTGame(WorldInfo.Game).bTempForceRespawn = false;
}

/** called on a timer to play Invulnerability ending sound */
function PlayInvulnerabilityFadingSound()
{
	// reset timer if time got added
	if (TimeRemaining > 3.0)
	{
		SetTimer(TimeRemaining - 3.0, false, 'PlayInvulnerabilityFadingSound');
	}
	else
	{
		Instigator.PlaySound(InvulnerabilityFadingSound);
		SetTimer(0.75, false, 'PlayInvulnerabilityFadingSound');
	}
}

defaultproperties
{
	PowerupStatName=POWERUPTIME_INVULNERABILITY

	Begin Object Class=StaticMeshComponent Name=MeshComponentA
		StaticMesh=StaticMesh'Pickups.Invulnerability.Mesh.S_Pickups_Invulnerability'
		AlwaysLoadOnClient=true
		AlwaysLoadOnServer=true
		CastShadow=false
		bForceDirectLightMap=true
		bCastDynamicShadow=false
		bAcceptsLights=true
		CollideActors=false
		BlockRigidBody=false
		MaxDrawDistance=8000
		bUseAsOccluder=FALSE
		Translation=(X=0.0,Y=0.0,Z=-20.0)
	End Object
	DroppedPickupMesh=MeshComponentA
	PickupFactoryMesh=MeshComponentA

	Begin Object Class=UTParticleSystemComponent Name=InvulParticles
		Template=ParticleSystem'Pickups.Invulnerability.Effects.P_Pickups_Invulnerability_Idle'
		bAutoActivate=false
		SecondsBeforeInactive=1.0f
		Translation=(X=0.0,Y=0.0,Z=-20.0)
	End Object
	DroppedPickupParticles=InvulParticles

	bReceiveOwnerEvents=true
	bRenderOverlays=true
	MaxDesireability=5.0
	RespawnTime=120.000000
	PickupSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_PickupCue'

	InvulnerabilitySound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_PowerLoopCue'
	InvulnerabilityFadingSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_WarningCue'
	PowerupOverSound=SoundCue'A_Pickups_Powerups.PowerUps.A_Powerup_Invulnerability_EndCue'
	OverlayMaterialInstance=Material'Pickups.Invulnerability.M_Invulnerability_Overlay'
	HudIndex=3
	IconCoords=(U=779,UL=64,V=0,VL=41)
	PP_Scene_Highlights=(X=-0.17)
}
