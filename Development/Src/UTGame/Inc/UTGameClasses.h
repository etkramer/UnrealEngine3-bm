/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_UTGAME_ENUMS
#define INCLUDED_UTGAME_ENUMS 1

enum EUTChapterType
{
    UTCT_JimBrownNeedsToSendMartinEmailWithTheChapterNames=0,
    UTCT_SoWeCanRockThisUpYo=1,
    UTCT_MAX                =2,
};
enum EUTGameAchievements
{
    EUTA_InvalidAchievement =0,
    EUTA_CAMPAIGN_CompleteAllTraining=1,
    EUTA_CAMPAIGN_DeployLeviathan=2,
    EUTA_CAMPAIGN_DefeatLauren=3,
    EUTA_CAMPAIGN_SignTreaty=4,
    EUTA_CAMPAIGN_DefeatSelig=5,
    EUTA_CAMPAIGN_LiandriMainframe=6,
    EUTA_CAMPAIGN_HijackDarkwalker=7,
    EUTA_CAMPAIGN_ControlTarydium=8,
    EUTA_CAMPAIGN_StealNecrisTech=9,
    EUTA_CAMPAIGN_ReachOmicron=10,
    EUTA_CAMPAIGN_DefeatLoque=11,
    EUTA_CAMPAIGN_SignTreatyExpert=12,
    EUTA_CAMPAIGN_LiandriMainframeExpert=13,
    EUTA_CAMPAIGN_ReachOmicronExpert=14,
    EUTA_CAMPAIGN_DefeatLoqueExpert=15,
    EUTA_CAMPAIGN_DefeatLaurenGodlike=16,
    EUTA_CAMPAIGN_DefeatSeligGodlike=17,
    EUTA_CAMPAIGN_DefeatMatrixGodlike=18,
    EUTA_CAMPAIGN_DefeatLoqueGodlike=19,
    EUTA_COOP_Complete1     =20,
    EUTA_COOP_Complete10    =21,
    EUTA_COOP_CompleteCampaign=22,
    EUTA_IA_EveryGameMode   =23,
    EUTA_IA_Untouchable     =24,
    EUTA_EXPLORE_AllPowerups=25,
    EUTA_EXPLORE_EveryMutator=26,
    EUTA_EXPLORE_EveryWeaponKill=27,
    EUTA_WEAPON_BrainSurgeon=28,
    EUTA_WEAPON_ShockTherapy=29,
    EUTA_WEAPON_GooGod      =30,
    EUTA_WEAPON_Pistolero   =31,
    EUTA_WEAPON_Hammerhead  =32,
    EUTA_WEAPON_StrongestLink=33,
    EUTA_WEAPON_BombSquad   =34,
    EUTA_WEAPON_BigGameHunter=35,
    EUTA_VEHICLE_Hoverboard =36,
    EUTA_VEHICLE_Armadillo  =37,
    EUTA_VEHICLE_Gunner     =38,
    EUTA_VEHICLE_Ace        =39,
    EUTA_VEHICLE_Deathwish  =40,
    EUTA_HUMILIATION_SerialKiller=41,
    EUTA_HUMILIATION_SirSlaysALot=42,
    EUTA_HUMILIATION_PathOfDestruction=43,
    EUTA_HUMILIATION_Deity  =44,
    EUTA_VERSUS_GetItOn     =45,
    EUTA_VERSUS_SameTeam    =46,
    EUTA_VERSUS_Nemecide    =47,
    EUTA_VERSUS_AroundTheWorld=48,
    EUTA_VERSUS_Dedication  =49,
    EUTA_VERSUS_MeetInterestingPeople=50,
    EUTA_VERSUS_GetALife    =51,
    EUTA_VERSUS_KillGetALifers=52,
    EUTA_RANKED_RememberYourFirst=53,
    EUTA_RANKED_DontHateThePlayer=54,
    EUTA_RANKED_MixItUp     =55,
    EUTA_RANKED_HatTrick    =56,
    EUTA_RANKED_BloodSweatTears=57,
    EUTA_RANKED_TenFootPole =58,
    EUTA_MAX                =59,
};
enum ECrossfadeType
{
    CFT_BeginningOfMeasure  =0,
    CFT_EndOfMeasure        =1,
    CFT_MAX                 =2,
};
enum ESinglePlayerSkillLevels
{
    ESPSKILL_SkillLevel0    =0,
    ESPSKILL_SkillLevel1    =1,
    ESPSKILL_SkillLevel2    =2,
    ESPSKILL_SkillLevel3    =3,
    ESPSKILL_SkillLevelMAX  =4,
    ESPSKILL_MAX            =5,
};
enum ESinglePlayerPersistentKeys
{
    ESPKey_None             =0,
    ESPKey_DarkWalkerUnlock =1,
    ESPKey_CanStealNecris   =2,
    ESPKey_IronGuardUpgrade =3,
    ESPKey_LiandriUpgrade   =4,
    ESPKey_MAX              =5,
};
enum EUTUnlockType
{
    EUnlockType_Count       =0,
    EUnlockType_Bitmask     =1,
    EUnlockType_MAX         =2,
};
enum EUTBindableKeys
{
    UTBND_Unbound           =0,
    UTBND_MouseX            =1,
    UTBND_MouseY            =2,
    UTBND_MouseScrollUp     =3,
    UTBND_MouseScrollDown   =4,
    UTBND_LeftMouseButton   =5,
    UTBND_RightMouseButton  =6,
    UTBND_MiddleMouseButton =7,
    UTBND_ThumbMouseButton  =8,
    UTBND_ThumbMouseButton2 =9,
    UTBND_BackSpace         =10,
    UTBND_Tab               =11,
    UTBND_Enter             =12,
    UTBND_Pause             =13,
    UTBND_CapsLock          =14,
    UTBND_Escape            =15,
    UTBND_SpaceBar          =16,
    UTBND_PageUp            =17,
    UTBND_PageDown          =18,
    UTBND_End               =19,
    UTBND_Home              =20,
    UTBND_Left              =21,
    UTBND_Up                =22,
    UTBND_Right             =23,
    UTBND_Down              =24,
    UTBND_Insert            =25,
    UTBND_Delete            =26,
    UTBND_Zero              =27,
    UTBND_One               =28,
    UTBND_Two               =29,
    UTBND_Three             =30,
    UTBND_Four              =31,
    UTBND_Five              =32,
    UTBND_Six               =33,
    UTBND_Seven             =34,
    UTBND_Eight             =35,
    UTBND_Nine              =36,
    UTBND_A                 =37,
    UTBND_B                 =38,
    UTBND_C                 =39,
    UTBND_D                 =40,
    UTBND_E                 =41,
    UTBND_F                 =42,
    UTBND_G                 =43,
    UTBND_H                 =44,
    UTBND_I                 =45,
    UTBND_J                 =46,
    UTBND_K                 =47,
    UTBND_L                 =48,
    UTBND_M                 =49,
    UTBND_N                 =50,
    UTBND_O                 =51,
    UTBND_P                 =52,
    UTBND_Q                 =53,
    UTBND_R                 =54,
    UTBND_S                 =55,
    UTBND_T                 =56,
    UTBND_U                 =57,
    UTBND_V                 =58,
    UTBND_W                 =59,
    UTBND_X                 =60,
    UTBND_Y                 =61,
    UTBND_Z                 =62,
    UTBND_NumPadZero        =63,
    UTBND_NumPadOne         =64,
    UTBND_NumPadTwo         =65,
    UTBND_NumPadThree       =66,
    UTBND_NumPadFour        =67,
    UTBND_NumPadFive        =68,
    UTBND_NumPadSix         =69,
    UTBND_NumPadSeven       =70,
    UTBND_NumPadEight       =71,
    UTBND_NumPadNine        =72,
    UTBND_Multiply          =73,
    UTBND_Add               =74,
    UTBND_Subtract          =75,
    UTBND_Decimal           =76,
    UTBND_Divide            =77,
    UTBND_F1                =78,
    UTBND_F2                =79,
    UTBND_F3                =80,
    UTBND_F4                =81,
    UTBND_F5                =82,
    UTBND_F6                =83,
    UTBND_F7                =84,
    UTBND_F8                =85,
    UTBND_F9                =86,
    UTBND_F10               =87,
    UTBND_F11               =88,
    UTBND_F12               =89,
    UTBND_NumLock           =90,
    UTBND_ScrollLock        =91,
    UTBND_LeftShift         =92,
    UTBND_RightShift        =93,
    UTBND_LeftControl       =94,
    UTBND_RightControl      =95,
    UTBND_LeftAlt           =96,
    UTBND_RightAlt          =97,
    UTBND_Semicolon         =98,
    UTBND_Equals            =99,
    UTBND_Comma             =100,
    UTBND_Underscore        =101,
    UTBND_Period            =102,
    UTBND_Slash             =103,
    UTBND_Tilde             =104,
    UTBND_LeftBracket       =105,
    UTBND_Backslash         =106,
    UTBND_RightBracket      =107,
    UTBND_Quote             =108,
    UTBND_LeftStickX        =109,
    UTBND_LeftStickY        =110,
    UTBND_LeftStick_Click   =111,
    UTBND_RightStick_X      =112,
    UTBND_RightStick_Y      =113,
    UTBND_RightStick_Click  =114,
    UTBND_ButtonA           =115,
    UTBND_ButtonB           =116,
    UTBND_ButtonX           =117,
    UTBND_ButtonY           =118,
    UTBND_LeftShoulder      =119,
    UTBND_RightShoulder     =120,
    UTBND_LeftTrigger       =121,
    UTBND_RightTrigger      =122,
    UTBND_Start             =123,
    UTBND_Select            =124,
    UTBND_DPad_Up           =125,
    UTBND_DPad_Down         =126,
    UTBND_DPad_Left         =127,
    UTBND_DPad_Right        =128,
    UTBND_SpecialX          =129,
    UTBND_SpecialY          =130,
    UTBND_SpecialZ          =131,
    UTBND_SpecialW          =132,
    UTBND_MAX               =133,
};
enum ECrosshairType
{
    CHT_Normal              =0,
    CHT_Simple              =1,
    CHT_None                =2,
    CHT_MAX                 =3,
};
enum EAnalogStickActions
{
    ESA_Normal              =0,
    ESA_SouthPaw            =1,
    ESA_Legacy              =2,
    ESA_LegacySouthPaw      =3,
    ESA_MAX                 =4,
};
enum EDigitalButtonActions
{
    DBA_None                =0,
    DBA_Fire                =1,
    DBA_AltFire             =2,
    DBA_Jump                =3,
    DBA_Use                 =4,
    DBA_ToggleMelee         =5,
    DBA_ShowScores          =6,
    DBA_ShowMap             =7,
    DBA_FeignDeath          =8,
    DBA_ToggleSpeaking      =9,
    DBA_ToggleMinimap       =10,
    DBA_WeaponPicker        =11,
    DBA_NextWeapon          =12,
    DBA_BestWeapon          =13,
    DBA_PrevWeapon          =14,
    DBA_Duck                =15,
    DBA_MoveForward         =16,
    DBA_MoveBackward        =17,
    DBA_StrafeLeft          =18,
    DBA_StrafeRight         =19,
    DBA_TurnLeft            =20,
    DBA_TurnRight           =21,
    DBA_SwitchWeapon1       =22,
    DBA_SwitchWeapon2       =23,
    DBA_SwitchWeapon3       =24,
    DBA_SwitchWeapon4       =25,
    DBA_SwitchWeapon5       =26,
    DBA_SwitchWeapon6       =27,
    DBA_SwitchWeapon7       =28,
    DBA_SwitchWeapon8       =29,
    DBA_SwitchWeapon9       =30,
    DBA_SwitchWeapon10      =31,
    DBA_ShrinkHUD           =32,
    DBA_GrowHUD             =33,
    DBA_Taunt               =34,
    DBA_Taunt2              =35,
    DBA_Talk                =36,
    DBA_TeamTalk            =37,
    DBA_ShowCommandMenu     =38,
    DBA_ShowMenu            =39,
    DBA_ToggleTranslocator  =40,
    DBA_JumpPC              =41,
    DBA_BestWeaponPC        =42,
    DBA_Horn                =43,
    DBA_MAX                 =44,
};
enum EUTTextToSpeechMode
{
    TTSM_None               =0,
    TTSM_TeamOnly           =1,
    TTSM_All                =2,
    TTSM_MAX                =3,
};
enum EUTVehicleControls
{
    UTVC_Simple             =0,
    UTVC_Normal             =1,
    UTVC_Advanced           =2,
    UTVC_MAX                =3,
};
enum EPostProcessPreset
{
    PPP_Default             =0,
    PPP_Muted               =1,
    PPP_Vivid               =2,
    PPP_Intense             =3,
    PPP_MAX                 =4,
};
enum ENetworkType
{
    NETWORKTYPE_Unknown     =0,
    NETWORKTYPE_Modem       =1,
    NETWORKTYPE_ISDN        =2,
    NETWORKTYPE_Cable       =3,
    NETWORKTYPE_LAN         =4,
    NETWORKTYPE_MAX         =5,
};
enum EAnnouncerSetting
{
    ANNOUNCE_OFF            =0,
    ANNOUNCE_MINIMAL        =1,
    ANNOUNCE_FULL           =2,
    ANNOUNCE_MAX            =3,
};
enum EGoreLevel
{
    GORE_NORMAL             =0,
    GORE_LOW                =1,
    GORE_MAX                =2,
};
enum EGenericYesNo
{
    UTPID_VALUE_NO          =0,
    UTPID_VALUE_YES         =1,
    UTPID_VALUE_MAX         =2,
};
enum EVoiceChannel
{
    VC_Spectators           =0,
    VC_Team1                =1,
    VC_Team2                =2,
    VC_MAX                  =3,
};
enum EFlagState
{
    FLAG_Home               =0,
    FLAG_HeldFriendly       =1,
    FLAG_HeldEnemy          =2,
    FLAG_Down               =3,
    FLAG_MAX                =4,
};
enum EAutoObjectivePreference
{
    AOP_Disabled            =0,
    AOP_NoPreference        =1,
    AOP_Attack              =2,
    AOP_Defend              =3,
    AOP_OrbRunner           =4,
    AOP_SpecialOps          =5,
    AOP_MAX                 =6,
};
enum EWeaponHand
{
    HAND_Right              =0,
    HAND_Left               =1,
    HAND_Centered           =2,
    HAND_Hidden             =3,
    HAND_MAX                =4,
};
enum EPawnShadowMode
{
    SHADOW_None             =0,
    SHADOW_Self             =1,
    SHADOW_All              =2,
    SHADOW_MAX              =3,
};
enum AmmoWidgetDisplayStyle
{
    EAWDS_Numeric           =0,
    EAWDS_BarGraph          =1,
    EAWDS_Both              =2,
    EAWDS_None              =3,
    EAWDS_MAX               =4,
};
enum EZoomState
{
    ZST_NotZoomed           =0,
    ZST_ZoomingOut          =1,
    ZST_ZoomingIn           =2,
    ZST_Zoomed              =3,
    ZST_MAX                 =4,
};
enum ERocketFireMode1
{
    RFM_Spread              =0,
    RFM_Spiral              =1,
    RFM_Grenades            =2,
    RFM_Max                 =3,
};
enum EDefensePriority
{
    DEFPRI_Low              =0,
    DEFPRI_High             =1,
    DEFPRI_MAX              =2,
};
enum EPlayerFilterSettings
{
    PFS_Player              =0,
    PFS_CenteredOnPlayer    =1,
    PFS_Friends             =2,
    PFS_TopRankings         =3,
    PFS_MAX                 =4,
};
enum EMatchTypeSettings
{
    MTS_Ranked              =0,
    MTS_Player              =1,
    MTS_MAX                 =2,
};
enum ELeaderboardFilters
{
    LF_GameMode             =0,
    LF_MatchType            =1,
    LF_PlayerFilterType     =2,
    LF_MAX                  =3,
};
enum EStatsDetailsReadType
{
    UTSR_GeneralAndRewards  =0,
    UTSR_Weapons            =1,
    UTSR_Vehicles           =2,
    UTSR_VehicleWeapons     =3,
    UTSR_MAX                =4,
};

#endif // !INCLUDED_UTGAME_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName UTGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AdjustLockTarget)
AUTOGENERATE_NAME(CauseMuzzleFlash)
AUTOGENERATE_NAME(CauseMuzzleFlashLight)
AUTOGENERATE_NAME(ClearXRayEffect)
AUTOGENERATE_NAME(ClientHasOwner)
AUTOGENERATE_NAME(CreateProjectileLight)
AUTOGENERATE_NAME(GetBestViewTarget)
AUTOGENERATE_NAME(GetElementProviderFromName)
AUTOGENERATE_NAME(GetHomingTarget)
AUTOGENERATE_NAME(GetHUDColor)
AUTOGENERATE_NAME(GetPowerPerc)
AUTOGENERATE_NAME(HoldGameObject)
AUTOGENERATE_NAME(ImpactAutoFire)
AUTOGENERATE_NAME(InitPickupMeshEffects)
AUTOGENERATE_NAME(IsActive)
AUTOGENERATE_NAME(IsCritical)
AUTOGENERATE_NAME(MuzzleFlashTimer)
AUTOGENERATE_NAME(NotReachableBy)
AUTOGENERATE_NAME(OnBaseChainChanged)
AUTOGENERATE_NAME(OnBreakApart)
AUTOGENERATE_NAME(OnCharacterUnlocked)
AUTOGENERATE_NAME(OnEncroach)
AUTOGENERATE_NAME(OnLightFinished)
AUTOGENERATE_NAME(OnStatsReadComplete)
AUTOGENERATE_NAME(PlayJumpingSound)
AUTOGENERATE_NAME(PlayLandingSound)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PreloadTextures)
AUTOGENERATE_NAME(ProvideAuraEffect)
AUTOGENERATE_NAME(RenderMinimap)
AUTOGENERATE_NAME(SetHeadScale)
AUTOGENERATE_NAME(SetPlayerNearby)
AUTOGENERATE_NAME(SetPosition)
AUTOGENERATE_NAME(StartFeignDeathRecoveryAnim)
AUTOGENERATE_NAME(StopMuzzleFlash)
AUTOGENERATE_NAME(StoppedFalling)
AUTOGENERATE_NAME(StuckFalling)
AUTOGENERATE_NAME(TakeHitBlendedOut)
AUTOGENERATE_NAME(TimeExpired)
AUTOGENERATE_NAME(UpdateEyeHeight)

#ifndef NAMES_ONLY

#ifndef INCLUDED_UTGAME_CLASSES
#define INCLUDED_UTGAME_CLASSES 1

class AForcedDirVolume : public APhysicsVolume
{
public:
    //## BEGIN PROPS ForcedDirVolume
    BITFIELD bAllowBackwards:1;
    BITFIELD bIgnoreHoverboards:1;
    BITFIELD bDenyExit:1;
    BITFIELD bBlockPawns:1;
    BITFIELD bBlockSpectators:1;
    class UClass* TypeToForce;
    class UArrowComponent* Arrow;
    FVector ArrowDirection;
    TArrayNoInit<class AUTVehicle*> TouchingVehicles;
    //## END PROPS ForcedDirVolume

    DECLARE_CLASS(AForcedDirVolume,APhysicsVolume,0,UTGame)
	virtual void PostEditChange( UProperty* PropertyThatChanged );
	UBOOL IgnoreBlockingBy( const AActor *Other ) const;
	virtual void TickSpecial(FLOAT DeltaSeconds );
};

class AUTSlowVolume : public AGravityVolume
{
public:
    //## BEGIN PROPS UTSlowVolume
    FLOAT ScalingFactor;
    FLOAT ProjectileScalingFactor;
    FLOAT RBScalingFactor;
    FLOAT PawnLifeDrainPerSec;
    FLOAT RBGravityZ;
    TArrayNoInit<class UReachSpec*> ModifiedSpecs;
    class UParticleSystemComponent* SlowEffect;
    class UParticleSystemComponent* GeneratorEffect;
    class USkeletalMeshComponent* GeneratorMesh;
    class USoundCue* ActivateSound;
    class USoundCue* DestroySound;
    class USoundCue* EnterSound;
    class USoundCue* ExitSound;
    class USoundCue* OutsideAmbientSound;
    class USoundCue* InsideAmbientSound;
    class UAudioComponent* AmbientSoundComponent;
    class UClass* InsideCameraEffect;
    //## END PROPS UTSlowVolume

    DECLARE_ABSTRACT_CLASS(AUTSlowVolume,AGravityVolume,0,UTGame)
	virtual FLOAT GetVolumeRBGravityZ() { return RBGravityZ; }
};

struct FMaterialImpactEffect
{
    FName MaterialType;
    class USoundCue* Sound;
    TArrayNoInit<class UMaterialInterface*> DecalMaterials;
    FLOAT DurationOfDecal;
    FName DecalDissolveParamName;
    FLOAT DecalWidth;
    FLOAT DecalHeight;
    class UParticleSystem* ParticleTemplate;

    /** Constructors */
    FMaterialImpactEffect() {}
    FMaterialImpactEffect(EEventParm)
    {
        appMemzero(this, sizeof(FMaterialImpactEffect));
    }
};

struct FMaterialSoundEffect
{
    FName MaterialType;
    class USoundCue* Sound;

    /** Constructors */
    FMaterialSoundEffect() {}
    FMaterialSoundEffect(EEventParm)
    {
        appMemzero(this, sizeof(FMaterialSoundEffect));
    }
};

struct FMaterialParticleEffect
{
    FName MaterialType;
    class UParticleSystem* ParticleTemplate;

    /** Constructors */
    FMaterialParticleEffect() {}
    FMaterialParticleEffect(EEventParm)
    {
        appMemzero(this, sizeof(FMaterialParticleEffect));
    }
};

class UUTPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
    //## BEGIN PROPS UTPhysicalMaterialProperty
    FName MaterialType;
    //## END PROPS UTPhysicalMaterialProperty

    DECLARE_CLASS(UUTPhysicalMaterialProperty,UPhysicalMaterialPropertyBase,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTPhysicalMaterialProperty)
};

class AUTEmitCameraEffect : public AEmitter
{
public:
    //## BEGIN PROPS UTEmitCameraEffect
    FLOAT DistFromCamera;
    class AUTPlayerController* Cam;
    //## END PROPS UTEmitCameraEffect

    virtual void UpdateLocation(const FVector& CamLoc,const FRotator& CamRot,FLOAT CamFOVDeg);
    DECLARE_FUNCTION(execUpdateLocation)
    {
        P_GET_STRUCT_REF(FVector,CamLoc);
        P_GET_STRUCT_REF(FRotator,CamRot);
        P_GET_FLOAT(CamFOVDeg);
        P_FINISH;
        UpdateLocation(CamLoc,CamRot,CamFOVDeg);
    }
    DECLARE_ABSTRACT_CLASS(AUTEmitCameraEffect,AEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEmitCameraEffect)
};

struct FDistanceBasedParticleTemplate
{
    class UParticleSystem* Template;
    FLOAT MinDistance;

    /** Constructors */
    FDistanceBasedParticleTemplate() {}
    FDistanceBasedParticleTemplate(EEventParm)
    {
        appMemzero(this, sizeof(FDistanceBasedParticleTemplate));
    }
};

class AUTEmitter : public AEmitter
{
public:
    //## BEGIN PROPS UTEmitter
    //## END PROPS UTEmitter

    DECLARE_CLASS(AUTEmitter,AEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEmitter)
};

class AUTReplicatedEmitter : public AUTEmitter
{
public:
    //## BEGIN PROPS UTReplicatedEmitter
    class UParticleSystem* EmitterTemplate;
    FLOAT ServerLifeSpan;
    //## END PROPS UTReplicatedEmitter

    DECLARE_ABSTRACT_CLASS(AUTReplicatedEmitter,AUTEmitter,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTReplicatedEmitter)
};

struct FEmoteInfo
{
    FName CategoryName;
    FName EmoteTag;
    FStringNoInit EmoteName;
    FName EmoteAnim;
    BITFIELD bVictoryEmote:1;
    BITFIELD bTopHalfEmote:1;
    FName Command;
    BITFIELD bRequiresPlayer:1;

    /** Constructors */
    FEmoteInfo() {}
    FEmoteInfo(EEventParm)
    {
        appMemzero(this, sizeof(FEmoteInfo));
    }
};

struct FGibInfo
{
    FName BoneName;
    class UClass* GibClass;
    BITFIELD bHighDetailOnly:1;

    /** Constructors */
    FGibInfo() {}
    FGibInfo(EEventParm)
    {
        appMemzero(this, sizeof(FGibInfo));
    }
};

class UUTFamilyInfo : public UObject
{
public:
    //## BEGIN PROPS UTFamilyInfo
    class UTexture* DefaultHeadPortrait;
    TArrayNoInit<class UTexture*> DefaultTeamHeadPortrait;
    FStringNoInit FamilyID;
    FStringNoInit Faction;
    FStringNoInit CharacterMeshName;
    class USkeletalMesh* CharacterMesh;
    TArrayNoInit<class UMaterialInterface*> CharacterTeamBodyMaterials;
    TArrayNoInit<class UMaterialInterface*> CharacterTeamHeadMaterials;
    FStringNoInit ArmMeshPackageName;
    FStringNoInit ArmMeshName;
    FStringNoInit ArmSkinPackageName;
    FStringNoInit RedArmMaterialName;
    FStringNoInit BlueArmMaterialName;
    FStringNoInit NeckStumpName;
    FVector PortraitExtraOffset;
    class UPhysicsAsset* PhysAsset;
    TArrayNoInit<class UAnimSet*> AnimSets;
    FName LeftFootBone;
    FName RightFootBone;
    TArrayNoInit<FName> TakeHitPhysicsFixedBones;
    class UClass* SoundGroupClass;
    class UClass* VoiceClass;
    class UMaterialInstanceConstant* BaseMICParent;
    class UMaterialInstanceConstant* BioDeathMICParent;
    class UMaterialInstance* BloodSplatterDecalMaterial;
    FLinearColor NonTeamEmissiveColor;
    FLinearColor NonTeamTintColor;
    TArrayNoInit<struct FEmoteInfo> FamilyEmotes;
    TArrayNoInit<struct FGibInfo> Gibs;
    struct FGibInfo HeadGib;
    class USkeletalMesh* DeathMeshSkelMesh;
    class UPhysicsAsset* DeathMeshPhysAsset;
    INT DeathMeshNumMaterialsToSetResident;
    TArrayNoInit<FName> DeathMeshBreakableJoints;
    TArrayNoInit<class UMaterialInstanceTimeVarying*> SkeletonBurnOutMaterials;
    class UParticleSystem* HeadShotEffect;
    FName HeadShotGoreSocketName;
    class UStaticMesh* HeadShotNeckGoreAttachment;
    class UClass* BloodEmitterClass;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> BloodEffects;
    class UParticleSystem* GibExplosionTemplate;
    FLOAT DrivingDrawScale;
    BITFIELD bIsFemale:1;
    FLOAT DefaultMeshScale;
    FLOAT BaseTranslationOffset;
    //## END PROPS UTFamilyInfo

    DECLARE_ABSTRACT_CLASS(UUTFamilyInfo,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTFamilyInfo)
};

struct FPlayEmoteInfo
{
    FName EmoteTag;
    INT EmoteID;
    BITFIELD bNewData:1;

    /** Constructors */
    FPlayEmoteInfo() {}
    FPlayEmoteInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPlayEmoteInfo));
    }
};

struct FTakeHitInfo
{
    INT Damage;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
    FName HitBone;

    /** Constructors */
    FTakeHitInfo() {}
    FTakeHitInfo(EEventParm)
    {
        appMemzero(this, sizeof(FTakeHitInfo));
    }
};

struct FDrivenWeaponPawnInfo
{
    class AUTVehicle* BaseVehicle;
    BYTE SeatIndex;
    class APlayerReplicationInfo* PRI;

    /** Constructors */
    FDrivenWeaponPawnInfo() {}
    FDrivenWeaponPawnInfo(EEventParm)
    {
        appMemzero(this, sizeof(FDrivenWeaponPawnInfo));
    }
};

#define UCONST_MINTIMEBETWEENPAINSOUNDS 0.35

struct UTPawn_eventStuckFalling_Parms
{
    UTPawn_eventStuckFalling_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventTakeHitBlendedOut_Parms
{
    UTPawn_eventTakeHitBlendedOut_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventSetHeadScale_Parms
{
    FLOAT NewScale;
    UTPawn_eventSetHeadScale_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventStartFeignDeathRecoveryAnim_Parms
{
    UTPawn_eventStartFeignDeathRecoveryAnim_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventPlayJumpingSound_Parms
{
    UTPawn_eventPlayJumpingSound_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventPlayLandingSound_Parms
{
    UTPawn_eventPlayLandingSound_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventHoldGameObject_Parms
{
    class AUTCarriedObject* UTGameObj;
    UTPawn_eventHoldGameObject_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
    UTPawn_eventUpdateEyeHeight_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventClearXRayEffect_Parms
{
    UTPawn_eventClearXRayEffect_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventStoppedFalling_Parms
{
    UTPawn_eventStoppedFalling_Parms(EEventParm)
    {
    }
};
struct UTPawn_eventProvideAuraEffect_Parms
{
    class APawn* P;
    UTPawn_eventProvideAuraEffect_Parms(EEventParm)
    {
    }
};
class AUTPawn : public AGamePawn
{
public:
    //## BEGIN PROPS UTPawn
    BITFIELD bFixedView:1 GCC_BITFIELD_MAGIC;
    BITFIELD bIsTyping:1;
    BITFIELD bSpawnDone:1;
    BITFIELD bSpawnIn:1;
    BITFIELD bShieldAbsorb:1;
    BITFIELD bDodging:1;
    BITFIELD bNoJumpAdjust:1;
    BITFIELD bStopOnDoubleLanding:1;
    BITFIELD bReadyToDoubleJump:1;
    BITFIELD bIsInvulnerable:1;
    BITFIELD bJustDroppedOrb:1;
    BITFIELD bIsInvisible:1;
    BITFIELD bFeigningDeath:1;
    BITFIELD bPlayingFeignDeathRecovery:1;
    BITFIELD bForcedFeignDeath:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bWeaponBob:1;
    BITFIELD bJustLanded:1;
    BITFIELD bLandRecovery:1;
    BITFIELD bComponentDebug:1;
    BITFIELD bStopDeathCamera:1;
    BITFIELD bWinnerCam:1;
    BITFIELD bCanDoubleJump:1;
    BITFIELD bRequiresDoubleJump:1;
    BITFIELD bKilledByBio:1;
    BITFIELD bCanPlayFallingImpacts:1;
    BITFIELD bBlendOutTakeHitPhysics:1;
    BITFIELD bGibbed:1;
    BITFIELD bHeadGibbed:1;
    BITFIELD bTearOffGibs:1;
    BITFIELD bHasHoverboard:1;
    BITFIELD bIsHoverboardAnimPawn:1;
    BITFIELD bArmsAttached:1;
    BITFIELD bWeaponAttachmentVisible:1;
    BITFIELD bDualWielding:1;
    BITFIELD bPuttingDownWeapon:1;
    BITFIELD bHideOnListenServer:1;
    BITFIELD bXRayEffectActive:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BITFIELD bPostRenderOtherTeam:1;
    BITFIELD bEnableFootPlacement:1;
    BITFIELD bNotifyStopFalling:1;
    BITFIELD bReceivedValidTeam:1;
    BITFIELD bKillsAffectHead:1;
    BITFIELD bRechargeHealth:1;
    BITFIELD bIsHero:1;
    INT UnfeignFailedCount;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    class UAnimNodeBlend* FeignDeathBlend;
    class UAnimNodeSlot* FullBodyAnimSlot;
    class UAnimNodeSlot* TopHalfAnimSlot;
    FLOAT DeathHipLinSpring;
    FLOAT DeathHipLinDamp;
    FLOAT DeathHipAngSpring;
    FLOAT DeathHipAngDamp;
    FLOAT StartDeathAnimTime;
    class UClass* DeathAnimDamageType;
    FLOAT TimeLastTookDeathAnimDamage;
    struct FPlayEmoteInfo EmoteRepInfo;
    FLOAT LastEmoteTime;
    FLOAT MinTimeBetweenEmotes;
    BYTE BigTeleportCount;
    BYTE CurrentDir;
    BYTE WeaponOverlayFlags;
    FVector FixedViewLoc;
    FRotator FixedViewRot;
    FLOAT CameraScale;
    FLOAT CurrentCameraScale;
    FLOAT CameraScaleMin;
    FLOAT CameraScaleMax;
    FVector OldCameraPosition;
    FLOAT CameraZOffset;
    FLOAT HeroCameraScale;
    INT HeroCameraPitch;
    FLOAT DodgeSpeed;
    FLOAT DodgeSpeedZ;
    INT MultiJumpRemaining;
    INT MaxMultiJump;
    INT MultiJumpBoost;
    FLOAT MaxDoubleJumpHeight;
    FLOAT SlopeBoostFriction;
    FLOAT DoubleJumpEyeHeight;
    FLOAT DoubleJumpThreshold;
    INT MaxLeanRoll;
    FLOAT DefaultAirControl;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT JumpBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT FeignDeathBodyAtRestSpeed;
    FLOAT FeignDeathPhysicsBlendOutSpeed;
    FLOAT FeignDeathStartTime;
    FLOAT FeignDeathRecoveryStartTime;
    INT SuperHealthMax;
    INT Twisting;
    class UClass* SoundGroupClass;
    class UClass* CurrCharClassInfo;
    class UParticleSystemComponent* BioBurnAway;
    FLOAT BioBurnAwayTime;
    FName BioEffectName;
    TArrayNoInit<FName> TakeHitPhysicsFixedBones;
    TArrayNoInit<FName> NoDriveBodies;
    class USkeletalMeshComponent* FirstPersonDeathVisionMesh;
    FLOAT StartFallImpactTime;
    FName TorsoBoneName;
    class USoundCue* FallImpactSound;
    FLOAT FallSpeedThreshold;
    struct FTakeHitInfo LastTakeHitInfo;
    FLOAT LastTakeHitTimeout;
    FLOAT TakeHitPhysicsBlendOutSpeed;
    class UForceFeedbackWaveform* FallingDamageWaveForm;
    INT RootYaw;
    FLOAT RootYawSpeed;
    INT MaxYawAim;
    FVector2D CurrentSkelAim;
    class USkelControlSingleBone* RootRotControl;
    class UAnimNodeAimOffset* AimNode;
    class UGameSkelCtrl_Recoil* GunRecoilNode;
    class UGameSkelCtrl_Recoil* LeftRecoilNode;
    class UGameSkelCtrl_Recoil* RightRecoilNode;
    class UAnimNodeAimOffset* FlyingDirOffset;
    class UUTAnimBlendBase* FlyingBlend;
    FLOAT AccumulateDamage;
    FLOAT AccumulationTime;
    FLOAT LastHoverboardTime;
    FLOAT MinHoverboardInterval;
    class UUTAnimBlendByDriving* DrivingNode;
    class UUTAnimBlendByVehicle* VehicleNode;
    class UUTAnimBlendByHoverboarding* HoverboardingNode;
    FLOAT ShieldBeltArmor;
    FLOAT VestArmor;
    FLOAT ThighpadArmor;
    FLOAT HelmetArmor;
    class UClass* ShieldBeltPickupClass;
    class UUTSkeletalMeshComponent* ArmsMesh[2];
    class UUTSkeletalMeshComponent* ArmsOverlay[2];
    class UClass* CurrentWeaponAttachmentClass;
    class AUTWeaponAttachment* CurrentWeaponAttachment;
    FName WeaponSocket;
    FName WeaponSocket2;
    FName PawnEffectSockets[2];
    FLOAT FireRateMultiplier;
    FLOAT HeadOffset;
    FLOAT HeadRadius;
    FLOAT HeadHeight;
    FName HeadBone;
    FLOAT HeadScale;
    class UStaticMeshComponent* HeadshotNeckAttachment;
    class UClass* TransInEffects[2];
    class UClass* TransOutEffects[2];
    FLinearColor TranslocateColor[2];
    class UCameraAnim* TransCameraAnim[3];
    class UAudioComponent* PawnAmbientSound;
    class USoundCue* PawnAmbientSoundCue;
    class UAudioComponent* WeaponAmbientSound;
    class USoundCue* WeaponAmbientSoundCue;
    class USoundCue* ArmorHitSound;
    class USoundCue* SpawnSound;
    class USoundCue* TeleportSound;
    FLOAT BodyMatFadeDuration;
    FLOAT RemainingBodyMatDuration;
    FLOAT ClientBodyMatDuration;
    FLinearColor BodyMatColor;
    FRotator CompressedBodyMatColor;
    FLinearColor CurrentBodyMatColor;
    FLinearColor SpawnProtectionColor;
    FName DamageParameterName;
    FName SaturationParameterName;
    TArrayNoInit<class UMaterialInstanceConstant*> BodyMaterialInstances;
    class UMaterialInterface* OverlayMaterialInstance;
    class USkeletalMeshComponent* OverlayMesh;
    FLOAT TeamBeaconMaxDist;
    FLOAT TeamBeaconPlayerInfoMaxDist;
    class UTexture* SpeakingBeaconTexture;
    FLOAT LastPostRenderTraceTime;
    FVector HUDLocation;
    FLOAT MapSize;
    struct FTextureCoordinates IconCoords;
    FLOAT LastPainSound;
    FLOAT DeathTime;
    INT LookYaw;
    FLOAT RagdollLifespan;
    class AUTProjectile* AttachedProj;
    FName LeftFootBone;
    FName RightFootBone;
    FName LeftFootControlName;
    FName RightFootControlName;
    FLOAT BaseTranslationOffset;
    FLOAT CrouchTranslationOffset;
    FLOAT OldLocationZ;
    FLOAT ZSmoothingRate;
    FLOAT MaxFootPlacementDistSquared;
    class USkelControlFootPlacement* LeftLegControl;
    class USkelControlFootPlacement* RightLegControl;
    class USkelControlLimb* LeftHandIK;
    class USkelControlLimb* RightHandIK;
    FLOAT MaxFootstepDistSq;
    FLOAT MaxJumpSoundDistSq;
    FLOAT SwimmingZOffset;
    FLOAT SwimmingZOffsetSpeed;
    FLOAT CrouchMeshZOffset;
    FLOAT CustomGravityScaling;
    class UMaterial* ReplicatedBodyMaterial;
    TArrayNoInit<class AUTBot*> Trackers;
    class UClass* HoverboardClass;
    struct FDrivenWeaponPawnInfo DrivenWeaponPawn;
    struct FDrivenWeaponPawnInfo LastDrivenWeaponPawn;
    class AUTClientSideWeaponPawn* ClientSideWeaponPawn;
    class UMaterialInterface* ShieldBeltMaterialInstance;
    class UMaterialInterface* ShieldBeltTeamMaterialInstances[4];
    INT JumpBootCharge;
    FLOAT DefaultMeshScale;
    FLOAT StartedFallingTime;
    FName TauntNames[6];
    FLOAT HealthRechargeRate;
    FLOAT PartialHealth;
    FLOAT HealthRechargeDelay;
    FLOAT AuraRadius;
    FLOAT LastAuraCheckTime;
    FLOAT DesiredMeshScale;
    FLOAT DefaultRadius;
    FLOAT DefaultHeight;
    //## END PROPS UTPawn

    virtual void GetBoundingCylinder(FLOAT& CollisionRadius,FLOAT& CollisionHeight) const;
    virtual void RestorePreRagdollCollisionComponent();
    virtual void EnsureOverlayComponentLast();
    virtual FVector GetTargetLocation(class AActor* RequestedBy=NULL,UBOOL bRequestAlternateLoc=FALSE) const;
    UBOOL HeroFits(class AUTPawn* P,FLOAT NewRadius,FLOAT NewHeight);
    void SetMaxStepHeight(FLOAT NewMaxStepHeight);
    virtual UBOOL IsInvisible();
    virtual void SetHUDLocation(FVector NewHUDLocation);
    virtual UBOOL SuggestJumpVelocity(FVector& JumpVelocity,FVector Destination,FVector Start);
    virtual void NativePostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector CameraPosition,FVector CameraDir);
    DECLARE_FUNCTION(execRestorePreRagdollCollisionComponent)
    {
        P_FINISH;
        RestorePreRagdollCollisionComponent();
    }
    DECLARE_FUNCTION(execEnsureOverlayComponentLast)
    {
        P_FINISH;
        EnsureOverlayComponentLast();
    }
    DECLARE_FUNCTION(execHeroFits)
    {
        P_GET_OBJECT(AUTPawn,P);
        P_GET_FLOAT(NewRadius);
        P_GET_FLOAT(NewHeight);
        P_FINISH;
        *(UBOOL*)Result=HeroFits(P,NewRadius,NewHeight);
    }
    DECLARE_FUNCTION(execSetMaxStepHeight)
    {
        P_GET_FLOAT(NewMaxStepHeight);
        P_FINISH;
        SetMaxStepHeight(NewMaxStepHeight);
    }
    void eventStuckFalling()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StuckFalling),NULL);
    }
    void eventTakeHitBlendedOut()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TakeHitBlendedOut),NULL);
    }
    void eventSetHeadScale(FLOAT NewScale)
    {
        UTPawn_eventSetHeadScale_Parms Parms(EC_EventParm);
        Parms.NewScale=NewScale;
        ProcessEvent(FindFunctionChecked(UTGAME_SetHeadScale),&Parms);
    }
    void eventStartFeignDeathRecoveryAnim()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StartFeignDeathRecoveryAnim),NULL);
    }
    void eventPlayJumpingSound()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayJumpingSound),NULL);
    }
    void eventPlayLandingSound()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayLandingSound),NULL);
    }
    void eventHoldGameObject(class AUTCarriedObject* UTGameObj)
    {
        UTPawn_eventHoldGameObject_Parms Parms(EC_EventParm);
        Parms.UTGameObj=UTGameObj;
        ProcessEvent(FindFunctionChecked(UTGAME_HoldGameObject),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        UTPawn_eventUpdateEyeHeight_Parms Parms(EC_EventParm);
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(UTGAME_UpdateEyeHeight),&Parms);
        }
    }
    void eventClearXRayEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ClearXRayEffect),NULL);
    }
    void eventStoppedFalling()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StoppedFalling),NULL);
    }
    void eventProvideAuraEffect(class APawn* P)
    {
        UTPawn_eventProvideAuraEffect_Parms Parms(EC_EventParm);
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(UTGAME_ProvideAuraEffect),&Parms);
    }
    DECLARE_CLASS(AUTPawn,AGamePawn,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual FLOAT DampenNoise(AActor* NoiseMaker, FLOAT Loudness, FName NoiseType=NAME_None );
	void RequestTrackingFor(AUTBot *Bot);
	virtual UBOOL TryJumpUp(FVector Dir, FVector Destination, DWORD TraceFlags, UBOOL bNoVisibility);
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual INT calcMoveFlags();
	virtual ETestMoveResult FindJumpUp(FVector Direction, FVector &CurrentPosition);
	virtual UBOOL SetHighJumpFlag();
	UBOOL UseFootPlacementThisTick();
	void EnableFootPlacement(UBOOL bEnabled);
	void DoFootPlacement(FLOAT DeltaSeconds);
	FLOAT GetGravityZ();
	void setPhysics(BYTE NewPhysics, AActor *NewFloor, FVector NewFloorV);
	virtual FVector CalculateSlopeSlide(const FVector& Adjusted, const FCheckResult& Hit);
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual UBOOL ShouldTrace(UPrimitiveComponent* Primitive, AActor* SourceActor, DWORD TraceFlags);
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
	virtual void physFalling(FLOAT deltaTime, INT Iterations);

	virtual UBOOL HasAudibleAmbientSound(const FVector& SrcLocation);

	// camera
	virtual void UpdateEyeHeight(FLOAT DeltaSeconds);
	virtual void physicsRotation(FLOAT deltaTime, FVector OldVelocity);

	virtual void UnCrouch(INT bClientSimulation);

protected:
	virtual void CalcVelocity(FVector &AccelDir, FLOAT DeltaTime, FLOAT MaxSpeed, FLOAT Friction, INT bFluid, INT bBrake, INT bBuoyant);
};

class AUTScout : public AScout
{
public:
    //## BEGIN PROPS UTScout
    BITFIELD bRequiresDoubleJump:1;
    FLOAT MaxDoubleJumpHeight;
    FLOAT MaxTranslocDistSq;
    class UClass* TranslocProjClass;
    class UClass* PrototypePawnClass;
    FName SpecialReachSpecsWarningLog;
    FName SizePersonFindName;
    //## END PROPS UTScout

    virtual UBOOL SuggestJumpVelocity(FVector& JumpVelocity,FVector Destination,FVector Start);
    DECLARE_CLASS(AUTScout,AScout,0|CLASS_Transient|CLASS_Config,UTGame)
	virtual void AddSpecialPaths(INT NumPaths, UBOOL bOnlyChanged);
	virtual ETestMoveResult FindJumpUp(FVector Direction, FVector &CurrentPosition);
	virtual UBOOL SetHighJumpFlag();
	virtual void SetPrototype();
	void CreateTranslocatorPath(ANavigationPoint* Nav, ANavigationPoint* DestNav, FCheckResult Hit, UBOOL bOnlyChanged);
	virtual ETestMoveResult FindBestJump(FVector Dest, FVector &CurrentPosition);

	virtual void SetPathColor(UReachSpec* ReachSpec)
	{
		FVector CommonSize = GetSize(FName(TEXT("Common"),FNAME_Find));
		if ( ReachSpec->CollisionRadius >= CommonSize.X )
		{
			FVector MaxSize = GetSize(FName(TEXT("Vehicle"),FNAME_Find));
			ReachSpec->PathColorIndex = ( ReachSpec->CollisionRadius >= MaxSize.X ) ? 2 : 1;
		}
		else
		{
			ReachSpec->PathColorIndex = 0;
		}
	}

	virtual void ReviewPaths();
};

struct FMusicSegment
{
    FLOAT TempoOverride;
    BYTE CrossfadeRule;
    INT CrossfadeToMeNumMeasuresDuration;
    class USoundCue* TheCue;

    /** Constructors */
    FMusicSegment() {}
    FMusicSegment(EEventParm)
    {
        appMemzero(this, sizeof(FMusicSegment));
    }
};

struct FStingersForAMap
{
    class USoundCue* Died;
    class USoundCue* DoubleKill;
    class USoundCue* EnemyGrabFlag;
    class USoundCue* FirstKillingSpree;
    class USoundCue* FlagReturned;
    class USoundCue* GrabFlag;
    class USoundCue* Kill;
    class USoundCue* LongKillingSpree;
    class USoundCue* MajorKill;
    class USoundCue* MonsterKill;
    class USoundCue* MultiKill;
    class USoundCue* ReturnFlag;
    class USoundCue* ScoreLosing;
    class USoundCue* ScoreTie;
    class USoundCue* ScoreWinning;

    /** Constructors */
    FStingersForAMap() {}
    FStingersForAMap(EEventParm)
    {
        appMemzero(this, sizeof(FStingersForAMap));
    }
};

struct FMusicForAMap
{
    FLOAT Tempo;
    struct FMusicSegment Action;
    struct FMusicSegment Ambient;
    struct FMusicSegment Intro;
    struct FMusicSegment Suspense;
    struct FMusicSegment Tension;
    struct FMusicSegment Victory;

    /** Constructors */
    FMusicForAMap() {}
    FMusicForAMap(EEventParm)
    {
        appMemzero(this, sizeof(FMusicForAMap));
    }
};

class UUTTypes : public UObject
{
public:
    //## BEGIN PROPS UTTypes
    //## END PROPS UTTypes

    DECLARE_CLASS(UUTTypes,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTTypes)
};

struct FAchievementData
{
    BYTE Id;
    BYTE UnlockType;
    INT UnlockCriteria;

    /** Constructors */
    FAchievementData() {}
    FAchievementData(EEventParm)
    {
        appMemzero(this, sizeof(FAchievementData));
    }
};

#define UCONST_PSI_ChapterMask 299
#define UCONST_PSI_ModifierCardEnd 290
#define UCONST_PSI_ModifierCardDeck19 289
#define UCONST_PSI_ModifierCardDeck18 288
#define UCONST_PSI_ModifierCardDeck17 287
#define UCONST_PSI_ModifierCardDeck16 286
#define UCONST_PSI_ModifierCardDeck15 285
#define UCONST_PSI_ModifierCardDeck14 284
#define UCONST_PSI_ModifierCardDeck13 283
#define UCONST_PSI_ModifierCardDeck12 282
#define UCONST_PSI_ModifierCardDeck11 281
#define UCONST_PSI_ModifierCardDeck10 280
#define UCONST_PSI_ModifierCardDeck9 279
#define UCONST_PSI_ModifierCardDeck8 278
#define UCONST_PSI_ModifierCardDeck7 277
#define UCONST_PSI_ModifierCardDeck6 276
#define UCONST_PSI_ModifierCardDeck5 275
#define UCONST_PSI_ModifierCardDeck4 274
#define UCONST_PSI_ModifierCardDeck3 273
#define UCONST_PSI_ModifierCardDeck2 272
#define UCONST_PSI_ModifierCardDeck1 271
#define UCONST_PSI_ModifierCardDeck0 270
#define UCONST_PSI_SinglePlayerCurrentMissionResult 252
#define UCONST_PSI_SinglePlayerCurrentMission 251
#define UCONST_PSI_SinglePlayerSkillLevel 250
#define UCONST_PSI_SinglePlayerMapMaskB 246
#define UCONST_PSI_SinglePlayerMapMaskA 245
#define UCONST_PSI_PersistentKeyMAX 220
#define UCONST_PSI_PersistentKeySlot19 219
#define UCONST_PSI_PersistentKeySlot18 218
#define UCONST_PSI_PersistentKeySlot17 217
#define UCONST_PSI_PersistentKeySlot16 216
#define UCONST_PSI_PersistentKeySlot15 215
#define UCONST_PSI_PersistentKeySlot14 214
#define UCONST_PSI_PersistentKeySlot13 213
#define UCONST_PSI_PersistentKeySlot12 212
#define UCONST_PSI_PersistentKeySlot11 211
#define UCONST_PSI_PersistentKeySlot10 210
#define UCONST_PSI_PersistentKeySlot9 209
#define UCONST_PSI_PersistentKeySlot8 208
#define UCONST_PSI_PersistentKeySlot7 207
#define UCONST_PSI_PersistentKeySlot6 206
#define UCONST_PSI_PersistentKeySlot5 205
#define UCONST_PSI_PersistentKeySlot4 204
#define UCONST_PSI_PersistentKeySlot3 203
#define UCONST_PSI_PersistentKeySlot2 202
#define UCONST_PSI_PersistentKeySlot1 201
#define UCONST_PSI_PersistentKeySlot0 200
#define UCONST_UTAID_Achievement_End 859
#define UCONST_UTAID_ACHIEVEMENT_RANKED_TenFootPole 858
#define UCONST_UTAID_ACHIEVEMENT_RANKED_BloodSweatTears 857
#define UCONST_UTAID_ACHIEVEMENT_RANKED_HatTrick 856
#define UCONST_UTAID_ACHIEVEMENT_RANKED_MixItUp 855
#define UCONST_UTAID_ACHIEVEMENT_RANKED_DontHateThePlayer 854
#define UCONST_UTAID_ACHIEVEMENT_RANKED_RememberYourFirst 853
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_KillGetALifers 852
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_GetALife 851
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_MeetInterestingPeople 850
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_Dedication 849
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_AroundTheWorld 848
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_Nemecide 847
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_SameTeam 846
#define UCONST_UTAID_ACHIEVEMENT_VERSUS_GetItOn 845
#define UCONST_UTAID_ACHIEVEMENT_HUMILIATION_Deity 844
#define UCONST_UTAID_ACHIEVEMENT_HUMILIATION_PathOfDestruction 843
#define UCONST_UTAID_ACHIEVEMENT_HUMILIATION_SirSlaysALot 842
#define UCONST_UTAID_ACHIEVEMENT_HUMILIATION_SerialKiller 841
#define UCONST_UTAID_ACHIEVEMENT_VEHICLE_Deathwish 840
#define UCONST_UTAID_ACHIEVEMENT_VEHICLE_Ace 839
#define UCONST_UTAID_ACHIEVEMENT_VEHICLE_Gunner 838
#define UCONST_UTAID_ACHIEVEMENT_VEHICLE_Armadillo 837
#define UCONST_UTAID_ACHIEVEMENT_VEHICLE_Hoverboard 836
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_BigGameHunter 835
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_BombSquad 834
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_StrongestLink 833
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_Hammerhead 832
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_Pistolero 831
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_GooGod 830
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_ShockTherapy 829
#define UCONST_UTAID_ACHIEVEMENT_WEAPON_BrainSurgeon 828
#define UCONST_UTAID_ACHIEVEMENT_EXPLORE_EveryWeaponKill 827
#define UCONST_UTAID_ACHIEVEMENT_EXPLORE_EveryMutator 826
#define UCONST_UTAID_ACHIEVEMENT_EXPLORE_AllPowerups 825
#define UCONST_UTAID_ACHIEVEMENT_IA_Untouchable 824
#define UCONST_UTAID_ACHIEVEMENT_IA_EveryGameMode 823
#define UCONST_UTAID_ACHIEVEMENT_COOP_CompleteCampaign 822
#define UCONST_UTAID_ACHIEVEMENT_COOP_Complete10 821
#define UCONST_UTAID_ACHIEVEMENT_COOP_Complete1 820
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatLoqueGodlike 819
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatMatrixGodlike 818
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatSeligGodlike 817
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatLaurenGodlike 816
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatLoqueExpert 815
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_ReachOmicronExpert 814
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_LiandriMainframeExpert 813
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_SignTreatyExpert 812
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatLoque 811
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_ReachOmicron 810
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_StealNecrisTech 809
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_ControlTarydium 808
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_HijackDarkwalker 807
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_LiandriMainframe 806
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatSelig 805
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_SignTreaty 804
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DefeatLauren 803
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_DeployLeviathan 802
#define UCONST_UTAID_ACHIEVEMENT_CAMPAIGN_CompleteAllTraining 801
#define UCONST_UTAID_Achievement_Start 800
#define UCONST_UTPID_PopupMapOnDeath 700
#define UCONST_UTPID_KeyAction_49 549
#define UCONST_UTPID_KeyAction_48 548
#define UCONST_UTPID_KeyAction_47 547
#define UCONST_UTPID_KeyAction_46 546
#define UCONST_UTPID_KeyAction_45 545
#define UCONST_UTPID_KeyAction_44 544
#define UCONST_UTPID_KeyAction_43 543
#define UCONST_UTPID_KeyAction_42 542
#define UCONST_UTPID_KeyAction_41 541
#define UCONST_UTPID_KeyAction_40 540
#define UCONST_UTPID_KeyAction_39 539
#define UCONST_UTPID_KeyAction_38 538
#define UCONST_UTPID_KeyAction_37 537
#define UCONST_UTPID_KeyAction_36 536
#define UCONST_UTPID_KeyAction_35 535
#define UCONST_UTPID_KeyAction_34 534
#define UCONST_UTPID_KeyAction_33 533
#define UCONST_UTPID_KeyAction_32 532
#define UCONST_UTPID_KeyAction_31 531
#define UCONST_UTPID_KeyAction_30 530
#define UCONST_UTPID_KeyAction_29 529
#define UCONST_UTPID_KeyAction_28 528
#define UCONST_UTPID_KeyAction_27 527
#define UCONST_UTPID_KeyAction_26 526
#define UCONST_UTPID_KeyAction_25 525
#define UCONST_UTPID_KeyAction_24 524
#define UCONST_UTPID_KeyAction_23 523
#define UCONST_UTPID_KeyAction_22 522
#define UCONST_UTPID_KeyAction_21 521
#define UCONST_UTPID_KeyAction_20 520
#define UCONST_UTPID_KeyAction_19 519
#define UCONST_UTPID_KeyAction_18 518
#define UCONST_UTPID_KeyAction_17 517
#define UCONST_UTPID_KeyAction_16 516
#define UCONST_UTPID_KeyAction_15 515
#define UCONST_UTPID_KeyAction_14 514
#define UCONST_UTPID_KeyAction_13 513
#define UCONST_UTPID_KeyAction_12 512
#define UCONST_UTPID_KeyAction_11 511
#define UCONST_UTPID_KeyAction_10 510
#define UCONST_UTPID_KeyAction_9 509
#define UCONST_UTPID_KeyAction_8 508
#define UCONST_UTPID_KeyAction_7 507
#define UCONST_UTPID_KeyAction_6 506
#define UCONST_UTPID_KeyAction_5 505
#define UCONST_UTPID_KeyAction_4 504
#define UCONST_UTPID_KeyAction_3 503
#define UCONST_UTPID_KeyAction_2 502
#define UCONST_UTPID_KeyAction_1 501
#define UCONST_UTPID_ShowVehicleArmorCount 488
#define UCONST_UTPID_RotateMap 487
#define UCONST_UTPID_ShowLeaderboard 486
#define UCONST_UTPID_ShowScoring 485
#define UCONST_UTPID_ShowPowerups 484
#define UCONST_UTPID_ShowAmmo 483
#define UCONST_UTPID_ShowDoll 482
#define UCONST_UTPID_ShowClock 481
#define UCONST_UTPID_ShowMap 480
#define UCONST_UTPID_CrosshairType 474
#define UCONST_UTPID_RedeemerPriority 473
#define UCONST_UTPID_StingerPriority 471
#define UCONST_UTPID_ShockRiflePriority 470
#define UCONST_UTPID_EnforcerPriority 469
#define UCONST_UTPID_LinkGunPriority 468
#define UCONST_UTPID_SniperRiflePriority 467
#define UCONST_UTPID_FlakCannonPriority 466
#define UCONST_UTPID_BioRiflePriority 465
#define UCONST_UTPID_RocketLauncherPriority 464
#define UCONST_UTPID_ShowOnlyAvailableWeapons 463
#define UCONST_UTPID_DisplayWeaponBar 462
#define UCONST_UTPID_SmallWeapons 461
#define UCONST_UTPID_WeaponHand 460
#define UCONST_UTPID_EnableHardwarePhysics 455
#define UCONST_UTPID_VehicleControls 454
#define UCONST_UTPID_TiltSensing 453
#define UCONST_UTPID_AutoCenterVehiclePitch 452
#define UCONST_UTPID_AutoCenterPitch 451
#define UCONST_UTPID_ControllerSensitivityMultiplier 450
#define UCONST_UTPID_GamepadBinding_AnalogStickPreset 444
#define UCONST_UTPID_GamepadBinding_DPadRight 443
#define UCONST_UTPID_GamepadBinding_DPadLeft 442
#define UCONST_UTPID_GamepadBinding_DPadDown 441
#define UCONST_UTPID_GamepadBinding_DPadUp 440
#define UCONST_UTPID_GamepadBinding_LeftThumbstickPressed 439
#define UCONST_UTPID_GamepadBinding_RightThumbstickPressed 438
#define UCONST_UTPID_GamepadBinding_LeftTrigger 437
#define UCONST_UTPID_GamepadBinding_RightTrigger 436
#define UCONST_UTPID_GamepadBinding_LeftBumper 435
#define UCONST_UTPID_GamepadBinding_RightBumper 434
#define UCONST_UTPID_GamepadBinding_Back 433
#define UCONST_UTPID_GamepadBinding_ButtonY 432
#define UCONST_UTPID_GamepadBinding_ButtonX 431
#define UCONST_UTPID_GamepadBinding_ButtonB 430
#define UCONST_UTPID_GamepadBinding_ButtonA 429
#define UCONST_UTPID_TurningAccelerationFactor 428
#define UCONST_UTPID_DodgeDoubleClickTime 427
#define UCONST_UTPID_MouseAccelTreshold 426
#define UCONST_UTPID_MouseSmoothingStrength 425
#define UCONST_UTPID_MouseSensitivityMenus 424
#define UCONST_UTPID_MouseSensitivityGame 423
#define UCONST_UTPID_EnableJoystick 422
#define UCONST_UTPID_ReduceMouseLag 421
#define UCONST_UTPID_MouseSmoothing 420
#define UCONST_UTPID_FirstTimeMultiplayer 411
#define UCONST_UTPID_AllowCustomCharacters 410
#define UCONST_UTPID_ServerDescription 409
#define UCONST_UTPID_SpeechRecognition 408
#define UCONST_UTPID_DynamicNetspeed 407
#define UCONST_UTPID_NetworkConnection 406
#define UCONST_UTPID_ClanTag 405
#define UCONST_UTPID_Alias 404
#define UCONST_UTPID_WeaponSwitchOnPickup 403
#define UCONST_UTPID_DodgingEnabled 402
#define UCONST_UTPID_GoreLevel 401
#define UCONST_UTPID_ViewBob 400
#define UCONST_UTPID_Subtitles 385
#define UCONST_UTPID_DefaultFOV 384
#define UCONST_UTPID_ScreenResolutionY 383
#define UCONST_UTPID_ScreenResolutionX 382
#define UCONST_UTPID_PostProcessPreset 381
#define UCONST_UTPID_Gamma 380
#define UCONST_UTPID_AmbianceVolume 368
#define UCONST_UTPID_TextToSpeechMode 367
#define UCONST_UTPID_MessageBeep 366
#define UCONST_UTPID_AutoTaunt 365
#define UCONST_UTPID_AnnounceSetting 364
#define UCONST_UTPID_AnnouncerVolume 363
#define UCONST_UTPID_VoiceVolume 362
#define UCONST_UTPID_MusicVolume 361
#define UCONST_UTPID_SFXVolume 360
#define UCONST_UTPID_UnlockedCharacters 302
#define UCONST_UTPID_CustomCharString 301

class UUTProfileSettings : public UOnlineProfileSettings
{
public:
    //## BEGIN PROPS UTProfileSettings
    TArrayNoInit<FString> DigitalButtonActionsToCommandMapping;
    TArrayNoInit<FName> KeyMappingArray;
    TArrayNoInit<struct FAchievementData> AchievementsArray;
    TArrayNoInit<FName> CampaignBoneNames;
    //## END PROPS UTProfileSettings

    virtual UBOOL UpdateAchievementBitMask(INT AchievementId,INT BitMask);
    virtual UBOOL UpdateAchievementCount(INT AchievementId,INT Count=1);
    virtual UBOOL GetAchievementValue(INT AchievementId,INT& Value);
    virtual UBOOL SetAchievementValue(INT AchievementId,INT Value);
    virtual UBOOL GetAchievementUnlockCriteria(INT AchievementId,INT& UnlockCriteria);
    virtual UBOOL UpdateAroundTheWorld(INT MapContextId);
    virtual UBOOL IncrementMixItUp(INT GameType);
    virtual UBOOL UpdateGetItOn(INT MapContextId);
    virtual void ResetToDefault(INT ProfileId);
    void ResetKeysToDefault(class ULocalPlayer* InPlayerOwner=NULL);
    DECLARE_FUNCTION(execUpdateAchievementBitMask)
    {
        P_GET_INT(AchievementId);
        P_GET_INT(BitMask);
        P_FINISH;
        *(UBOOL*)Result=UpdateAchievementBitMask(AchievementId,BitMask);
    }
    DECLARE_FUNCTION(execUpdateAchievementCount)
    {
        P_GET_INT(AchievementId);
        P_GET_INT_OPTX(Count,1);
        P_FINISH;
        *(UBOOL*)Result=UpdateAchievementCount(AchievementId,Count);
    }
    DECLARE_FUNCTION(execGetAchievementValue)
    {
        P_GET_INT(AchievementId);
        P_GET_INT_REF(Value);
        P_FINISH;
        *(UBOOL*)Result=GetAchievementValue(AchievementId,Value);
    }
    DECLARE_FUNCTION(execSetAchievementValue)
    {
        P_GET_INT(AchievementId);
        P_GET_INT(Value);
        P_FINISH;
        *(UBOOL*)Result=SetAchievementValue(AchievementId,Value);
    }
    DECLARE_FUNCTION(execGetAchievementUnlockCriteria)
    {
        P_GET_INT(AchievementId);
        P_GET_INT_REF(UnlockCriteria);
        P_FINISH;
        *(UBOOL*)Result=GetAchievementUnlockCriteria(AchievementId,UnlockCriteria);
    }
    DECLARE_FUNCTION(execUpdateAroundTheWorld)
    {
        P_GET_INT(MapContextId);
        P_FINISH;
        *(UBOOL*)Result=UpdateAroundTheWorld(MapContextId);
    }
    DECLARE_FUNCTION(execIncrementMixItUp)
    {
        P_GET_INT(GameType);
        P_FINISH;
        *(UBOOL*)Result=IncrementMixItUp(GameType);
    }
    DECLARE_FUNCTION(execUpdateGetItOn)
    {
        P_GET_INT(MapContextId);
        P_FINISH;
        *(UBOOL*)Result=UpdateGetItOn(MapContextId);
    }
    DECLARE_FUNCTION(execResetToDefault)
    {
        P_GET_INT(ProfileId);
        P_FINISH;
        ResetToDefault(ProfileId);
    }
    DECLARE_FUNCTION(execResetKeysToDefault)
    {
        P_GET_OBJECT_OPTX(ULocalPlayer,InPlayerOwner,NULL);
        P_FINISH;
        ResetKeysToDefault(InPlayerOwner);
    }
    DECLARE_CLASS(UUTProfileSettings,UOnlineProfileSettings,0,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(UUTProfileSettings)
};

struct FGameTypePrefix
{
    FStringNoInit Prefix;
    FStringNoInit GameType;
    TArrayNoInit<FString> AdditionalGameTypes;

    /** Constructors */
    FGameTypePrefix() {}
    FGameTypePrefix(EEventParm)
    {
        appMemzero(this, sizeof(FGameTypePrefix));
    }
};

struct FGameMapCycle
{
    FName GameClassName;
    TArrayNoInit<FString> Maps;

    /** Constructors */
    FGameMapCycle() {}
    FGameMapCycle(EEventParm)
    {
        appMemzero(this, sizeof(FGameMapCycle));
    }
};

struct FActiveBotInfo
{
    FStringNoInit BotName;
    BITFIELD bInUse:1;

    /** Constructors */
    FActiveBotInfo() {}
    FActiveBotInfo(EEventParm)
    {
        appMemzero(this, sizeof(FActiveBotInfo));
    }
};

class AUTGame : public AGameInfo
{
public:
    //## BEGIN PROPS UTGame
    BITFIELD bExportMenuData:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bTeamScoreRounds:1;
    BITFIELD bSoaking:1;
    BITFIELD bPlayersVsBots:1;
    BITFIELD bCustomBots:1;
    BITFIELD bNoCustomCharacters:1;
    BITFIELD bAutoNumBots:1;
    BITFIELD bPlayersMustBeReady:1;
    BITFIELD bForceRespawn:1;
    BITFIELD bTempForceRespawn:1;
    BITFIELD bWaitForNetPlayers:1;
    BITFIELD bWarmupRound:1;
    BITFIELD bFirstBlood:1;
    BITFIELD bQuickStart:1;
    BITFIELD bSkipPlaySound:1;
    BITFIELD bStartedCountDown:1;
    BITFIELD bFinalStartup:1;
    BITFIELD bOverTimeBroadcast:1;
    BITFIELD bMustHaveMultiplePlayers:1;
    BITFIELD bPlayerBecameActive:1;
    BITFIELD bMustJoinBeforeStart:1;
    BITFIELD bDemoMode:1;
    BITFIELD bUndrivenVehicleDamage:1;
    BITFIELD bStartWithLockerWeaps:1;
    BITFIELD bAllowTranslocator:1;
    BITFIELD bAllowHoverboard:1;
    BITFIELD bConsoleServer:1;
    BITFIELD bAllowKeyboardAndMouse:1;
    BITFIELD bAllowMapVoting:1;
    BITFIELD bScoreDeaths:1;
    BITFIELD bPlayedTenKills:1;
    BITFIELD bPlayedFiveKills:1;
    BITFIELD bPlayedOneKill:1;
    BITFIELD bMidGameHasMap:1;
    BITFIELD bForceMidGameMenuAtStart:1;
    BITFIELD bNecrisLocked:1;
    BITFIELD bExtraHealth:1;
    BITFIELD bHeavyArmor:1;
    BITFIELD bBadSinglePlayerBotNames:1;
    BITFIELD bIgnoreTeamForVoiceChat:1;
    BITFIELD bIsClassicUT:1;
    FStringNoInit Acronym;
    FStringNoInit Description;
    INT ServerSkillLevel;
    FLOAT EndTimeDelay;
    FLOAT BotRatio;
    INT NetWait;
    INT ClientProcessingTimeout;
    INT MinNetPlayers;
    INT RestartWait;
    INT WarmupTime;
    INT WarmupRemaining;
    BYTE StartupStage;
    BYTE WeaponTauntUsed[20];
    BYTE MinionTeam;
    BYTE MinionCount;
    INT DesiredPlayerCount;
    FLOAT SpawnProtectionTime;
    INT DefaultMaxLives;
    INT LateEntryLives;
    INT PendingMatchElapsedTime;
    INT CountDown;
    FLOAT AdjustedDifficulty;
    INT PlayerKills;
    INT PlayerDeaths;
    class ANavigationPoint* LastPlayerStartSpot;
    class ANavigationPoint* LastStartSpot;
    FLOAT EndTime;
    INT EndMessageWait;
    INT EndMessageCounter;
    FStringNoInit RulesMenuType;
    FStringNoInit GameUMenuType;
    class AActor* EndGameFocus;
    INT ResetCountDown;
    INT ResetTimeDelay;
    class AUTVehicle* VehicleList;
    class AUTTeamInfo* EnemyRoster;
    FStringNoInit EnemyRosterName;
    TArrayNoInit<class UClass*> DefaultInventory;
    class AUTProj_TransDisc* BeaconList;
    class UClass* TranslocatorClass;
    class UClass* VictoryMessageClass;
    TArrayNoInit<struct FGameTypePrefix> DefaultMapPrefixes;
    TArrayNoInit<struct FGameTypePrefix> CustomMapPrefixes;
    TArrayNoInit<FString> MapPrefixes;
    class UClass* ConsolePlayerControllerClass;
    INT SinglePlayerMissionID;
    FStringNoInit DemoPrefix;
    class UClass* BotClass;
    TArrayNoInit<struct FGameMapCycle> GameSpecificMapCycles;
    INT MapCycleIndex;
    TArrayNoInit<struct FActiveBotInfo> ActiveBots;
    class ANavigationPoint* ScriptedStartSpot;
    INT VoteDuration;
    class AUTVoteCollector* VoteCollector;
    class UUTUIScene* MidGameMenuTemplate;
    FStringNoInit EndOfMatchRulesTemplateStr_Scoring;
    FStringNoInit EndOfMatchRulesTemplateStr_ScoringSingle;
    FStringNoInit EndOfMatchRulesTemplateStr_Time;
    class USpeechRecognition* SpeechRecognitionData;
    FLOAT LastEncouragementTime;
    FLOAT LastManDownTime;
    class APawn* Sniper;
    FName MidgameScorePanelTag;
    INT MaxCustomChars;
    INT NumDivertedOpponents;
    FLOAT MaxHeroCount;
    //## END PROPS UTGame

    UBOOL IsLowGoreVersion();
    UBOOL IsPureGame();
    virtual void SortPlayerScores(TArray<struct FOnlinePlayerScore>& PlayerScores);
    DECLARE_FUNCTION(execIsLowGoreVersion)
    {
        P_FINISH;
        *(UBOOL*)Result=IsLowGoreVersion();
    }
    DECLARE_FUNCTION(execIsPureGame)
    {
        P_FINISH;
        *(UBOOL*)Result=IsPureGame();
    }
    DECLARE_FUNCTION(execSortPlayerScores)
    {
        P_GET_TARRAY_REF(struct FOnlinePlayerScore,PlayerScores);
        P_FINISH;
        SortPlayerScores(PlayerScores);
    }
    DECLARE_ABSTRACT_CLASS(AUTGame,AGameInfo,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void AddSupportedGameTypes(AWorldInfo* Info, const TCHAR* WorldFilename) const;
};

class AUTMutator : public AMutator
{
public:
    //## BEGIN PROPS UTMutator
    BITFIELD bExportMenuData:1 GCC_BITFIELD_MAGIC;
    //## END PROPS UTMutator

    DECLARE_ABSTRACT_CLASS(AUTMutator,AMutator,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTMutator)
};

struct FMeshEffect
{
    class UStaticMesh* Mesh;
    class UMaterialInterface* Material;

    /** Constructors */
    FMeshEffect() {}
    FMeshEffect(EEventParm)
    {
        appMemzero(this, sizeof(FMeshEffect));
    }
};

class AUTGameReplicationInfo : public AGameReplicationInfo
{
public:
    //## BEGIN PROPS UTGameReplicationInfo
    FLOAT WeaponBerserk;
    INT MinNetPlayers;
    INT BotDifficulty;
    BITFIELD bWarmupRound:1;
    BITFIELD bForceDefaultCharacter:1;
    BITFIELD bStoryMode:1;
    BITFIELD bConsoleServer:1;
    BITFIELD bAllowKeyboardAndMouse:1;
    BITFIELD bAnnouncementsDisabled:1;
    BITFIELD bHeroesAllowed:1;
    BITFIELD bShowMOTD:1;
    BITFIELD bShowMenuOnDeath:1;
    BITFIELD bRequireReady:1;
    class UUTUIScene_Scoreboard* ScoreboardScene;
    FStringNoInit SinglePlayerBotNames[4];
    BYTE FlagState[2];
    INT SinglePlayerMissionID;
    FStringNoInit MutatorList;
    FStringNoInit RulesString;
    INT MapVoteTimeRemaining;
    TArrayNoInit<class UMaterialInterface*> WeaponOverlays;
    TArrayNoInit<struct FMeshEffect> VehicleWeaponEffects;
    class UUTUIScene_MidGameMenu* CurrentMidGameMenu;
    FName LastUsedMidgameTab;
    //## END PROPS UTGameReplicationInfo

    DECLARE_CLASS(AUTGameReplicationInfo,AGameReplicationInfo,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTGameReplicationInfo)
};

struct FIntStat
{
    FName StatName;
    INT StatValue;

    /** Constructors */
    FIntStat() {}
    FIntStat(EEventParm)
    {
        appMemzero(this, sizeof(FIntStat));
    }
};

struct FTimeStat
{
    FName StatName;
    FLOAT TotalTime;
    FLOAT CurrentStart;

    /** Constructors */
    FTimeStat() {}
    FTimeStat(EEventParm)
    {
        appMemzero(this, sizeof(FTimeStat));
    }
};

struct UTPlayerReplicationInfo_eventGetHUDColor_Parms
{
    FColor ReturnValue;
    UTPlayerReplicationInfo_eventGetHUDColor_Parms(EEventParm)
    {
    }
};
class AUTPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
    //## BEGIN PROPS UTPlayerReplicationInfo
    BITFIELD bHolding:1;
    BITFIELD bHUDRendered:1;
    BITFIELD bIsHero:1;
    BITFIELD bHasBeenHero:1;
    BITFIELD bCanBeHero:1;
    INT spree;
    INT MultiKillLevel;
    FLOAT LastKillTime;
    class AUTLinkedReplicationInfo* CustomReplicationInfo;
    class AUTSquadAI* Squad;
    class AUTCarriedObject* HasFlag;
    class UClass* VoiceClass;
    class AUTGameObjective* StartObjective;
    class AUTGameObjective* TemporaryStartObjective;
    class AUTPlayerReplicationInfo* LastKillerPRI;
    FColor DefaultHudColor;
    class UClass* HUDPawnClass;
    FVector HUDLocation;
    FVector HUDPawnLocation;
    BYTE HUDPawnYaw;
    BYTE OrdersIndex;
    class UMaterialInstanceConstant* HUDMaterialInstance;
    INT SinglePlayerCharacterIndex;
    class UClass* CharClassInfo;
    class UTexture* CharPortrait;
    FStringNoInit ClanTag;
    TArrayNoInit<struct FIntStat> KillStats;
    TArrayNoInit<struct FIntStat> DeathStats;
    TArrayNoInit<struct FIntStat> SuicideStats;
    TArrayNoInit<struct FIntStat> EventStats;
    TArrayNoInit<struct FIntStat> NodeStats;
    TArrayNoInit<struct FIntStat> VehicleKillStats;
    TArrayNoInit<struct FIntStat> PickupStats;
    TArrayNoInit<struct FTimeStat> DrivingStats;
    TArrayNoInit<struct FTimeStat> PowerupTimeStats;
    FStringNoInit OrdersString[8];
    FLOAT HeroMeter;
    FLOAT HeroThreshold;
    FLOAT HeroChargeRate;
    FLOAT LastHeroChargeTime;
    //## END PROPS UTPlayerReplicationInfo

    FColor eventGetHUDColor()
    {
        UTPlayerReplicationInfo_eventGetHUDColor_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        ProcessEvent(FindFunctionChecked(UTGAME_GetHUDColor),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AUTPlayerReplicationInfo,APlayerReplicationInfo,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTTeamInfo : public ATeamInfo
{
public:
    //## BEGIN PROPS UTTeamInfo
    INT DesiredTeamSize;
    class AUTTeamAI* AI;
    FStringNoInit TeamSymbolName;
    class UMaterial* TeamIcon;
    class AUTGameObjective* HomeBase;
    class AUTCarriedObject* TeamFlag;
    FStringNoInit Faction;
    FColor BaseTeamColor[4];
    FColor TextColor[4];
    FStringNoInit TeamColorNames[4];
    //## END PROPS UTTeamInfo

    DECLARE_CLASS(AUTTeamInfo,ATeamInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTTeamInfo)
};

class AUTLinkedReplicationInfo : public AReplicationInfo
{
public:
    //## BEGIN PROPS UTLinkedReplicationInfo
    class AUTLinkedReplicationInfo* NextReplicationInfo;
    //## END PROPS UTLinkedReplicationInfo

    DECLARE_ABSTRACT_CLASS(AUTLinkedReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

struct FMapVoteInfo
{
    INT MapId;
    FStringNoInit Map;
    BYTE NoVotes;

    /** Constructors */
    FMapVoteInfo() {}
    FMapVoteInfo(EEventParm)
    {
        appMemzero(this, sizeof(FMapVoteInfo));
    }
};

class AUTVoteCollector : public AInfo
{
public:
    //## BEGIN PROPS UTVoteCollector
    TArrayNoInit<struct FMapVoteInfo> Votes;
    TArrayNoInit<class AUTVoteReplicationInfo*> VRIList;
    BITFIELD bVoteDecided:1;
    INT WinningIndex;
    //## END PROPS UTVoteCollector

    virtual INT GetMapIndex(INT MapId);
    DECLARE_FUNCTION(execGetMapIndex)
    {
        P_GET_INT(MapId);
        P_FINISH;
        *(INT*)Result=GetMapIndex(MapId);
    }
    DECLARE_CLASS(AUTVoteCollector,AInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTVoteCollector)
};

struct UTVoteReplicationInfo_eventClientHasOwner_Parms
{
    UTVoteReplicationInfo_eventClientHasOwner_Parms(EEventParm)
    {
    }
};
class AUTVoteReplicationInfo : public AReplicationInfo
{
public:
    //## BEGIN PROPS UTVoteReplicationInfo
    class AUTVoteCollector* Collector;
    TArrayNoInit<struct FMapVoteInfo> Maps;
    INT MapCount;
    INT SendIndex;
    INT LastSendIndex;
    class AActor* OldOwner;
    INT Dummy;
    INT MyCurrnetVoteID;
    FStringNoInit LeadingMap;
    //## END PROPS UTVoteReplicationInfo

    virtual INT GetMapIndex(INT MapId);
    DECLARE_FUNCTION(execGetMapIndex)
    {
        P_GET_INT(MapId);
        P_FINISH;
        *(INT*)Result=GetMapIndex(MapId);
    }
    void eventClientHasOwner()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ClientHasOwner),NULL);
    }
    DECLARE_CLASS(AUTVoteReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,UTGame)
	/**
	 * Make an event call when the owner changes.
	 */
	void TickSpecial(FLOAT DeltaTime);
};

class AUTTeamAI : public AInfo
{
public:
    //## BEGIN PROPS UTTeamAI
    class AUTTeamInfo* Team;
    class AUTTeamInfo* EnemyTeam;
    INT NumSupportingPlayer;
    class AUTGameObjective* Objectives;
    class AUTGameObjective* PickedObjective;
    class AUTGameObjective* PickedStandaloneObjective;
    class AUTSquadAI* Squads;
    class AUTSquadAI* AttackSquad;
    class AUTSquadAI* FreelanceSquad;
    class UClass* SquadType;
    INT OrderOffset;
    FName OrderList[8];
    class AUTPickupFactory* SuperPickups[16];
    INT NumSuperPickups;
    BITFIELD bFoundSuperItems:1;
    TArrayNoInit<class AUTVehicleFactory*> ImportantVehicleFactories;
    //## END PROPS UTTeamAI

    virtual BYTE GetTeamNum();
    DECLARE_CLASS(AUTTeamAI,AInfo,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTTeamAI)
};

struct FObjectiveAnnouncementInfo
{
    class USoundNodeWave* AnnouncementSound;
    FStringNoInit AnnouncementText;

    /** Constructors */
    FObjectiveAnnouncementInfo() {}
    FObjectiveAnnouncementInfo(EEventParm)
    {
        appMemzero(this, sizeof(FObjectiveAnnouncementInfo));
    }
};

struct FPostProcessInfo
{
    FLOAT Shadows;
    FLOAT MidTones;
    FLOAT HighLights;
    FLOAT Desaturation;

    /** Constructors */
    FPostProcessInfo() {}
    FPostProcessInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPostProcessInfo));
    }
};

#define UCONST_STATS_VIEW_DM_WEAPONS_RANKED_ALLTIME 8
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_RANKED_ALLTIME 7
#define UCONST_STATS_VIEW_DM_VEHICLES_RANKED_ALLTIME 6
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_ALLTIME 5
#define UCONST_STATS_VIEW_DM_VEHICLES_ALLTIME 4
#define UCONST_STATS_VIEW_DM_WEAPONS_ALLTIME 3
#define UCONST_STATS_VIEW_DM_RANKED_ALLTIME 2
#define UCONST_STATS_VIEW_DM_PLAYER_ALLTIME 1
#define UCONST_QUERY_CAMPAIGN 6
#define UCONST_QUERY_DUEL 5
#define UCONST_QUERY_WAR 4
#define UCONST_QUERY_VCTF 3
#define UCONST_QUERY_CTF 2
#define UCONST_QUERY_TDM 1
#define UCONST_QUERY_DM 0
#define UCONST_PROPERTY_CUSTOMMUTATORS 0x40000004
#define UCONST_PROPERTY_SERVERDESCRIPTION 0x40000003
#define UCONST_PROPERTY_CUSTOMGAMEMODE 0x40000002
#define UCONST_PROPERTY_CUSTOMMAPNAME 0x40000001
#define UCONST_PROPERTY_EPICMUTATORS 0x10000105
#define UCONST_PROPERTY_LEADERBOARDRATING 0x20000004
#define UCONST_PROPERTY_TIMELIMIT 0x100000F9
#define UCONST_PROPERTY_GOALSCORE 0x100000F8
#define UCONST_PROPERTY_NUMBOTS 0x100000F7
#define UCONST_CONTEXT_VSBOTS_4_TO_1 6
#define UCONST_CONTEXT_VSBOTS_3_TO_1 5
#define UCONST_CONTEXT_VSBOTS_2_TO_1 4
#define UCONST_CONTEXT_VSBOTS_3_TO_2 3
#define UCONST_CONTEXT_VSBOTS_1_TO_1 2
#define UCONST_CONTEXT_VSBOTS_1_TO_2 1
#define UCONST_CONTEXT_VSBOTS_NONE 0
#define UCONST_CONTEXT_DEDICATEDSERVER_YES 1
#define UCONST_CONTEXT_DEDICATEDSERVER_NO 0
#define UCONST_CONTEXT_EMPTYSERVER_YES 1
#define UCONST_CONTEXT_EMPTYSERVER_NO 0
#define UCONST_CONTEXT_FULLSERVER_YES 1
#define UCONST_CONTEXT_FULLSERVER_NO 0
#define UCONST_CONTEXT_ALLOWKEYBOARD_ANY 2
#define UCONST_CONTEXT_ALLOWKEYBOARD_YES 1
#define UCONST_CONTEXT_ALLOWKEYBOARD_NO 0
#define UCONST_CONTEXT_FORCERESPAWN_YES 1
#define UCONST_CONTEXT_FORCERESPAWN_NO 0
#define UCONST_CONTEXT_CAMPAIGN_YES 1
#define UCONST_CONTEXT_CAMPAIGN_NO 0
#define UCONST_CONTEXT_LOCKEDSERVER_YES 1
#define UCONST_CONTEXT_LOCKEDSERVER_NO 0
#define UCONST_CONTEXT_PURESERVER_ANY 2
#define UCONST_CONTEXT_PURESERVER_YES 1
#define UCONST_CONTEXT_PURESERVER_NO 0
#define UCONST_CONTEXT_TIMELIMIT_30 4
#define UCONST_CONTEXT_TIMELIMIT_20 3
#define UCONST_CONTEXT_TIMELIMIT_15 2
#define UCONST_CONTEXT_TIMELIMIT_10 1
#define UCONST_CONTEXT_TIMELIMIT_5 0
#define UCONST_CONTEXT_NUMBOTS_8 8
#define UCONST_CONTEXT_NUMBOTS_7 7
#define UCONST_CONTEXT_NUMBOTS_6 6
#define UCONST_CONTEXT_NUMBOTS_5 5
#define UCONST_CONTEXT_NUMBOTS_4 4
#define UCONST_CONTEXT_NUMBOTS_3 3
#define UCONST_CONTEXT_NUMBOTS_2 2
#define UCONST_CONTEXT_NUMBOTS_1 1
#define UCONST_CONTEXT_NUMBOTS_0 0
#define UCONST_CONTEXT_GOALSCORE_30 4
#define UCONST_CONTEXT_GOALSCORE_20 3
#define UCONST_CONTEXT_GOALSCORE_15 2
#define UCONST_CONTEXT_GOALSCORE_10 1
#define UCONST_CONTEXT_GOALSCORE_5 0
#define UCONST_CONTEXT_BOTSKILL_GODLIKE 8
#define UCONST_CONTEXT_BOTSKILL_INHUMAN 7
#define UCONST_CONTEXT_BOTSKILL_MASTERFUL 6
#define UCONST_CONTEXT_BOTSKILL_ADEPT 5
#define UCONST_CONTEXT_BOTSKILL_SKILLED 4
#define UCONST_CONTEXT_BOTSKILL_EXPERIENCED 3
#define UCONST_CONTEXT_BOTSKILL_AVERAGE 2
#define UCONST_CONTEXT_BOTSKILL_NOVICE 1
#define UCONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL 0
#define UCONST_CONTEXT_MAPNAME_CUSTOM 0
#define UCONST_CONTEXT_DEDICATEDSERVER 14
#define UCONST_CONTEXT_EMPTYSERVER 13
#define UCONST_CONTEXT_FULLSERVER 12
#define UCONST_CONTEXT_ALLOWKEYBOARD 11
#define UCONST_CONTEXT_FORCERESPAWN 10
#define UCONST_CONTEXT_CAMPAIGN 9
#define UCONST_CONTEXT_VSBOTS 8
#define UCONST_CONTEXT_LOCKEDSERVER 7
#define UCONST_CONTEXT_PURESERVER 6
#define UCONST_CONTEXT_MAPNAME 1
#define UCONST_CONTEXT_BOTSKILL 0
#define UCONST_CONTEXT_GAME_MODE_CAMPAIGN 7
#define UCONST_CONTEXT_GAME_MODE_CUSTOM 6
#define UCONST_CONTEXT_GAME_MODE_DUEL 5
#define UCONST_CONTEXT_GAME_MODE_TDM 4
#define UCONST_CONTEXT_GAME_MODE_VCTF 3
#define UCONST_CONTEXT_GAME_MODE_WAR 2
#define UCONST_CONTEXT_GAME_MODE_CTF 1
#define UCONST_CONTEXT_GAME_MODE_DM 0
#define UCONST_CONTEXT_GAME_MODE 0x0000800B
#define UCONST_CONTEXT_PRESENCE_MENUPRESENCE 0
#define UCONST_GS_CDKEY_PART_MAXLENGTH 4
#define UCONST_GS_EMAIL_MAXLENGTH 50
#define UCONST_GS_MESSAGE_MAXLENGTH 255
#define UCONST_GS_PASSWORD_MAXLENGTH 30
#define UCONST_GS_USERNAME_MAXLENGTH 15

struct UTPlayerController_eventOnCharacterUnlocked_Parms
{
    UTPlayerController_eventOnCharacterUnlocked_Parms(EEventParm)
    {
    }
};
class AUTPlayerController : public AGamePlayerController
{
public:
    //## BEGIN PROPS UTPlayerController
    BITFIELD bLateComer:1;
    BITFIELD bDontUpdate:1;
    BITFIELD bIsTyping:1;
    BITFIELD bAcuteHearing:1;
    BITFIELD bNoVoiceMessages:1;
    BITFIELD bNoVoiceTaunts:1;
    BITFIELD bNoAutoTaunts:1;
    BITFIELD bAutoTaunt:1;
    BITFIELD bNoMatureLanguage:1;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bUseVehicleRotationOnPossess:1;
    BITFIELD bViewingMap:1;
    BITFIELD bRotateMinimap:1;
    BITFIELD bCameraOutOfWorld:1;
    BITFIELD bFirstPersonWeaponsSelfShadow:1;
    BITFIELD bBehindView:1;
    BITFIELD bForceBehindView:1;
    BITFIELD bUsePhysicsRotation:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bCurrentCamAnimIsDamageShake:1;
    BITFIELD bCurrentCamAnimAffectsFOV:1;
    BITFIELD bLandingShake:1;
    BITFIELD bCenteredWeaponFire:1;
    BITFIELD bNonlinearZoomInterpolation:1;
    BITFIELD bRetrieveSettingsFromProfileOnNextTick:1;
    BITFIELD bQuittingToMainMenu:1;
    BITFIELD bDebugFreeCam:1;
    BITFIELD bNotUsingOrb:1;
    BITFIELD bWasDefendingObjective:1;
    BITFIELD bJustFoundVehicle:1;
    BITFIELD bDisableQuickPick:1;
    BITFIELD bBeaconPulseDir:1;
    BITFIELD bPulseTeamColor:1;
    BITFIELD bPopupMapOnDeath:1;
    BITFIELD bNoCrosshair:1;
    BITFIELD bSimpleCrosshair:1;
    BITFIELD bAlreadyReset:1;
    BITFIELD bServerMutedText:1;
    BITFIELD bDedicatedServerSpectator:1;
    BITFIELD bHideObjectivePaths:1;
    BYTE IdentifiedTeam GCC_BITFIELD_MAGIC;
    BYTE PawnShadowMode;
    BYTE WeaponHandPreference;
    BYTE WeaponHand;
    BYTE AutoObjectivePreference;
    BYTE VehicleControlType;
    FVector DesiredLocation;
    class AUTAnnouncer* Announcer;
    class AUTMusicManager* MusicManager;
    FLOAT LastTauntAnimTime;
    FLOAT LastKickWarningTime;
    FStringNoInit MsgPlayerNotFound;
    class UCameraAnimInst* CameraAnimPlayer;
    class UForceFeedbackWaveform* CameraShakeShortWaveForm;
    class UForceFeedbackWaveform* CameraShakeLongWaveForm;
    struct FPostProcessSettings CamOverridePostProcess;
    class UCameraAnim* DamageCameraAnim;
    FVector ShakeOffset;
    FRotator ShakeRot;
    struct FPostProcessSettings PostProcessModifier;
    FLOAT LastCameraTimeStamp;
    class UClass* MatineeCameraClass;
    class AUTGameObjective* StartObjective;
    class AActor* CalcViewActor;
    FVector CalcViewActorLocation;
    FRotator CalcViewActorRotation;
    FVector CalcViewLocation;
    FRotator CalcViewRotation;
    FLOAT CalcEyeHeight;
    FVector CalcWalkBob;
    FLOAT LastWarningTime;
    FLOAT FOVLinearZoomRate;
    FLOAT FOVNonlinearZoomInterpSpeed;
    FLOAT ZoomRotationModifier;
    FRotator DebugFreeCamRot;
    FLOAT LastShowPathTime;
    class AActor* LastAutoObjective;
    FLOAT VehicleCheckRadiusScaling;
    FLOAT BeaconPulseScale;
    FLOAT BeaconPulseMax;
    FLOAT BeaconPulseRate;
    FLOAT PulseTimer;
    class UUTUIScene_CommandMenu* CommandMenuTemplate;
    class UUTUIScene_CommandMenu* CommandMenu;
    class UUTUIScene* CurrentMapScene;
    class UUTUIScene_MapVote* TestSceneTemplate;
    FStringNoInit ProgressMessageSceneClassName;
    TArrayNoInit<struct FPostProcessInfo> PostProcessPresets;
    class AUTEmitCameraEffect* CameraEffect;
    class AUTVoteReplicationInfo* VoteRI;
    TArrayNoInit<class AActor*> PotentiallyHiddenActors;
    FLOAT LastBullseyeTime;
    FLOAT LastUseTime;
    FLOAT OldMessageTime;
    FLOAT LastFriendlyFireTime;
    FLOAT PopupWaitTime;
    class UUTUIDataStore_StringAliasBindingsMap* BoundEventsStringDataStore;
    FLOAT NextAdminCmdTime;
    FLOAT OnFootDefaultFOV;
    FLOAT LastIncomingMessageTime;
    FLOAT LastCombatUpdateTime;
    FLOAT LastTeamChangeTime;
    class UAudioComponent* HeartBeatSoundComponent;
    //## END PROPS UTPlayerController

    virtual UBOOL IsEpicInternal();
    virtual void ResetProfileToDefault(class UOnlineProfileSettings* Profile);
    virtual INT GetUIPlayerIndex();
    virtual void SetGamma(FLOAT GammaValue);
    virtual void SetHardwarePhysicsEnabled(UBOOL bEnabled);
    virtual UBOOL IsKeyboardAvailable() const;
    virtual UBOOL IsMouseAvailable() const;
    DECLARE_FUNCTION(execIsEpicInternal)
    {
        P_FINISH;
        *(UBOOL*)Result=IsEpicInternal();
    }
    DECLARE_FUNCTION(execResetProfileToDefault)
    {
        P_GET_OBJECT(UOnlineProfileSettings,Profile);
        P_FINISH;
        ResetProfileToDefault(Profile);
    }
    DECLARE_FUNCTION(execGetUIPlayerIndex)
    {
        P_FINISH;
        *(INT*)Result=GetUIPlayerIndex();
    }
    DECLARE_FUNCTION(execSetGamma)
    {
        P_GET_FLOAT(GammaValue);
        P_FINISH;
        SetGamma(GammaValue);
    }
    DECLARE_FUNCTION(execSetHardwarePhysicsEnabled)
    {
        P_GET_UBOOL(bEnabled);
        P_FINISH;
        SetHardwarePhysicsEnabled(bEnabled);
    }
    void eventOnCharacterUnlocked()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_OnCharacterUnlocked),NULL);
    }
    DECLARE_CLASS(AUTPlayerController,AGamePlayerController,0|CLASS_Config,UTGame)
	virtual UBOOL HearSound(USoundCue* InSoundCue, AActor* SoundPlayer, const FVector& SoundLocation, UBOOL bStopWhenOwnerDestroyed);
	virtual UBOOL Tick( FLOAT DeltaSeconds, ELevelTick TickType );
	virtual UBOOL MoveWithInterpMoveTrack(UInterpTrackMove* MoveTrack, UInterpTrackInstMove* MoveInst, FLOAT CurTime, FLOAT DeltaTime);
	virtual void ModifyPostProcessSettings(FPostProcessSettings& PPSettings) const;
	virtual void UpdateHiddenActors(FVector ViewLocation);
	virtual void PreSave();

	/** Unlocks a specific character. */
	void UnlockChar(const FString& CharName);
};

struct FProfileSettingToUE3BindingDatum
{
    FName ProfileSettingName;
    FName UE3BindingName;

    /** Constructors */
    FProfileSettingToUE3BindingDatum() {}
    FProfileSettingToUE3BindingDatum(EEventParm)
    {
        appMemzero(this, sizeof(FProfileSettingToUE3BindingDatum));
    }
};

class AUTConsolePlayerController : public AUTPlayerController
{
public:
    //## BEGIN PROPS UTConsolePlayerController
    BITFIELD bTargetAdhesionEnabled:1;
    BITFIELD bDebugTargetAdhesion:1;
    TArrayNoInit<struct FProfileSettingToUE3BindingDatum> ProfileSettingToUE3BindingMapping360;
    TArrayNoInit<struct FProfileSettingToUE3BindingDatum> ProfileSettingToUE3BindingMappingPS3;
    //## END PROPS UTConsolePlayerController

    virtual class APawn* GetTargetAdhesionFrictionTarget(FLOAT MaxDistance,const FVector& CamLoc,const FRotator& CamRot) const;
    virtual UBOOL IsControllerTiltActive() const;
    virtual void SetControllerTiltDesiredIfAvailable(UBOOL bActive);
    virtual void SetControllerTiltActive(UBOOL bActive);
    virtual void SetOnlyUseControllerTiltInput(UBOOL bActive);
    virtual void SetUseTiltForwardAndBack(UBOOL bActive);
    DECLARE_FUNCTION(execGetTargetAdhesionFrictionTarget)
    {
        P_GET_FLOAT(MaxDistance);
        P_GET_STRUCT_REF(FVector,CamLoc);
        P_GET_STRUCT_REF(FRotator,CamRot);
        P_FINISH;
        *(class APawn**)Result=GetTargetAdhesionFrictionTarget(MaxDistance,CamLoc,CamRot);
    }
    DECLARE_CLASS(AUTConsolePlayerController,AUTPlayerController,0|CLASS_Config,UTGame)
	/**
	 * This will score both Adhesion and Friction targets.  We want the same scoring function as we
	 * don't want the two different systems fighting over targets that are close.
	 **/
	virtual FLOAT ScoreTargetAdhesionFrictionTarget( const APawn* P, FLOAT MaxDistance, const FVector& CamLoc, const FRotator& CamRot ) const;

	/** Determines whether this Pawn can be used for TargetAdhesion **/
	virtual UBOOL IsValidTargetAdhesionFrictionTarget( const APawn* P, FLOAT MaxDistance ) const;
};

class AUTEntryPlayerController : public AUTPlayerController
{
public:
    //## BEGIN PROPS UTEntryPlayerController
    class UPostProcessChain* EntryPostProcessChain;
    TArrayNoInit<class UPostProcessChain*> OldPostProcessChain;
    class ULocalPlayer* OldPlayer;
    //## END PROPS UTEntryPlayerController

    DECLARE_CLASS(AUTEntryPlayerController,AUTPlayerController,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTEntryPlayerController)
};

class AUTDroppedPickup : public ADroppedPickup
{
public:
    //## BEGIN PROPS UTDroppedPickup
    FLOAT YawRotationRate;
    class UPrimitiveComponent* PickupMesh;
    class UParticleSystemComponent* PickupParticles;
    FLOAT StartScale;
    BITFIELD bRotatingPickup:1;
    BITFIELD bPickupable:1;
    class ULightEnvironmentComponent* MyLightEnvironment;
    //## END PROPS UTDroppedPickup

    DECLARE_CLASS(AUTDroppedPickup,ADroppedPickup,0,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTKActor_eventOnEncroach_Parms
{
    class AActor* Other;
    UBOOL ReturnValue;
    UTKActor_eventOnEncroach_Parms(EEventParm)
    {
    }
};
struct UTKActor_eventOnBreakApart_Parms
{
    UTKActor_eventOnBreakApart_Parms(EEventParm)
    {
    }
};
class AUTKActor : public AKActor
{
public:
    //## BEGIN PROPS UTKActor
    BITFIELD bHasHealth:1;
    BITFIELD bDamageOnEncroachment:1;
    BITFIELD bResetDOEWhenAsleep:1;
    BITFIELD bTakeDamageOnEncroachment:1;
    BITFIELD bBreakWhenCausingDamage:1;
    BITFIELD bBroken:1;
    INT Health;
    INT EncroachDamage_Other;
    INT EncroachDamage_Self;
    class UClass* DmgTypeClass;
    INT DOEResetThreshold;
    class UParticleSystem* BrokenTemplate;
    class AController* InstigatorController;
    FScriptDelegate __OnBreakApart__Delegate;
    FScriptDelegate __OnEncroach__Delegate;
    //## END PROPS UTKActor

    UBOOL delegateOnEncroach(class AActor* Other)
    {
        UTKActor_eventOnEncroach_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        Parms.Other=Other;
        ProcessDelegate(UTGAME_OnEncroach,&__OnEncroach__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnBreakApart()
    {
        ProcessDelegate(UTGAME_OnBreakApart,&__OnBreakApart__Delegate,NULL);
    }
    DECLARE_CLASS(AUTKActor,AKActor,0,UTGame)
	// AActor interface
	virtual void physRigidBody(FLOAT DeltaTime);
};

struct FAttachedExplosionLight
{
    class UUTExplosionLight* Light;
    class AActor* Base;
    FVector RelativeLocation;

    /** Constructors */
    FAttachedExplosionLight() {}
    FAttachedExplosionLight(EEventParm)
    {
        appMemzero(this, sizeof(FAttachedExplosionLight));
    }
};

class AUTEmitterPool : public AEmitterPool
{
public:
    //## BEGIN PROPS UTEmitterPool
    TArrayNoInit<struct FAttachedExplosionLight> RelativeExplosionLights;
    //## END PROPS UTEmitterPool

    DECLARE_CLASS(AUTEmitterPool,AEmitterPool,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class AUTInventory : public AInventory
{
public:
    //## BEGIN PROPS UTInventory
    BITFIELD bDropOnDisrupt:1;
    //## END PROPS UTInventory

    DECLARE_ABSTRACT_CLASS(AUTInventory,AInventory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTInventory)
};

struct UTTimedPowerup_eventTimeExpired_Parms
{
    UTTimedPowerup_eventTimeExpired_Parms(EEventParm)
    {
    }
};
class AUTTimedPowerup : public AUTInventory
{
public:
    //## BEGIN PROPS UTTimedPowerup
    FLOAT TimeRemaining;
    INT HudIndex;
    class USoundCue* PowerupOverSound;
    FName PowerupStatName;
    struct FTextureCoordinates IconCoords;
    FLOAT TransitionTime;
    FLOAT TransitionDuration;
    FLOAT WarningTime;
    FVector PP_Scene_HighLights;
    FLOAT PP_Scene_Desaturation;
    //## END PROPS UTTimedPowerup

    void eventTimeExpired()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TimeExpired),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTTimedPowerup,AUTInventory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

struct UTWeapon_eventGetPowerPerc_Parms
{
    FLOAT ReturnValue;
    UTWeapon_eventGetPowerPerc_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventSetPosition_Parms
{
    class AUTPawn* Holder;
    UTWeapon_eventSetPosition_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventStopMuzzleFlash_Parms
{
    UTWeapon_eventStopMuzzleFlash_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventCauseMuzzleFlash_Parms
{
    UTWeapon_eventCauseMuzzleFlash_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventCauseMuzzleFlashLight_Parms
{
    UTWeapon_eventCauseMuzzleFlashLight_Parms(EEventParm)
    {
    }
};
struct UTWeapon_eventMuzzleFlashTimer_Parms
{
    UTWeapon_eventMuzzleFlashTimer_Parms(EEventParm)
    {
    }
};
class AUTWeapon : public AGameWeapon
{
public:
    //## BEGIN PROPS UTWeapon
    BITFIELD bExportMenuData:1;
    BITFIELD bWarnIfInLocker:1;
    BITFIELD bWasLocked:1;
    BITFIELD bSmallWeapons:1;
    BITFIELD bUseCustomCoordinates:1;
    BITFIELD bSuperWeapon:1;
    BITFIELD bNeverForwardPendingFire:1;
    BITFIELD bSuppressSounds:1;
    BITFIELD bUsesOffhand:1;
    BITFIELD bPendingShow:1;
    BITFIELD bShowAltMuzzlePSCWhenWeaponHidden:1;
    BITFIELD bMuzzleFlashPSCLoops:1;
    BITFIELD bMuzzleFlashAttached:1;
    BITFIELD bSplashJump:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bSniping:1;
    BITFIELD bCanDestroyBarricades:1;
    BITFIELD bLeadTarget:1;
    BITFIELD bConsiderProjectileAcceleration:1;
    BITFIELD bFastRepeater:1;
    BITFIELD bLockedAimWhileFiring:1;
    BITFIELD bDebugWeapon:1;
    BITFIELD bUsingAimingHelp:1;
    BITFIELD bAllowFiringWithoutController:1;
    BITFIELD bTargetFrictionEnabled:1;
    BITFIELD bTargetAdhesionEnabled:1;
    BITFIELD bForceHidden:1;
    BITFIELD bHasLocationSpeech:1;
    class UClass* AmmoPickupClass;
    INT AmmoCount;
    INT LockerAmmoCount;
    INT MaxAmmoCount;
    TArrayNoInit<INT> ShotCost;
    TArrayNoInit<FLOAT> MinReloadPct;
    TArrayNoInit<class UCameraAnim*> FireCameraAnim;
    class UForceFeedbackWaveform* WeaponFireWaveForm;
    TArrayNoInit<FName> EffectSockets;
    INT IconX;
    INT IconY;
    INT IconWidth;
    INT IconHeight;
    FLOAT SwitchAbortTime;
    struct FTextureCoordinates IconCoordinates;
    struct FTextureCoordinates CrossHairCoordinates;
    struct FTextureCoordinates SimpleCrossHairCoordinates;
    class UTexture2D* CrosshairImage;
    struct FTextureCoordinates LockedCrossHairCoordinates;
    FLOAT CurrentLockedScale;
    FLOAT StartLockedScale;
    FLOAT FinalLockedScale;
    FLOAT LockedScaleTime;
    FLOAT LockedStartTime;
    BYTE HitEnemy;
    BYTE ZoomedFireModeNum;
    BYTE InventoryGroup;
    BYTE AmmoDisplayType;
    FLOAT LastHitEnemyTime;
    FColor CrosshairColor;
    FLOAT CrosshairScaling;
    FLOAT DroppedPickupOffsetZ;
    struct FTextureCoordinates CustomCrosshairCoordinates;
    TArrayNoInit<BYTE> bZoomedFireMode;
    FLOAT ZoomedTargetFOV;
    FLOAT ZoomedRate;
    FLOAT ZoomFadeTime;
    class USoundCue* ZoomInSound;
    class USoundCue* ZoomOutSound;
    class UClass* AttachmentClass;
    FVector PivotTranslation;
    class UMeshComponent* OverlayMesh;
    FLOAT GroupWeight;
    FLOAT InventoryWeight;
    INT QuickPickGroup;
    FLOAT QuickPickWeight;
    TArrayNoInit<FName> WeaponFireAnim;
    TArrayNoInit<FName> ArmFireAnim;
    class UAnimSet* ArmsAnimSet;
    FName WeaponPutDownAnim;
    FName ArmsPutDownAnim;
    FName WeaponEquipAnim;
    FName ArmsEquipAnim;
    TArrayNoInit<FName> WeaponIdleAnims;
    TArrayNoInit<FName> ArmIdleAnims;
    TArrayNoInit<class USoundCue*> WeaponFireSnd;
    class USoundCue* WeaponPutDownSnd;
    class USoundCue* WeaponEquipSnd;
    FLOAT BobDamping;
    FLOAT JumpDamping;
    FLOAT MaxPitchLag;
    FLOAT MaxYawLag;
    FLOAT LastRotUpdate;
    FRotator LastRotation;
    FLOAT OldLeadMag[2];
    INT OldRotDiff[2];
    FLOAT OldMaxDiff[2];
    FLOAT RotChgSpeed;
    FLOAT ReturnChgSpeed;
    FColor WeaponColor;
    FLOAT WeaponCanvasXPct;
    FLOAT WeaponCanvasYPct;
    FName MuzzleFlashSocket;
    class UUTParticleSystemComponent* MuzzleFlashPSC;
    class UParticleSystem* MuzzleFlashPSCTemplate;
    class UParticleSystem* MuzzleFlashAltPSCTemplate;
    FColor MuzzleFlashColor;
    class UUTExplosionLight* MuzzleFlashLight;
    class UClass* MuzzleFlashLightClass;
    FLOAT MuzzleFlashDuration;
    FVector PlayerViewOffset;
    FVector SmallWeaponsOffset;
    FLOAT WideScreenOffsetScaling;
    FRotator WidescreenRotationOffset;
    FVector HiddenWeaponsOffset;
    FLOAT ProjectileSpawnOffset;
    FRotator LockerRotation;
    FVector LockerOffset;
    FLOAT CurrentRating;
    FLOAT aimerror;
    struct FObjectiveAnnouncementInfo NeedToPickUpAnnouncement;
    FLOAT AimingHelpRadius[2];
    FLOAT ZoomedTurnSpeedScalePct;
    FLOAT TargetFrictionDistanceMin;
    FLOAT TargetFrictionDistancePeak;
    FLOAT TargetFrictionDistanceMax;
    FInterpCurveFloat TargetFrictionDistanceCurve;
    FVector2D TargetFrictionMultiplierRange;
    FLOAT TargetFrictionPeakRadiusScale;
    FLOAT TargetFrictionPeakHeightScale;
    FVector TargetFrictionOffset;
    FLOAT TargetFrictionZoomedBoostValue;
    FLOAT TargetAdhesionTimeMax;
    FLOAT TargetAdhesionDistanceMax;
    FLOAT TargetAdhesionAimDistY;
    FLOAT TargetAdhesionAimDistZ;
    FVector2D TargetAdhesionScaleRange;
    FLOAT TargetAdhesionScaleAmountMin;
    FLOAT TargetAdhesionTargetVelocityMin;
    FLOAT TargetAdhesionPlayerVelocityMin;
    FLOAT TargetAdhesionZoomedBoostValue;
    TArrayNoInit<class USoundNodeWave*> LocationSpeech;
    FStringNoInit PrimaryFireHintString;
    FStringNoInit SecondaryFireHintString;
    FStringNoInit JumpHintString;
    FStringNoInit CrouchHintString;
    FStringNoInit UseHintString;
    FStringNoInit AdditionalHintString;
    //## END PROPS UTWeapon

    virtual void EnsureWeaponOverlayComponentLast();
    DECLARE_FUNCTION(execEnsureWeaponOverlayComponentLast)
    {
        P_FINISH;
        EnsureWeaponOverlayComponentLast();
    }
    FLOAT eventGetPowerPerc()
    {
        UTWeapon_eventGetPowerPerc_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_GetPowerPerc),&Parms);
        return Parms.ReturnValue;
    }
    void eventSetPosition(class AUTPawn* Holder)
    {
        UTWeapon_eventSetPosition_Parms Parms(EC_EventParm);
        Parms.Holder=Holder;
        ProcessEvent(FindFunctionChecked(UTGAME_SetPosition),&Parms);
    }
    void eventStopMuzzleFlash()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_StopMuzzleFlash),NULL);
    }
    void eventCauseMuzzleFlash()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CauseMuzzleFlash),NULL);
    }
    void eventCauseMuzzleFlashLight()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CauseMuzzleFlashLight),NULL);
    }
    void eventMuzzleFlashTimer()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MuzzleFlashTimer),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTWeapon,AGameWeapon,0|CLASS_Config|CLASS_NativeReplication,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Weapon");}

	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	UBOOL Tick( FLOAT DeltaSeconds, ELevelTick TickType );
};

class AUTBeamWeapon : public AUTWeapon
{
public:
    //## BEGIN PROPS UTBeamWeapon
    class UParticleSystem* BeamTemplate[2];
    class UParticleSystemComponent* BeamEmitter[2];
    FName BeamSockets[2];
    FName EndPointParamName;
    FName BeamPreFireAnim[2];
    FName BeamFireAnim[2];
    FName BeamPostFireAnim[2];
    class UForceFeedbackWaveform* BeamWeaponFireWaveForm;
    //## END PROPS UTBeamWeapon

    DECLARE_ABSTRACT_CLASS(AUTBeamWeapon,AUTWeapon,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTBeamWeapon)
};

class AUTWeap_LinkGun : public AUTBeamWeapon
{
public:
    //## BEGIN PROPS UTWeap_LinkGun
    class AActor* LinkedTo;
    class UPrimitiveComponent* LinkedComponent;
    FLOAT WeaponLinkDistance;
    TArrayNoInit<class AUTWeap_LinkGun*> LinkedList;
    class AActor* Victim;
    INT LinkStrength;
    FLOAT LinkFlexibility;
    FLOAT LinkBreakDelay;
    FLOAT MomentumTransfer;
    FLOAT BeamAmmoUsePerSecond;
    FLOAT ReaccquireTimer;
    BITFIELD bBeamHit:1;
    BITFIELD bAutoCharge:1;
    BITFIELD bFullPower:1;
    FLOAT RechargeRate;
    FLOAT PartialCharge;
    FLOAT LastFireTime;
    FLOAT SavedDamage;
    FLOAT SavedAmmoUse;
    FLOAT MinimumDamage;
    FLOAT PartialAmmo;
    class UMaterialInstanceConstant* WeaponMaterialInstance;
    class AUTLinkBeamLight* BeamLight;
    class USoundCue* StartAltFireSound;
    class USoundCue* EndAltFireSound;
    class AUTEmitter* BeamEndpointEffect;
    class UParticleSystemComponent* PoweredUpEffect;
    FName PoweredUpEffectSocket;
    FVector BeamAttachLocation;
    FLOAT LastBeamAttachTime;
    FVector BeamAttachNormal;
    class AActor* BeamAttachActor;
    class UClass* LinkAttachmentClass;
    class UParticleSystem* TeamMuzzleFlashTemplates[3];
    class UParticleSystem* HighPowerMuzzleFlashTemplate;
    //## END PROPS UTWeap_LinkGun

    DECLARE_CLASS(AUTWeap_LinkGun,AUTBeamWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTWeap_FlakCannon : public AUTWeapon
{
public:
    //## BEGIN PROPS UTWeap_FlakCannon
    FLOAT SpreadDist;
    class UUTSkeletalMeshComponent* SkeletonFirstPersonMesh;
    INT curTensOdometer;
    INT curOnesOdometer;
    FLOAT OdometerMaxPerSecOnes;
    FLOAT OdometerMaxPerSecTens;
    FName OnesPlaceSkelName;
    FName TensPlaceSkelName;
    class UClass* CenterShardClass;
    //## END PROPS UTWeap_FlakCannon

    DECLARE_CLASS(AUTWeap_FlakCannon,AUTWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTWeap_ImpactHammer_eventImpactAutoFire_Parms
{
    UTWeap_ImpactHammer_eventImpactAutoFire_Parms(EEventParm)
    {
    }
};
class AUTWeap_ImpactHammer : public AUTWeapon
{
public:
    //## BEGIN PROPS UTWeap_ImpactHammer
    FLOAT MinDamage;
    FLOAT MaxDamage;
    FLOAT MinForce;
    FLOAT MaxForce;
    FLOAT MinSelfDamage;
    FLOAT SelfForceScale;
    FLOAT SelfDamageScale;
    INT PowerLevel;
    FLOAT ChargeTime;
    FName ChargeAnim;
    FName ChargeIdleAnim;
    FLOAT MaxChargeTime;
    FLOAT MinChargeTime;
    class USoundCue* WeaponChargeSnd;
    class USoundCue* WeaponEMPChargeSnd;
    class USoundCue* ImpactJumpSound;
    class AActor* AutoHitActor;
    FLOAT AutoFireRange;
    FLOAT EMPDamage;
    BITFIELD bIsCurrentlyCharging:1;
    class UParticleSystem* ChargeEffect[2];
    class UMaterialInstanceConstant* BloodMIC;
    class UParticleSystem* AltHitEffect;
    class UCameraAnim* ImpactKillCameraAnim;
    //## END PROPS UTWeap_ImpactHammer

    void eventImpactAutoFire()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ImpactAutoFire),NULL);
    }
    DECLARE_CLASS(AUTWeap_ImpactHammer,AUTWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTWeap_RocketLauncher_eventAdjustLockTarget_Parms
{
    class AActor* NewLockTarget;
    UTWeap_RocketLauncher_eventAdjustLockTarget_Parms(EEventParm)
    {
    }
};
class AUTWeap_RocketLauncher : public AUTWeapon
{
public:
    //## BEGIN PROPS UTWeap_RocketLauncher
    BYTE LoadedFireMode;
    class UClass* SeekingRocketClass;
    class UClass* LoadedRocketClass;
    class UClass* GrenadeClass;
    INT GrenadeSpreadDist;
    class USoundCue* AltFireModeChangeSound;
    class USoundCue* RocketLoadedSound;
    class USoundCue* GrenadeFireSound;
    class UUTSkeletalMeshComponent* SkeletonFirstPersonMesh;
    BITFIELD bIsAnyAmmoHidden:1;
    BITFIELD bLockedOnTarget:1;
    BITFIELD bTargetLockingActive:1;
    FLOAT LockCheckTime;
    FLOAT LockRange;
    FLOAT LockAcquireTime;
    FLOAT LockTolerance;
    class AActor* LockedTarget;
    class APlayerReplicationInfo* LockedTargetPRI;
    class AActor* PendingLockedTarget;
    FLOAT LastLockedOnTime;
    FLOAT PendingLockedTargetTime;
    FLOAT LastValidTargetTime;
    FLOAT LockAim;
    FLOAT ConsoleLockAim;
    class USoundCue* LockAcquiredSound;
    class USoundCue* LockLostSound;
    FLOAT LastTargetLockCheckTime;
    INT LoadedShotCount;
    INT MaxLoadCount;
    class USoundCue* WeaponLoadedSnd;
    TArrayNoInit<FLOAT> AltFireQueueTimes;
    TArrayNoInit<FLOAT> AltFireLaunchTimes;
    TArrayNoInit<FLOAT> AltFireEndTimes;
    TArrayNoInit<class USoundCue*> AltFireSndQue;
    TArrayNoInit<FName> MuzzleFlashSocketList;
    TArrayNoInit<class UUTParticleSystemComponent*> MuzzleFlashPSCList;
    INT SpreadDist;
    FLOAT GracePeriod;
    FLOAT WaitToFirePct;
    FStringNoInit GrenadeString;
    FStringNoInit SpiralString;
    struct FTextureCoordinates LoadedIconCoords[3];
    FName LoadUpAnimList[3];
    FName WeaponAltFireLaunch[3];
    FName WeaponAltFireLaunchEnd[3];
    //## END PROPS UTWeap_RocketLauncher

    virtual void CheckTargetLock();
    virtual void UpdateLockTarget(class AActor* NewLockTarget);
    virtual UBOOL CanLockOnTo(class AActor* TA);
    DECLARE_FUNCTION(execCheckTargetLock)
    {
        P_FINISH;
        CheckTargetLock();
    }
    DECLARE_FUNCTION(execUpdateLockTarget)
    {
        P_GET_OBJECT(AActor,NewLockTarget);
        P_FINISH;
        UpdateLockTarget(NewLockTarget);
    }
    DECLARE_FUNCTION(execCanLockOnTo)
    {
        P_GET_OBJECT(AActor,TA);
        P_FINISH;
        *(UBOOL*)Result=CanLockOnTo(TA);
    }
    void eventAdjustLockTarget(class AActor* NewLockTarget)
    {
        UTWeap_RocketLauncher_eventAdjustLockTarget_Parms Parms(EC_EventParm);
        Parms.NewLockTarget=NewLockTarget;
        ProcessEvent(FindFunctionChecked(UTGAME_AdjustLockTarget),&Parms);
    }
    DECLARE_CLASS(AUTWeap_RocketLauncher,AUTWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct FAmmoStore
{
    INT Amount;
    class UClass* WeaponClass;

    /** Constructors */
    FAmmoStore() {}
    FAmmoStore(EEventParm)
    {
        appMemzero(this, sizeof(FAmmoStore));
    }
};

class AUTInventoryManager : public AInventoryManager
{
public:
    //## BEGIN PROPS UTInventoryManager
    BITFIELD bInfiniteAmmo:1;
    TArrayNoInit<struct FAmmoStore> AmmoStorage;
    class AWeapon* PreviousWeapon;
    class AUTWeapon* PendingSwitchWeapon;
    FLOAT LastAdjustWeaponTime;
    //## END PROPS UTInventoryManager

    DECLARE_CLASS(AUTInventoryManager,AInventoryManager,0,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(AUTInventoryManager)
};

class AUTPickupLight : public ALight
{
public:
    //## BEGIN PROPS UTPickupLight
    //## END PROPS UTPickupLight

    DECLARE_ABSTRACT_CLASS(AUTPickupLight,ALight,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTPickupLight)
};

class AUTArmorPickupLight : public AUTPickupLight
{
public:
    //## BEGIN PROPS UTArmorPickupLight
    //## END PROPS UTArmorPickupLight

    DECLARE_CLASS(AUTArmorPickupLight,AUTPickupLight,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTArmorPickupLight)
};

class AUTHealthPickupLight : public AUTPickupLight
{
public:
    //## BEGIN PROPS UTHealthPickupLight
    //## END PROPS UTHealthPickupLight

    DECLARE_CLASS(AUTHealthPickupLight,AUTPickupLight,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTHealthPickupLight)
};

class AUTWeaponLockerPickupLight : public AUTPickupLight
{
public:
    //## BEGIN PROPS UTWeaponLockerPickupLight
    //## END PROPS UTWeaponLockerPickupLight

    DECLARE_CLASS(AUTWeaponLockerPickupLight,AUTPickupLight,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTWeaponLockerPickupLight)
};

class AUTWeaponPickupLight : public AUTPickupLight
{
public:
    //## BEGIN PROPS UTWeaponPickupLight
    //## END PROPS UTWeaponPickupLight

    DECLARE_CLASS(AUTWeaponPickupLight,AUTPickupLight,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTWeaponPickupLight)
};

struct FScorerRecord
{
    class AUTPlayerReplicationInfo* PRI;
    FLOAT Pct;

    /** Constructors */
    FScorerRecord() {}
    FScorerRecord(EEventParm)
    {
        appMemzero(this, sizeof(FScorerRecord));
    }
};

struct UTGameObjective_eventGetBestViewTarget_Parms
{
    class AActor* ReturnValue;
    UTGameObjective_eventGetBestViewTarget_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsActive_Parms
{
    UBOOL ReturnValue;
    UTGameObjective_eventIsActive_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventIsCritical_Parms
{
    UBOOL ReturnValue;
    UTGameObjective_eventIsCritical_Parms(EEventParm)
    {
    }
};
struct UTGameObjective_eventRenderMinimap_Parms
{
    class UUTMapInfo* MP;
    class UCanvas* Canvas;
    class AUTPlayerController* PlayerOwner;
    FLOAT ColorPercent;
    UTGameObjective_eventRenderMinimap_Parms(EEventParm)
    {
    }
};
class AUTGameObjective : public AObjective
{
public:
    //## BEGIN PROPS UTGameObjective
    BITFIELD bAlreadyRendered:1;
    BITFIELD bAllowRemoteUse:1;
    BITFIELD bFirstObjective:1;
    BITFIELD bHasSensor:1;
    BITFIELD bUnderAttack:1;
    BITFIELD bIsConstructing:1;
    BITFIELD bIsDisabled:1;
    BITFIELD bIsActive:1;
    BITFIELD bAllowOnlyShootable:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BITFIELD bHasLocationSpeech:1;
    BITFIELD bScriptRenderAdditionalMinimap:1;
    BYTE DefenderTeamIndex GCC_BITFIELD_MAGIC;
    BYTE StartTeam;
    BYTE DefensePriority;
    class AUTSquadAI* DefenseSquad;
    class AUTDefensePoint* DefensePoints;
    FStringNoInit LocationPrefix;
    FStringNoInit LocationPostfix;
    FStringNoInit ObjectiveName;
    TArrayNoInit<class ANavigationPoint*> VehicleParkingSpots;
    class AVolume* MyBaseVolume;
    FLOAT BaseRadius;
    TArrayNoInit<struct FScorerRecord> Scorers;
    INT Score;
    class AUTGameObjective* NextObjective;
    FLinearColor ControlColor[3];
    FVector HUDLocation;
    struct FTextureCoordinates AttackCoords;
    struct FTextureCoordinates IconCoords;
    FLOAT IconPosX;
    FLOAT IconPosY;
    FLOAT IconExtentX;
    FLOAT IconExtentY;
    class UMaterial* HudMaterial;
    FLOAT MaxSensorRange;
    FLOAT CameraViewDistance;
    TArrayNoInit<class AUTVehicleFactory*> VehicleFactories;
    TArrayNoInit<class APlayerStart*> PlayerStarts;
    TArrayNoInit<class ANavigationPoint*> ShootSpots;
    TArrayNoInit<class AUTTeamStaticMesh*> TeamStaticMeshes;
    struct FObjectiveAnnouncementInfo AttackAnnouncement;
    struct FObjectiveAnnouncementInfo DefendAnnouncement;
    FLOAT HighlightScale;
    FLOAT MaxHighlightScale;
    FLOAT HighlightSpeed;
    FLOAT MinimapIconScale;
    FLOAT LastHighlightUpdate;
    FLOAT LastPostRenderTraceTime;
    FLOAT MaxBeaconDistance;
    TArrayNoInit<class USoundNodeWave*> LocationSpeech;
    class UTexture2D* IconHudTexture;
    FLinearColor AttackLinearColor;
    //## END PROPS UTGameObjective

    virtual void SetHUDLocation(FVector NewHUDLocation);
    virtual void DrawIcon(class UCanvas* Canvas,FVector IconLocation,FLOAT IconWidth,FLOAT IconAlpha,class AUTPlayerController* PlayerOwner,FLinearColor DrawColor);
    virtual void RenderMyLinks(class UUTMapInfo* MP,class UCanvas* Canvas,class AUTPlayerController* PlayerOwner,FLOAT ColorPercent);
    virtual BYTE GetTeamNum();
    DECLARE_FUNCTION(execDrawIcon)
    {
        P_GET_OBJECT(UCanvas,Canvas);
        P_GET_STRUCT(FVector,IconLocation);
        P_GET_FLOAT(IconWidth);
        P_GET_FLOAT(IconAlpha);
        P_GET_OBJECT(AUTPlayerController,PlayerOwner);
        P_GET_STRUCT(FLinearColor,DrawColor);
        P_FINISH;
        DrawIcon(Canvas,IconLocation,IconWidth,IconAlpha,PlayerOwner,DrawColor);
    }
    DECLARE_FUNCTION(execRenderMyLinks)
    {
        P_GET_OBJECT(UUTMapInfo,MP);
        P_GET_OBJECT(UCanvas,Canvas);
        P_GET_OBJECT(AUTPlayerController,PlayerOwner);
        P_GET_FLOAT(ColorPercent);
        P_FINISH;
        RenderMyLinks(MP,Canvas,PlayerOwner,ColorPercent);
    }
    class AActor* eventGetBestViewTarget()
    {
        UTGameObjective_eventGetBestViewTarget_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(UTGAME_GetBestViewTarget),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsActive()
    {
        UTGameObjective_eventIsActive_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_IsActive),&Parms);
        return Parms.ReturnValue;
    }
    UBOOL eventIsCritical()
    {
        UTGameObjective_eventIsCritical_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_IsCritical),&Parms);
        return Parms.ReturnValue;
    }
    void eventRenderMinimap(class UUTMapInfo* MP,class UCanvas* Canvas,class AUTPlayerController* PlayerOwner,FLOAT ColorPercent)
    {
        UTGameObjective_eventRenderMinimap_Parms Parms(EC_EventParm);
        Parms.MP=MP;
        Parms.Canvas=Canvas;
        Parms.PlayerOwner=PlayerOwner;
        Parms.ColorPercent=ColorPercent;
        ProcessEvent(FindFunctionChecked(UTGAME_RenderMinimap),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTGameObjective,AObjective,0|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
	virtual void AddForcedSpecs(AScout* Scout);
	virtual void SetNetworkID(INT InNetworkID);
	virtual void Serialize(FArchive& Ar);

	virtual void CheckForErrors();
};

struct UTPickupFactory_eventInitPickupMeshEffects_Parms
{
    UTPickupFactory_eventInitPickupMeshEffects_Parms(EEventParm)
    {
    }
};
class AUTPickupFactory : public APickupFactory
{
public:
    //## BEGIN PROPS UTPickupFactory
    BITFIELD bRotatingPickup:1;
    BITFIELD bPulseBase:1;
    BITFIELD bFloatingPickup:1;
    BITFIELD bRandomStart:1;
    BITFIELD bIsDisabled:1;
    BITFIELD bUpdatingPickup:1;
    BITFIELD bDoVisibilityFadeIn:1;
    BITFIELD bIsRespawning:1;
    BITFIELD bHasLocationSpeech:1;
    FLOAT YawRotationRate;
    class AController* TeamOwner[4];
    class UStaticMeshComponent* BaseMesh;
    class UMaterialInstanceConstant* BaseMaterialInstance;
    FLinearColor BaseBrightEmissive;
    FLinearColor BaseDimEmissive;
    FLOAT BasePulseRate;
    FLOAT BasePulseTime;
    FLOAT PulseThreshold;
    FLinearColor BaseTargetEmissive;
    FLinearColor BaseEmissive;
    FName BaseMaterialParamName;
    FLOAT BobTimer;
    FLOAT BobOffset;
    FLOAT BobSpeed;
    FLOAT BobBaseOffset;
    class USoundCue* RespawnSound;
    class UAudioComponent* PickupReadySound;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    FVector PivotTranslation;
    FName PickupStatName;
    FName VisibilityParamName;
    class UMaterialInstanceConstant* MIC_Visibility;
    class UMaterialInstanceConstant* MIC_VisibilitySecondMaterial;
    class UParticleSystemComponent* Glow;
    FName GlowEmissiveParam;
    TArrayNoInit<class USoundNodeWave*> LocationSpeech;
    FLOAT LastSeekNotificationTime;
    class UForceFeedbackWaveform* PickUpWaveForm;
    //## END PROPS UTPickupFactory

    void eventInitPickupMeshEffects()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_InitPickupMeshEffects),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTPickupFactory,APickupFactory,0|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void PostEditMove(UBOOL bFinished);
	virtual void Spawned();
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTItemPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTItemPickupFactory
    class USoundCue* PickupSound;
    FStringNoInit PickupMessage;
    FLOAT RespawnTime;
    //## END PROPS UTItemPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTItemPickupFactory,AUTPickupFactory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTItemPickupFactory)
};

class AUTAmmoPickupFactory : public AUTItemPickupFactory
{
public:
    //## BEGIN PROPS UTAmmoPickupFactory
    INT AmmoAmount;
    class UClass* TargetWeapon;
    class UClass* TransformedClass;
    //## END PROPS UTAmmoPickupFactory

    virtual void TransformAmmoType(class UClass* NewAmmoClass);
    DECLARE_FUNCTION(execTransformAmmoType)
    {
        P_GET_OBJECT(UClass,NewAmmoClass);
        P_FINISH;
        TransformAmmoType(NewAmmoClass);
    }
    DECLARE_ABSTRACT_CLASS(AUTAmmoPickupFactory,AUTItemPickupFactory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTAmmoPickupFactory)
};

class AUTAmmo_BioRifle : public AUTAmmoPickupFactory
{
public:
    //## BEGIN PROPS UTAmmo_BioRifle
    //## END PROPS UTAmmo_BioRifle

    DECLARE_CLASS(AUTAmmo_BioRifle,AUTAmmoPickupFactory,0,UTGame)
	virtual void CheckForErrors()
	{
		Super::CheckForErrors();

		GWarn->MapCheck_Add(MCTYPE_ERROR, this, TEXT("This should be replaced with UTAmmo_BioRifle_Content"));
	}
};

class AUTArmorPickupFactory : public AUTItemPickupFactory
{
public:
    //## BEGIN PROPS UTArmorPickupFactory
    INT ShieldAmount;
    class UUTParticleSystemComponent* ParticleEffects;
    //## END PROPS UTArmorPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTArmorPickupFactory,AUTItemPickupFactory,0,UTGame)
	virtual void CheckForErrors();
};

class AUTHealthPickupFactory : public AUTItemPickupFactory
{
public:
    //## BEGIN PROPS UTHealthPickupFactory
    INT HealingAmount;
    BITFIELD bSuperHeal:1;
    //## END PROPS UTHealthPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTHealthPickupFactory,AUTItemPickupFactory,0,UTGame)
	virtual void CheckForErrors();
};

class AUTPickupFactory_HealthVial : public AUTHealthPickupFactory
{
public:
    //## BEGIN PROPS UTPickupFactory_HealthVial
    TArrayNoInit<class AUTPickupFactory_HealthVial*> AdjacentVials;
    //## END PROPS UTPickupFactory_HealthVial

    DECLARE_CLASS(AUTPickupFactory_HealthVial,AUTHealthPickupFactory,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTPickupFactory_HealthVial)
};

class AUTPowerupPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTPowerupPickupFactory
    class UPrimitiveComponent* Spinner;
    class UUTParticleSystemComponent* ParticleEffects;
    //## END PROPS UTPowerupPickupFactory

    DECLARE_ABSTRACT_CLASS(AUTPowerupPickupFactory,AUTPickupFactory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaSeconds);
};

struct FWeaponEntry
{
    class UClass* WeaponClass;
    class UPrimitiveComponent* PickupMesh;

    /** Constructors */
    FWeaponEntry() {}
    FWeaponEntry(EEventParm)
    {
        appMemzero(this, sizeof(FWeaponEntry));
    }
};

struct FReplacementWeaponEntry
{
    BITFIELD bReplaced:1;
    class UClass* WeaponClass;

    /** Constructors */
    FReplacementWeaponEntry() {}
    FReplacementWeaponEntry(EEventParm)
    {
        appMemzero(this, sizeof(FReplacementWeaponEntry));
    }
};

struct FPawnToucher
{
    class APawn* P;
    FLOAT NextTouchTime;

    /** Constructors */
    FPawnToucher() {}
    FPawnToucher(EEventParm)
    {
        appMemzero(this, sizeof(FPawnToucher));
    }
};

struct UTWeaponLocker_eventSetPlayerNearby_Parms
{
    class APlayerController* PC;
    UBOOL bNewPlayerNearby;
    UBOOL bPlayEffects;
    UTWeaponLocker_eventSetPlayerNearby_Parms(EEventParm)
    {
    }
};
class AUTWeaponLocker : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTWeaponLocker
    TArrayNoInit<struct FWeaponEntry> Weapons;
    struct FReplacementWeaponEntry ReplacementWeapons[6];
    TArrayNoInit<FVector> LockerPositions;
    FStringNoInit LockerString;
    TArrayNoInit<struct FPawnToucher> Customers;
    BITFIELD bIsActive:1;
    BITFIELD bPlayerNearby:1;
    BITFIELD bScalingUp:1;
    FLOAT CurrentWeaponScaleX;
    FLOAT ProximityDistanceSquared;
    class UParticleSystemComponent* AmbientEffect;
    class UParticleSystemComponent* ProximityEffect;
    class UParticleSystem* InactiveEffectTemplate;
    class UParticleSystem* ActiveEffectTemplate;
    class UParticleSystem* WeaponSpawnEffectTemplate;
    FLOAT ScaleRate;
    FLOAT NextProximityCheckTime;
    //## END PROPS UTWeaponLocker

    void eventSetPlayerNearby(class APlayerController* PC,UBOOL bNewPlayerNearby,UBOOL bPlayEffects)
    {
        UTWeaponLocker_eventSetPlayerNearby_Parms Parms(EC_EventParm);
        Parms.PC=PC;
        Parms.bNewPlayerNearby=bNewPlayerNearby ? FIRST_BITFIELD : FALSE;
        Parms.bPlayEffects=bPlayEffects ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_SetPlayerNearby),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTWeaponLocker,AUTPickupFactory,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
	virtual void CheckForErrors();
};

class AUTWeaponPickupFactory : public AUTPickupFactory
{
public:
    //## BEGIN PROPS UTWeaponPickupFactory
    class UClass* WeaponPickupClass;
    BITFIELD bWeaponStay:1;
    BITFIELD bIsActive:1;
    class UParticleSystemComponent* BaseGlow;
    FLOAT WeaponPickupScaling;
    TArrayNoInit<struct FPawnToucher> Customers;
    //## END PROPS UTWeaponPickupFactory

    DECLARE_CLASS(AUTWeaponPickupFactory,AUTPickupFactory,0,UTGame)
	virtual void CheckForErrors();
	virtual void PostEditChange(UProperty* PropertyThatChanged);
};

class AUTTeamPlayerStart : public APlayerStart
{
public:
    //## BEGIN PROPS UTTeamPlayerStart
    BYTE TeamNumber GCC_BITFIELD_MAGIC;
    TArrayNoInit<class UTexture2D*> TeamSprites;
    //## END PROPS UTTeamPlayerStart

    DECLARE_CLASS(AUTTeamPlayerStart,APlayerStart,0,UTGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Spawned();
};

class AUTTeleporterBase : public ATeleporter
{
public:
    //## BEGIN PROPS UTTeleporterBase
    class USceneCaptureComponent* PortalCaptureComponent;
    class UTextureRenderTarget2D* TextureTarget;
    INT TextureResolutionX;
    INT TextureResolutionY;
    class AActor* PortalViewTarget;
    class UMaterialInterface* PortalMaterial;
    class UMaterialInstanceConstant* PortalMaterialInstance;
    FName PortalTextureParameter;
    class USoundCue* TeleportingSound;
    //## END PROPS UTTeleporterBase

    DECLARE_ABSTRACT_CLASS(AUTTeleporterBase,ATeleporter,0,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	virtual void TickSpecial(FLOAT DeltaTime);
};

class AUTDefensePoint : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTDefensePoint
    class AController* CurrentUser;
    class AUTDefensePoint* NextDefensePoint;
    class AUTGameObjective* DefendedObjective;
    BITFIELD bFirstScript:1;
    BITFIELD bSniping:1;
    BITFIELD bOnlyOnFoot:1;
    BITFIELD bOnlySkilled:1;
    class UClass* WeaponPreference;
    FName DefenseGroup;
    BYTE DefensePriority;
    TArrayNoInit<class UTexture2D*> TeamSprites;
    //## END PROPS UTDefensePoint

    DECLARE_CLASS(AUTDefensePoint,ANavigationPoint,0,UTGame)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void Spawned();
};

class AUTHoldSpot : public AUTDefensePoint
{
public:
    //## BEGIN PROPS UTHoldSpot
    class AUTVehicle* HoldVehicle;
    class ANavigationPoint* LastAnchor;
    //## END PROPS UTHoldSpot

    DECLARE_CLASS(AUTHoldSpot,AUTDefensePoint,0,UTGame)
	virtual ANavigationPoint* SpecifyEndAnchor(APawn* RouteFinder);
	virtual void NotifyAnchorFindingResult(ANavigationPoint* EndAnchor, APawn* RouteFinder);
	virtual UBOOL AnchorNeedNotBeReachable();
};

class AUTJumpPad : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTJumpPad
    FVector JumpVelocity;
    class APathNode* JumpTarget;
    class USoundCue* JumpSound;
    FLOAT JumpTime;
    FLOAT JumpAirControl;
    class UAudioComponent* JumpAmbientSound;
    //## END PROPS UTJumpPad

    DECLARE_CLASS(AUTJumpPad,ANavigationPoint,0,UTGame)
	virtual void addReachSpecs(AScout *Scout, UBOOL bOnlyChanged=0);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void PostEditMove(UBOOL bFinished);
	UBOOL CalculateJumpVelocity(AScout *Scout);
};

struct FTranslocatorSource
{
    class ANavigationPoint* Point;
    BITFIELD bAutoDetectVelocity:1;
    FVector RequiredTransVelocity;
    FLOAT RequiredJumpZ;

    /** Constructors */
    FTranslocatorSource() {}
    FTranslocatorSource(EEventParm)
    {
        appMemzero(this, sizeof(FTranslocatorSource));
    }
};

class AUTTranslocatorDest : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTTranslocatorDest
    TArrayNoInit<struct FTranslocatorSource> StartPoints;
    //## END PROPS UTTranslocatorDest

    DECLARE_CLASS(AUTTranslocatorDest,ANavigationPoint,0,UTGame)
	virtual void addReachSpecs(AScout* Scout, UBOOL bOnlyChanged);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
};

struct UTProjectile_eventGetHomingTarget_Parms
{
    class AUTProjectile* Seeker;
    class AController* InstigatedBy;
    class AActor* ReturnValue;
    UTProjectile_eventGetHomingTarget_Parms(EEventParm)
    {
    }
};
struct UTProjectile_eventCreateProjectileLight_Parms
{
    UTProjectile_eventCreateProjectileLight_Parms(EEventParm)
    {
    }
};
class AUTProjectile : public AProjectile
{
public:
    //## BEGIN PROPS UTProjectile
    BITFIELD bSuppressSounds:1;
    BITFIELD bImportantAmbientSound:1;
    BITFIELD bAdvanceExplosionEffect:1;
    BITFIELD bSuppressExplosionFX:1;
    BITFIELD bWaitForEffects:1;
    BITFIELD bShuttingDown:1;
    BITFIELD bWideCheck:1;
    BITFIELD bAttachExplosionToVehicles:1;
    BITFIELD bCheckProjectileLight:1;
    class USoundCue* AmbientSound;
    class USoundCue* ExplosionSound;
    class UParticleSystemComponent* ProjEffects;
    class UParticleSystem* ProjFlightTemplate;
    class UParticleSystem* ProjExplosionTemplate;
    class UMaterialInterface* ExplosionDecal;
    FLOAT DecalWidth;
    FLOAT DecalHeight;
    FLOAT DurationOfDecal;
    FName DecalDissolveParamName;
    FLOAT MaxEffectDistance;
    FLOAT AccelRate;
    FLOAT TossZ;
    FLOAT CheckRadius;
    FLOAT GlobalCheckRadiusTweak;
    class UClass* ProjectileLightClass;
    class UPointLightComponent* ProjectileLight;
    class UClass* ExplosionLightClass;
    FLOAT MaxExplosionLightDistance;
    FLOAT TerminalVelocity;
    FLOAT Buoyancy;
    FLOAT CustomGravityScaling;
    class AVehicle* InstigatorBaseVehicle;
    //## END PROPS UTProjectile

    virtual FLOAT GetTerminalVelocity();
    class AActor* eventGetHomingTarget(class AUTProjectile* Seeker,class AController* InstigatedBy)
    {
        UTProjectile_eventGetHomingTarget_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.Seeker=Seeker;
        Parms.InstigatedBy=InstigatedBy;
        ProcessEvent(FindFunctionChecked(UTGAME_GetHomingTarget),&Parms);
        return Parms.ReturnValue;
    }
    void eventCreateProjectileLight()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CreateProjectileLight),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTProjectile,AProjectile,0|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void GetNetBuoyancy(FLOAT &NetBuoyancy, FLOAT &NetFluidFriction);
	virtual FLOAT GetGravityZ();
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
	virtual INT* GetOptimizedRepList(BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

class AUTProj_FlakShard : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_FlakShard
    INT Bounces;
    FLOAT DamageAttenuation;
    FLOAT ShrinkTimer;
    class UParticleSystem* BounceTemplate;
    class UParticleSystem* RockSmokeTemplate;
    class UParticleSystemComponent* LastImpactEffect;
    struct FMaterialSoundEffect DefaultHitSound;
    class USoundCue* HitPawnSound;
    BITFIELD bCheckShortRangeKill:1;
    BITFIELD bShrinking:1;
    class UCameraAnim* ShortRangeKillAnim;
    //## END PROPS UTProj_FlakShard

    DECLARE_CLASS(AUTProj_FlakShard,AUTProjectile,0,UTGame)
	virtual void TickSpecial(float DeltaTime);
};

class AUTProj_Grenade : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_Grenade
    //## END PROPS UTProj_Grenade

    DECLARE_CLASS(AUTProj_Grenade,AUTProjectile,0,UTGame)
	virtual void physicsRotation(FLOAT deltaTime);
};

class AUTProj_Rocket : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_Rocket
    //## END PROPS UTProj_Rocket

    DECLARE_CLASS(AUTProj_Rocket,AUTProjectile,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTProj_Rocket)
};

class AUTProj_SeekingRocket : public AUTProj_Rocket
{
public:
    //## BEGIN PROPS UTProj_SeekingRocket
    class AActor* Seeking;
    FVector InitialDir;
    BITFIELD bSuperSeekAirTargets:1;
    FLOAT LastLockWarningTime;
    FLOAT LockWarningInterval;
    FLOAT BaseTrackingStrength;
    //## END PROPS UTProj_SeekingRocket

    DECLARE_CLASS(AUTProj_SeekingRocket,AUTProj_Rocket,0,UTGame)
	virtual void TickSpecial(float DeltaTime);
};

class AUTProj_ScorpionGlob_Base : public AUTProjectile
{
public:
    //## BEGIN PROPS UTProj_ScorpionGlob_Base
    FLOAT LastTraceTime;
    class APawn* SeekTarget;
    FLOAT SeekRangeSq;
    FLOAT SeekAccel;
    class AUTAvoidMarker* FearSpot;
    //## END PROPS UTProj_ScorpionGlob_Base

    DECLARE_ABSTRACT_CLASS(AUTProj_ScorpionGlob_Base,AUTProjectile,0,UTGame)
	virtual void TickSpecial(float DeltaTime);
};

class AUTAvoidMarker : public AActor
{
public:
    //## BEGIN PROPS UTAvoidMarker
    BYTE TeamNum;
    class UCylinderComponent* CollisionCylinder;
    //## END PROPS UTAvoidMarker

    virtual BYTE GetTeamNum();
    DECLARE_CLASS(AUTAvoidMarker,AActor,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(AUTAvoidMarker)
};

struct UTCarriedObject_eventOnBaseChainChanged_Parms
{
    UTCarriedObject_eventOnBaseChainChanged_Parms(EEventParm)
    {
    }
};
struct UTCarriedObject_eventNotReachableBy_Parms
{
    class APawn* P;
    UTCarriedObject_eventNotReachableBy_Parms(EEventParm)
    {
    }
};
class AUTCarriedObject : public AActor
{
public:
    //## BEGIN PROPS UTCarriedObject
    class ANavigationPoint* LastAnchor;
    FLOAT LastValidAnchorTime;
    BITFIELD bHome:1;
    BITFIELD bLastSecondSave:1;
    BITFIELD bLeavingDroppedState:1;
    BITFIELD bUseTeamColorForIcon:1;
    FLOAT TossDistance;
    class AUTPlayerReplicationInfo* HolderPRI;
    class APawn* Holder;
    class AUTGameObjective* HomeBase;
    FVector HomeBaseOffset;
    FLOAT TakenTime;
    FLOAT MaxDropTime;
    class AController* FirstTouch;
    TArrayNoInit<class AController*> Assists;
    FVector HUDLocation;
    FLOAT MapSize;
    struct FTextureCoordinates IconCoords;
    class UTexture2D* IconTexture;
    FName GameObjBone3P;
    FVector GameObjOffset3P;
    FRotator GameObjRot3P;
    FVector GameObjOffset1P;
    FRotator GameObjRot1P;
    class USoundCue* PickupSound;
    class USoundCue* DroppedSound;
    class USoundCue* ReturnedSound;
    class APawn* OldHolder;
    class UPointLightComponent* FlagLight;
    FLOAT DefaultRadius;
    FLOAT DefaultHeight;
    class AUTTeamInfo* Team;
    TArrayNoInit<struct FObjectiveAnnouncementInfo> NeedToPickUpAnnouncements;
    class AActor* OldBase;
    class AActor* OldBaseBase;
    FLOAT HighlightScale;
    FLOAT MaxHighlightScale;
    FLOAT HighlightSpeed;
    FLOAT LastHighlightUpdate;
    FLOAT LastFlagSeeTime;
    INT LastSeeMessageIndex;
    FLinearColor RedColor;
    FLinearColor BlueColor;
    FLinearColor GoldColor;
    class UForceFeedbackWaveform* PickUpWaveForm;
    //## END PROPS UTCarriedObject

    virtual void SetHUDLocation(FVector NewHUDLocation);
    virtual BYTE GetTeamNum();
    void eventOnBaseChainChanged()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_OnBaseChainChanged),NULL);
    }
    void eventNotReachableBy(class APawn* P)
    {
        UTCarriedObject_eventNotReachableBy_Parms Parms(EC_EventParm);
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(UTGAME_NotReachableBy),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTCarriedObject,AActor,0,UTGame)
	virtual void PostNetReceiveBase(AActor* NewBase);

	/*
	 * Route finding notifications (sent to target)
	 */
	virtual ANavigationPoint* SpecifyEndAnchor(APawn* RouteFinder);
	virtual void NotifyAnchorFindingResult(ANavigationPoint* EndAnchor, APawn* RouteFinder);
	virtual void TickSpecial(FLOAT DeltaSeconds);

	virtual void ForceUpdateComponents(UBOOL bCollisionUpdate = FALSE,UBOOL bTransformOnly = TRUE);
};

class AUTCTFFlag : public AUTCarriedObject
{
public:
    //## BEGIN PROPS UTCTFFlag
    class UParticleSystem* RespawnEffect;
    BITFIELD bBringUpBright:1;
    BITFIELD bBringDownFromBright:1;
    BITFIELD bFadingOut:1;
    BITFIELD bRespawning:1;
    BITFIELD bWasClothEnabled:1;
    class USkeletalMeshComponent* SkelMesh;
    TArrayNoInit<class UMaterialInstanceConstant*> MICArray;
    FVector RunningClothVelClamp;
    FVector HoverboardingClothVelClamp;
    class UParticleSystemComponent* SuccessfulCaptureSystem;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    FLOAT LastLocationPingTime;
    //## END PROPS UTCTFFlag

    DECLARE_ABSTRACT_CLASS(AUTCTFFlag,AUTCarriedObject,0,UTGame)
	virtual void PostNetReceiveLocation();
};

class AUTWeaponShield : public AActor
{
public:
    //## BEGIN PROPS UTWeaponShield
    BITFIELD bIgnoreFlaggedProjectiles:1;
    //## END PROPS UTWeaponShield

    DECLARE_ABSTRACT_CLASS(AUTWeaponShield,AActor,0,UTGame)
	virtual UBOOL IgnoreBlockingBy(const AActor* Other) const;
	virtual UBOOL ShouldTrace(UPrimitiveComponent* Primitive, AActor* SourceActor, DWORD TraceFlags);
};

class UUTActorFactoryAI : public UActorFactoryAI
{
public:
    //## BEGIN PROPS UTActorFactoryAI
    BITFIELD bForceDeathmatchAI:1;
    BITFIELD bUseCompartment:1;
    //## END PROPS UTActorFactoryAI

    DECLARE_CLASS(UUTActorFactoryAI,UActorFactoryAI,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTActorFactoryMover : public UActorFactoryDynamicSM
{
public:
    //## BEGIN PROPS UTActorFactoryMover
    BITFIELD bCreateKismetEvent:1 GCC_BITFIELD_MAGIC;
    class UClass* EventClass;
    //## END PROPS UTActorFactoryMover

    DECLARE_CLASS(UUTActorFactoryMover,UActorFactoryDynamicSM,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTActorFactoryVehicle : public UActorFactoryVehicle
{
public:
    //## BEGIN PROPS UTActorFactoryVehicle
    BITFIELD bTeamLocked:1;
    BITFIELD bKeyVehicle:1;
    BYTE TeamNum GCC_BITFIELD_MAGIC;
    //## END PROPS UTActorFactoryVehicle

    DECLARE_CLASS(UUTActorFactoryVehicle,UActorFactoryVehicle,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor( const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData );
};

class UUTActorFactoryPickup : public UActorFactory
{
public:
    //## BEGIN PROPS UTActorFactoryPickup
    class UClass* InventoryClass;
    //## END PROPS UTActorFactoryPickup

    DECLARE_CLASS(UUTActorFactoryPickup,UActorFactory,0|CLASS_Config,UTGame)
	virtual AActor* CreateActor(const FVector* const Location, const FRotator* const Rotation, const class USeqAct_ActorFactory* const ActorFactoryData);
};

class UUTCheatManager : public UCheatManager
{
public:
    //## BEGIN PROPS UTCheatManager
    class UClass* LMC;
    class USpeechRecognition* RecogObject;
    //## END PROPS UTCheatManager

    virtual void UnlockAllChars();
    DECLARE_FUNCTION(execUnlockAllChars)
    {
        P_FINISH;
        UnlockAllChars();
    }
    DECLARE_CLASS(UUTCheatManager,UCheatManager,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTCheatManager)
};

struct FLightValues
{
    FLOAT StartTime;
    FLOAT Radius;
    FLOAT Brightness;
    FColor LightColor;

    /** Constructors */
    FLightValues() {}
    FLightValues(EEventParm)
    {
        appMemzero(this, sizeof(FLightValues));
    }
};

struct UTExplosionLight_eventOnLightFinished_Parms
{
    class UUTExplosionLight* Light;
    UTExplosionLight_eventOnLightFinished_Parms(EEventParm)
    {
    }
};
class UUTExplosionLight : public UPointLightComponent
{
public:
    //## BEGIN PROPS UTExplosionLight
    BITFIELD bCheckFrameRate:1;
    BITFIELD bInitialized:1;
    FLOAT HighDetailFrameTime;
    FLOAT Lifetime;
    INT TimeShiftIndex;
    TArrayNoInit<struct FLightValues> TimeShift;
    FScriptDelegate __OnLightFinished__Delegate;
    //## END PROPS UTExplosionLight

    void ResetLight();
    DECLARE_FUNCTION(execResetLight)
    {
        P_FINISH;
        ResetLight();
    }
    void delegateOnLightFinished(class UUTExplosionLight* Light)
    {
        UTExplosionLight_eventOnLightFinished_Parms Parms(EC_EventParm);
        Parms.Light=Light;
        ProcessDelegate(UTGAME_OnLightFinished,&__OnLightFinished__Delegate,&Parms);
    }
    DECLARE_CLASS(UUTExplosionLight,UPointLightComponent,0,UTGame)
	virtual void Attach();
	virtual void Tick(FLOAT DeltaTime);
};

struct UTSkeletalMeshComponent_eventPreloadTextures_Parms
{
    UBOOL bForcePreload;
    FLOAT ClearTime;
    UTSkeletalMeshComponent_eventPreloadTextures_Parms(EEventParm)
    {
    }
};
class UUTSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
    //## BEGIN PROPS UTSkeletalMeshComponent
    FLOAT FOV;
    BITFIELD bForceLoadTextures:1;
    FLOAT ClearStreamingTime;
    //## END PROPS UTSkeletalMeshComponent

    void SetFOV(FLOAT NewFOV);
    DECLARE_FUNCTION(execSetFOV)
    {
        P_GET_FLOAT(NewFOV);
        P_FINISH;
        SetFOV(NewFOV);
    }
    void eventPreloadTextures(UBOOL bForcePreload,FLOAT ClearTime)
    {
        UTSkeletalMeshComponent_eventPreloadTextures_Parms Parms(EC_EventParm);
        Parms.bForcePreload=bForcePreload ? FIRST_BITFIELD : FALSE;
        Parms.ClearTime=ClearTime;
        ProcessEvent(FindFunctionChecked(UTGAME_PreloadTextures),&Parms);
    }
    DECLARE_CLASS(UUTSkeletalMeshComponent,USkeletalMeshComponent,0,UTGame)
	/** Creates a FUTSkeletalMeshSceneProxy (defined in UTWeapon.cpp) */
	virtual FPrimitiveSceneProxy* CreateSceneProxy();
	virtual void Tick(FLOAT DeltaTime);
};

class UUTParticleSystemComponent : public UParticleSystemComponent
{
public:
    //## BEGIN PROPS UTParticleSystemComponent
private:
    FLOAT FOV;
    BITFIELD bHasSavedScale3D:1;
    FVector SavedScale3D;
public:
    //## END PROPS UTParticleSystemComponent

    void SetFOV(FLOAT NewFOV);
    DECLARE_FUNCTION(execSetFOV)
    {
        P_GET_FLOAT(NewFOV);
        P_FINISH;
        SetFOV(NewFOV);
    }
    DECLARE_CLASS(UUTParticleSystemComponent,UParticleSystemComponent,0,UTGame)
private:
	/** Override LocalToWorld with custom FOV changes */
	virtual void SetTransformedToWorld();
	virtual void InitParticles();
};

class UUTGameViewportClient : public UGameViewportClient
{
public:
    //## BEGIN PROPS UTGameViewportClient
    FStringNoInit LevelActionMessages[6];
    FStringNoInit UTFrontEndString;
    FStringNoInit UTMMissionSelectionString;
    class UFont* LoadingScreenMapNameFont;
    class UFont* LoadingScreenGameTypeNameFont;
    class UFont* LoadingScreenHintMessageFont;
    //## END PROPS UTGameViewportClient

    FString LoadRandomLocalizedHintMessage(const FString& GameType1Name,const FString& GameType2Name);
    DECLARE_FUNCTION(execLoadRandomLocalizedHintMessage)
    {
        P_GET_STR(GameType1Name);
        P_GET_STR(GameType2Name);
        P_FINISH;
        *(FString*)Result=LoadRandomLocalizedHintMessage(GameType1Name,GameType2Name);
    }
    DECLARE_CLASS(UUTGameViewportClient,UGameViewportClient,0|CLASS_Transient,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	virtual void SetDropDetail(FLOAT DeltaSeconds);
};

class UUTMapMusicInfo : public UObject
{
public:
    //## BEGIN PROPS UTMapMusicInfo
    struct FMusicForAMap MapMusic;
    struct FStingersForAMap MapStingers;
    //## END PROPS UTMapMusicInfo

    DECLARE_CLASS(UUTMapMusicInfo,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTMapMusicInfo)
};

class UUTMapInfo : public UMapInfo
{
public:
    //## BEGIN PROPS UTMapInfo
    INT RecommendedPlayersMin;
    INT RecommendedPlayersMax;
    class UUTMapMusicInfo* MapMusicInfo;
    BITFIELD bBuildTranslocatorPaths:1;
    BITFIELD bMapUpToDate:1;
    FLOAT VisibilityModifier;
    class UTexture* MapTexture;
    FLOAT MapTextureYaw;
    FVector MapCenter;
    FLOAT MapExtent;
    INT MapYaw;
    FLOAT RotatingMiniMapRange;
    FLOAT DefaultMapSize;
    TArrayNoInit<class AUTGameObjective*> Objectives;
    class AActor* CurrentActor;
    class AActor* WatchedActor;
    class UMaterial* HUDIcons;
    class UTexture2D* HUDIconsT;
    FVector MapRotX;
    FVector MapRotY;
    INT CurrentMapRotYaw;
    class UMaterialInstanceConstant* MapMaterialInstance;
    class UMaterial* MapMaterialReference;
    FLOAT UseableRadius;
    FVector ActualMapCenter;
    FLOAT RadarWidth;
    FLOAT RadarRange;
    FVector CenterPos;
    FLOAT MapScale;
    FLOAT ColorPercent;
    class UMaterialInstanceConstant* GreenIconMaterialInstance;
    struct FTextureCoordinates PlayerIconCoords;
    class AUTVehicle* KeyVehicles[2];
    TArrayNoInit<class AUTGameObjective*> Sensors;
    //## END PROPS UTMapInfo

    virtual void RenderLinks(class UCanvas* Canvas,class AUTPlayerController* PlayerOwner);
    virtual void RenderAdditionalInformation(class UCanvas* Canvas,class AUTPlayerController* PlayerOwner);
    virtual void UpdateNodes(class AUTPlayerController* PlayerOwner);
    virtual FVector UpdateHUDLocation(FVector InLocation);
    DECLARE_FUNCTION(execRenderLinks)
    {
        P_GET_OBJECT(UCanvas,Canvas);
        P_GET_OBJECT(AUTPlayerController,PlayerOwner);
        P_FINISH;
        RenderLinks(Canvas,PlayerOwner);
    }
    DECLARE_FUNCTION(execRenderAdditionalInformation)
    {
        P_GET_OBJECT(UCanvas,Canvas);
        P_GET_OBJECT(AUTPlayerController,PlayerOwner);
        P_FINISH;
        RenderAdditionalInformation(Canvas,PlayerOwner);
    }
    DECLARE_FUNCTION(execUpdateNodes)
    {
        P_GET_OBJECT(AUTPlayerController,PlayerOwner);
        P_FINISH;
        UpdateNodes(PlayerOwner);
    }
    DECLARE_FUNCTION(execUpdateHUDLocation)
    {
        P_GET_STRUCT(FVector,InLocation);
        P_FINISH;
        *(FVector*)Result=UpdateHUDLocation(InLocation);
    }
    DECLARE_CLASS(UUTMapInfo,UMapInfo,0,UTGame)
	virtual void CheckForErrors();
};

struct FStatMappingEntry
{
    FName StatName;
    INT Id;

    /** Constructors */
    FStatMappingEntry() {}
    FStatMappingEntry(EEventParm)
    {
        appMemzero(this, sizeof(FStatMappingEntry));
    }
};

#define UCONST_STATS_VIEW_DM_WEAPONS_RANKED_ALLTIME 8
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_RANKED_ALLTIME 7
#define UCONST_STATS_VIEW_DM_VEHICLES_RANKED_ALLTIME 6
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_ALLTIME 5
#define UCONST_STATS_VIEW_DM_VEHICLES_ALLTIME 4
#define UCONST_STATS_VIEW_DM_WEAPONS_ALLTIME 3
#define UCONST_STATS_VIEW_DM_RANKED_ALLTIME 2
#define UCONST_STATS_VIEW_DM_PLAYER_ALLTIME 1
#define UCONST_QUERY_CAMPAIGN 6
#define UCONST_QUERY_DUEL 5
#define UCONST_QUERY_WAR 4
#define UCONST_QUERY_VCTF 3
#define UCONST_QUERY_CTF 2
#define UCONST_QUERY_TDM 1
#define UCONST_QUERY_DM 0
#define UCONST_PROPERTY_CUSTOMMUTATORS 0x40000004
#define UCONST_PROPERTY_SERVERDESCRIPTION 0x40000003
#define UCONST_PROPERTY_CUSTOMGAMEMODE 0x40000002
#define UCONST_PROPERTY_CUSTOMMAPNAME 0x40000001
#define UCONST_PROPERTY_EPICMUTATORS 0x10000105
#define UCONST_PROPERTY_LEADERBOARDRATING 0x20000004
#define UCONST_PROPERTY_TIMELIMIT 0x100000F9
#define UCONST_PROPERTY_GOALSCORE 0x100000F8
#define UCONST_PROPERTY_NUMBOTS 0x100000F7
#define UCONST_CONTEXT_VSBOTS_4_TO_1 6
#define UCONST_CONTEXT_VSBOTS_3_TO_1 5
#define UCONST_CONTEXT_VSBOTS_2_TO_1 4
#define UCONST_CONTEXT_VSBOTS_3_TO_2 3
#define UCONST_CONTEXT_VSBOTS_1_TO_1 2
#define UCONST_CONTEXT_VSBOTS_1_TO_2 1
#define UCONST_CONTEXT_VSBOTS_NONE 0
#define UCONST_CONTEXT_DEDICATEDSERVER_YES 1
#define UCONST_CONTEXT_DEDICATEDSERVER_NO 0
#define UCONST_CONTEXT_EMPTYSERVER_YES 1
#define UCONST_CONTEXT_EMPTYSERVER_NO 0
#define UCONST_CONTEXT_FULLSERVER_YES 1
#define UCONST_CONTEXT_FULLSERVER_NO 0
#define UCONST_CONTEXT_ALLOWKEYBOARD_ANY 2
#define UCONST_CONTEXT_ALLOWKEYBOARD_YES 1
#define UCONST_CONTEXT_ALLOWKEYBOARD_NO 0
#define UCONST_CONTEXT_FORCERESPAWN_YES 1
#define UCONST_CONTEXT_FORCERESPAWN_NO 0
#define UCONST_CONTEXT_CAMPAIGN_YES 1
#define UCONST_CONTEXT_CAMPAIGN_NO 0
#define UCONST_CONTEXT_LOCKEDSERVER_YES 1
#define UCONST_CONTEXT_LOCKEDSERVER_NO 0
#define UCONST_CONTEXT_PURESERVER_ANY 2
#define UCONST_CONTEXT_PURESERVER_YES 1
#define UCONST_CONTEXT_PURESERVER_NO 0
#define UCONST_CONTEXT_TIMELIMIT_30 4
#define UCONST_CONTEXT_TIMELIMIT_20 3
#define UCONST_CONTEXT_TIMELIMIT_15 2
#define UCONST_CONTEXT_TIMELIMIT_10 1
#define UCONST_CONTEXT_TIMELIMIT_5 0
#define UCONST_CONTEXT_NUMBOTS_8 8
#define UCONST_CONTEXT_NUMBOTS_7 7
#define UCONST_CONTEXT_NUMBOTS_6 6
#define UCONST_CONTEXT_NUMBOTS_5 5
#define UCONST_CONTEXT_NUMBOTS_4 4
#define UCONST_CONTEXT_NUMBOTS_3 3
#define UCONST_CONTEXT_NUMBOTS_2 2
#define UCONST_CONTEXT_NUMBOTS_1 1
#define UCONST_CONTEXT_NUMBOTS_0 0
#define UCONST_CONTEXT_GOALSCORE_30 4
#define UCONST_CONTEXT_GOALSCORE_20 3
#define UCONST_CONTEXT_GOALSCORE_15 2
#define UCONST_CONTEXT_GOALSCORE_10 1
#define UCONST_CONTEXT_GOALSCORE_5 0
#define UCONST_CONTEXT_BOTSKILL_GODLIKE 8
#define UCONST_CONTEXT_BOTSKILL_INHUMAN 7
#define UCONST_CONTEXT_BOTSKILL_MASTERFUL 6
#define UCONST_CONTEXT_BOTSKILL_ADEPT 5
#define UCONST_CONTEXT_BOTSKILL_SKILLED 4
#define UCONST_CONTEXT_BOTSKILL_EXPERIENCED 3
#define UCONST_CONTEXT_BOTSKILL_AVERAGE 2
#define UCONST_CONTEXT_BOTSKILL_NOVICE 1
#define UCONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL 0
#define UCONST_CONTEXT_MAPNAME_CUSTOM 0
#define UCONST_CONTEXT_DEDICATEDSERVER 14
#define UCONST_CONTEXT_EMPTYSERVER 13
#define UCONST_CONTEXT_FULLSERVER 12
#define UCONST_CONTEXT_ALLOWKEYBOARD 11
#define UCONST_CONTEXT_FORCERESPAWN 10
#define UCONST_CONTEXT_CAMPAIGN 9
#define UCONST_CONTEXT_VSBOTS 8
#define UCONST_CONTEXT_LOCKEDSERVER 7
#define UCONST_CONTEXT_PURESERVER 6
#define UCONST_CONTEXT_MAPNAME 1
#define UCONST_CONTEXT_BOTSKILL 0
#define UCONST_CONTEXT_GAME_MODE_CAMPAIGN 7
#define UCONST_CONTEXT_GAME_MODE_CUSTOM 6
#define UCONST_CONTEXT_GAME_MODE_DUEL 5
#define UCONST_CONTEXT_GAME_MODE_TDM 4
#define UCONST_CONTEXT_GAME_MODE_VCTF 3
#define UCONST_CONTEXT_GAME_MODE_WAR 2
#define UCONST_CONTEXT_GAME_MODE_CTF 1
#define UCONST_CONTEXT_GAME_MODE_DM 0
#define UCONST_CONTEXT_GAME_MODE 0x0000800B
#define UCONST_CONTEXT_PRESENCE_MENUPRESENCE 0
#define UCONST_GS_CDKEY_PART_MAXLENGTH 4
#define UCONST_GS_EMAIL_MAXLENGTH 50
#define UCONST_GS_MESSAGE_MAXLENGTH 255
#define UCONST_GS_PASSWORD_MAXLENGTH 30
#define UCONST_GS_USERNAME_MAXLENGTH 15

class UUTLeaderboardWriteBase : public UOnlineStatsWrite
{
public:
    //## BEGIN PROPS UTLeaderboardWriteBase
    TArrayNoInit<INT> PureViewIds;
    TArrayNoInit<struct FStatMappingEntry> StatNameToStatIdMapping;
    //## END PROPS UTLeaderboardWriteBase

    virtual void PrintDebugInformation(class UOnlineSubsystem* OnlineSubsystem);
    virtual UBOOL GetPropertyIdFromStatType(FName StatName,INT& StatId,BYTE& StatType);
    virtual UBOOL SetIntStatFromMapping(FName StatName,INT StatValue);
    virtual UBOOL SetFloatStatFromMapping(FName StatName,FLOAT StatValue);
    virtual void SetPureServerMode(const UBOOL bIsPureServer);
    DECLARE_FUNCTION(execPrintDebugInformation)
    {
        P_GET_OBJECT(UOnlineSubsystem,OnlineSubsystem);
        P_FINISH;
        PrintDebugInformation(OnlineSubsystem);
    }
    DECLARE_FUNCTION(execGetPropertyIdFromStatType)
    {
        P_GET_NAME(StatName);
        P_GET_INT_REF(StatId);
        P_GET_BYTE_REF(StatType);
        P_FINISH;
        *(UBOOL*)Result=GetPropertyIdFromStatType(StatName,StatId,StatType);
    }
    DECLARE_FUNCTION(execSetIntStatFromMapping)
    {
        P_GET_NAME(StatName);
        P_GET_INT(StatValue);
        P_FINISH;
        *(UBOOL*)Result=SetIntStatFromMapping(StatName,StatValue);
    }
    DECLARE_FUNCTION(execSetFloatStatFromMapping)
    {
        P_GET_NAME(StatName);
        P_GET_FLOAT(StatValue);
        P_FINISH;
        *(UBOOL*)Result=SetFloatStatFromMapping(StatName,StatValue);
    }
    DECLARE_FUNCTION(execSetPureServerMode)
    {
        P_GET_UBOOL(bIsPureServer);
        P_FINISH;
        SetPureServerMode(bIsPureServer);
    }
    DECLARE_CLASS(UUTLeaderboardWriteBase,UOnlineStatsWrite,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTLeaderboardWriteBase)
};

class UUTTrajectoryReachSpec : public UAdvancedReachSpec
{
public:
    //## BEGIN PROPS UTTrajectoryReachSpec
    //## END PROPS UTTrajectoryReachSpec

    DECLARE_ABSTRACT_CLASS(UUTTrajectoryReachSpec,UAdvancedReachSpec,0,UTGame)
	virtual void AddToDebugRenderProxy(class FDebugRenderSceneProxy* DRSP);
	virtual FVector GetInitialVelocity() { return FVector(0.f,0.f,0.f); };
};

class UUTJumpPadReachSpec : public UUTTrajectoryReachSpec
{
public:
    //## BEGIN PROPS UTJumpPadReachSpec
    //## END PROPS UTJumpPadReachSpec

    DECLARE_CLASS(UUTJumpPadReachSpec,UUTTrajectoryReachSpec,0,UTGame)
	virtual FVector GetInitialVelocity();
	virtual INT CostFor(APawn* P);
};

class UUTTranslocatorReachSpec : public UUTTrajectoryReachSpec
{
public:
    //## BEGIN PROPS UTTranslocatorReachSpec
    FVector CachedVelocity;
    FLOAT RequiredJumpZ;
    FLOAT OriginalGravityZ;
    //## END PROPS UTTranslocatorReachSpec

    DECLARE_CLASS(UUTTranslocatorReachSpec,UUTTrajectoryReachSpec,0,UTGame)
	virtual FPlane PathColor()
	{
		// light purple path = translocator
		return FPlane(1.f,0.5f,1.f, 0.f);
	}

	UBOOL PrepareForMove(AController *C);
	virtual FVector GetInitialVelocity();
	virtual INT CostFor(APawn* P);
};

#define UCONST_STATS_VIEW_DM_WEAPONS_RANKED_ALLTIME 8
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_RANKED_ALLTIME 7
#define UCONST_STATS_VIEW_DM_VEHICLES_RANKED_ALLTIME 6
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_ALLTIME 5
#define UCONST_STATS_VIEW_DM_VEHICLES_ALLTIME 4
#define UCONST_STATS_VIEW_DM_WEAPONS_ALLTIME 3
#define UCONST_STATS_VIEW_DM_RANKED_ALLTIME 2
#define UCONST_STATS_VIEW_DM_PLAYER_ALLTIME 1
#define UCONST_QUERY_CAMPAIGN 6
#define UCONST_QUERY_DUEL 5
#define UCONST_QUERY_WAR 4
#define UCONST_QUERY_VCTF 3
#define UCONST_QUERY_CTF 2
#define UCONST_QUERY_TDM 1
#define UCONST_QUERY_DM 0
#define UCONST_PROPERTY_CUSTOMMUTATORS 0x40000004
#define UCONST_PROPERTY_SERVERDESCRIPTION 0x40000003
#define UCONST_PROPERTY_CUSTOMGAMEMODE 0x40000002
#define UCONST_PROPERTY_CUSTOMMAPNAME 0x40000001
#define UCONST_PROPERTY_EPICMUTATORS 0x10000105
#define UCONST_PROPERTY_LEADERBOARDRATING 0x20000004
#define UCONST_PROPERTY_TIMELIMIT 0x100000F9
#define UCONST_PROPERTY_GOALSCORE 0x100000F8
#define UCONST_PROPERTY_NUMBOTS 0x100000F7
#define UCONST_CONTEXT_VSBOTS_4_TO_1 6
#define UCONST_CONTEXT_VSBOTS_3_TO_1 5
#define UCONST_CONTEXT_VSBOTS_2_TO_1 4
#define UCONST_CONTEXT_VSBOTS_3_TO_2 3
#define UCONST_CONTEXT_VSBOTS_1_TO_1 2
#define UCONST_CONTEXT_VSBOTS_1_TO_2 1
#define UCONST_CONTEXT_VSBOTS_NONE 0
#define UCONST_CONTEXT_DEDICATEDSERVER_YES 1
#define UCONST_CONTEXT_DEDICATEDSERVER_NO 0
#define UCONST_CONTEXT_EMPTYSERVER_YES 1
#define UCONST_CONTEXT_EMPTYSERVER_NO 0
#define UCONST_CONTEXT_FULLSERVER_YES 1
#define UCONST_CONTEXT_FULLSERVER_NO 0
#define UCONST_CONTEXT_ALLOWKEYBOARD_ANY 2
#define UCONST_CONTEXT_ALLOWKEYBOARD_YES 1
#define UCONST_CONTEXT_ALLOWKEYBOARD_NO 0
#define UCONST_CONTEXT_FORCERESPAWN_YES 1
#define UCONST_CONTEXT_FORCERESPAWN_NO 0
#define UCONST_CONTEXT_CAMPAIGN_YES 1
#define UCONST_CONTEXT_CAMPAIGN_NO 0
#define UCONST_CONTEXT_LOCKEDSERVER_YES 1
#define UCONST_CONTEXT_LOCKEDSERVER_NO 0
#define UCONST_CONTEXT_PURESERVER_ANY 2
#define UCONST_CONTEXT_PURESERVER_YES 1
#define UCONST_CONTEXT_PURESERVER_NO 0
#define UCONST_CONTEXT_TIMELIMIT_30 4
#define UCONST_CONTEXT_TIMELIMIT_20 3
#define UCONST_CONTEXT_TIMELIMIT_15 2
#define UCONST_CONTEXT_TIMELIMIT_10 1
#define UCONST_CONTEXT_TIMELIMIT_5 0
#define UCONST_CONTEXT_NUMBOTS_8 8
#define UCONST_CONTEXT_NUMBOTS_7 7
#define UCONST_CONTEXT_NUMBOTS_6 6
#define UCONST_CONTEXT_NUMBOTS_5 5
#define UCONST_CONTEXT_NUMBOTS_4 4
#define UCONST_CONTEXT_NUMBOTS_3 3
#define UCONST_CONTEXT_NUMBOTS_2 2
#define UCONST_CONTEXT_NUMBOTS_1 1
#define UCONST_CONTEXT_NUMBOTS_0 0
#define UCONST_CONTEXT_GOALSCORE_30 4
#define UCONST_CONTEXT_GOALSCORE_20 3
#define UCONST_CONTEXT_GOALSCORE_15 2
#define UCONST_CONTEXT_GOALSCORE_10 1
#define UCONST_CONTEXT_GOALSCORE_5 0
#define UCONST_CONTEXT_BOTSKILL_GODLIKE 8
#define UCONST_CONTEXT_BOTSKILL_INHUMAN 7
#define UCONST_CONTEXT_BOTSKILL_MASTERFUL 6
#define UCONST_CONTEXT_BOTSKILL_ADEPT 5
#define UCONST_CONTEXT_BOTSKILL_SKILLED 4
#define UCONST_CONTEXT_BOTSKILL_EXPERIENCED 3
#define UCONST_CONTEXT_BOTSKILL_AVERAGE 2
#define UCONST_CONTEXT_BOTSKILL_NOVICE 1
#define UCONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL 0
#define UCONST_CONTEXT_MAPNAME_CUSTOM 0
#define UCONST_CONTEXT_DEDICATEDSERVER 14
#define UCONST_CONTEXT_EMPTYSERVER 13
#define UCONST_CONTEXT_FULLSERVER 12
#define UCONST_CONTEXT_ALLOWKEYBOARD 11
#define UCONST_CONTEXT_FORCERESPAWN 10
#define UCONST_CONTEXT_CAMPAIGN 9
#define UCONST_CONTEXT_VSBOTS 8
#define UCONST_CONTEXT_LOCKEDSERVER 7
#define UCONST_CONTEXT_PURESERVER 6
#define UCONST_CONTEXT_MAPNAME 1
#define UCONST_CONTEXT_BOTSKILL 0
#define UCONST_CONTEXT_GAME_MODE_CAMPAIGN 7
#define UCONST_CONTEXT_GAME_MODE_CUSTOM 6
#define UCONST_CONTEXT_GAME_MODE_DUEL 5
#define UCONST_CONTEXT_GAME_MODE_TDM 4
#define UCONST_CONTEXT_GAME_MODE_VCTF 3
#define UCONST_CONTEXT_GAME_MODE_WAR 2
#define UCONST_CONTEXT_GAME_MODE_CTF 1
#define UCONST_CONTEXT_GAME_MODE_DM 0
#define UCONST_CONTEXT_GAME_MODE 0x0000800B
#define UCONST_CONTEXT_PRESENCE_MENUPRESENCE 0
#define UCONST_GS_CDKEY_PART_MAXLENGTH 4
#define UCONST_GS_EMAIL_MAXLENGTH 50
#define UCONST_GS_MESSAGE_MAXLENGTH 255
#define UCONST_GS_PASSWORD_MAXLENGTH 30
#define UCONST_GS_USERNAME_MAXLENGTH 15

class UUTGameSettingsCommon : public UOnlineGameSettings
{
public:
    //## BEGIN PROPS UTGameSettingsCommon
    INT MaxPlayers;
    INT MinNetPlayers;
    //## END PROPS UTGameSettingsCommon

    UBOOL StringToBlob(const FString& InString,FString& OutBlob);
    FString BlobToString(const FString& InBlob);
    DECLARE_FUNCTION(execStringToBlob)
    {
        P_GET_STR_REF(InString);
        P_GET_STR_REF(OutBlob);
        P_FINISH;
        *(UBOOL*)Result=StringToBlob(InString,OutBlob);
    }
    DECLARE_FUNCTION(execBlobToString)
    {
        P_GET_STR_REF(InBlob);
        P_FINISH;
        *(FString*)Result=BlobToString(InBlob);
    }
    DECLARE_CLASS(UUTGameSettingsCommon,UOnlineGameSettings,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTGameSettingsCommon)
};

class UUTLeaderboardSettings : public USettings
{
public:
    //## BEGIN PROPS UTLeaderboardSettings
    //## END PROPS UTLeaderboardSettings

    DECLARE_CLASS(UUTLeaderboardSettings,USettings,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTLeaderboardSettings)
};

class UUTPlayerInput : public UGamePlayerInput
{
public:
    //## BEGIN PROPS UTPlayerInput
    FLOAT LastDuckTime;
    BITFIELD bHoldDuck:1;
    BYTE ForcedDoubleClick GCC_BITFIELD_MAGIC;
    //## END PROPS UTPlayerInput

    virtual void ForceFlushOfInput();
    virtual FString GetUTBindNameFromCommand(const FString& BindCommand);
    DECLARE_FUNCTION(execForceFlushOfInput)
    {
        P_FINISH;
        ForceFlushOfInput();
    }
    DECLARE_FUNCTION(execGetUTBindNameFromCommand)
    {
        P_GET_STR(BindCommand);
        P_FINISH;
        *(FString*)Result=GetUTBindNameFromCommand(BindCommand);
    }
    DECLARE_CLASS(UUTPlayerInput,UGamePlayerInput,0|CLASS_Transient|CLASS_Config,UTGame)
    DECLARE_WITHIN(AUTPlayerController)
	virtual UBOOL InputKey(INT ControllerId, FName Key, enum EInputEvent Event, FLOAT AmountDepressed = 1.f, UBOOL bGamepad = FALSE);
};

struct UTConsolePlayerInput_eventPostBeginPlay_Parms
{
    UTConsolePlayerInput_eventPostBeginPlay_Parms(EEventParm)
    {
    }
};
class UUTConsolePlayerInput : public UUTPlayerInput
{
public:
    //## BEGIN PROPS UTConsolePlayerInput
    FLOAT SensitivityMultiplier;
    FLOAT TurningAccelerationMultiplier;
    BITFIELD bAutoCenterPitch:1;
    BITFIELD bAutoCenterVehiclePitch:1;
    BITFIELD bViewAccelerationEnabled:1;
    BITFIELD bDebugViewAcceleration:1;
    BITFIELD bTargetFrictionEnabled:1;
    BITFIELD bDebugTargetFriction:1;
    BITFIELD bAppliedTargetFriction:1;
    BITFIELD bIsLookingUp:1;
    BITFIELD bIsLookingDown:1;
    FLOAT LastTurnTime;
    FLOAT AutoCenterDelay;
    FLOAT AutoVehicleCenterSpeed;
    FLOAT SlowTurnScaling;
    FLOAT ViewAccel_YawThreshold;
    FLOAT ViewAccel_DiagonalThreshold;
    FLOAT ViewAccel_BaseMultiplier;
    FLOAT ViewAccel_CurrMutliplier;
    FLOAT ViewAccel_TimeToHoldBeforeFastAcceleration;
    FLOAT ViewAccel_TimeHeld;
    FLOAT ViewAccel_Twitchy;
    FLOAT Dodge_Threshold;
    class APawn* LastFrictionTarget;
    FLOAT LastFrictionTargetTime;
    FLOAT LastDistToTarget;
    FLOAT LastDistMultiplier;
    FLOAT LastDistFromAimZ;
    FLOAT LastDistFromAimY;
    FLOAT LastFrictionMultiplier;
    FLOAT LastAdhesionAmtY;
    FLOAT LastAdhesionAmtZ;
    FLOAT LastTargetRadius;
    FLOAT LastTargetHeight;
    FLOAT LastDistFromAimYa;
    FLOAT LastDistFromAimZa;
    FLOAT LastAdjustY;
    FLOAT LastAdjustZ;
    FVector LastCamLoc;
    FRotator LastDeltaRot;
    FLOAT LeftThumbStickDeadZoneThreshold;
    FLOAT RightThumbStickDeadZoneThreshold;
    FLOAT MagicScaleForSensitivityMiddle;
    FLOAT MagicScaleForSensitivityEdge;
    FLOAT ViewAccel_RampSpeed;
    FLOAT ViewAccel_MaxTurnSpeed;
    FLOAT ViewAccel_PitchThreshold;
    FLOAT ViewAccel_LookingUpOrDownBoundary;
    FLOAT ViewAccel_BackToCenterBoundary;
    FLOAT ViewAccel_BackToCenterSpeed;
    FLOAT AutoPitchCenterSpeed;
    FLOAT AutoPitchStopAdjustingValue;
    FLOAT HoverBoardPitchMultiplier;
    //## END PROPS UTConsolePlayerInput

    void eventPostBeginPlay()
    {
        if(IsProbing(NAME_PostBeginPlay)) {
        ProcessEvent(FindFunctionChecked(UTGAME_PostBeginPlay),NULL);
        }
    }
    DECLARE_CLASS(UUTConsolePlayerInput,UUTPlayerInput,0|CLASS_Transient|CLASS_Config,UTGame)
    DECLARE_WITHIN(AUTConsolePlayerController)
    NO_DEFAULT_CONSTRUCTOR(UUTConsolePlayerInput)
};

#define UCONST_STATS_VIEW_DM_WEAPONS_RANKED_ALLTIME 8
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_RANKED_ALLTIME 7
#define UCONST_STATS_VIEW_DM_VEHICLES_RANKED_ALLTIME 6
#define UCONST_STATS_VIEW_DM_VEHICLEWEAPONS_ALLTIME 5
#define UCONST_STATS_VIEW_DM_VEHICLES_ALLTIME 4
#define UCONST_STATS_VIEW_DM_WEAPONS_ALLTIME 3
#define UCONST_STATS_VIEW_DM_RANKED_ALLTIME 2
#define UCONST_STATS_VIEW_DM_PLAYER_ALLTIME 1
#define UCONST_QUERY_CAMPAIGN 6
#define UCONST_QUERY_DUEL 5
#define UCONST_QUERY_WAR 4
#define UCONST_QUERY_VCTF 3
#define UCONST_QUERY_CTF 2
#define UCONST_QUERY_TDM 1
#define UCONST_QUERY_DM 0
#define UCONST_PROPERTY_CUSTOMMUTATORS 0x40000004
#define UCONST_PROPERTY_SERVERDESCRIPTION 0x40000003
#define UCONST_PROPERTY_CUSTOMGAMEMODE 0x40000002
#define UCONST_PROPERTY_CUSTOMMAPNAME 0x40000001
#define UCONST_PROPERTY_EPICMUTATORS 0x10000105
#define UCONST_PROPERTY_LEADERBOARDRATING 0x20000004
#define UCONST_PROPERTY_TIMELIMIT 0x100000F9
#define UCONST_PROPERTY_GOALSCORE 0x100000F8
#define UCONST_PROPERTY_NUMBOTS 0x100000F7
#define UCONST_CONTEXT_VSBOTS_4_TO_1 6
#define UCONST_CONTEXT_VSBOTS_3_TO_1 5
#define UCONST_CONTEXT_VSBOTS_2_TO_1 4
#define UCONST_CONTEXT_VSBOTS_3_TO_2 3
#define UCONST_CONTEXT_VSBOTS_1_TO_1 2
#define UCONST_CONTEXT_VSBOTS_1_TO_2 1
#define UCONST_CONTEXT_VSBOTS_NONE 0
#define UCONST_CONTEXT_DEDICATEDSERVER_YES 1
#define UCONST_CONTEXT_DEDICATEDSERVER_NO 0
#define UCONST_CONTEXT_EMPTYSERVER_YES 1
#define UCONST_CONTEXT_EMPTYSERVER_NO 0
#define UCONST_CONTEXT_FULLSERVER_YES 1
#define UCONST_CONTEXT_FULLSERVER_NO 0
#define UCONST_CONTEXT_ALLOWKEYBOARD_ANY 2
#define UCONST_CONTEXT_ALLOWKEYBOARD_YES 1
#define UCONST_CONTEXT_ALLOWKEYBOARD_NO 0
#define UCONST_CONTEXT_FORCERESPAWN_YES 1
#define UCONST_CONTEXT_FORCERESPAWN_NO 0
#define UCONST_CONTEXT_CAMPAIGN_YES 1
#define UCONST_CONTEXT_CAMPAIGN_NO 0
#define UCONST_CONTEXT_LOCKEDSERVER_YES 1
#define UCONST_CONTEXT_LOCKEDSERVER_NO 0
#define UCONST_CONTEXT_PURESERVER_ANY 2
#define UCONST_CONTEXT_PURESERVER_YES 1
#define UCONST_CONTEXT_PURESERVER_NO 0
#define UCONST_CONTEXT_TIMELIMIT_30 4
#define UCONST_CONTEXT_TIMELIMIT_20 3
#define UCONST_CONTEXT_TIMELIMIT_15 2
#define UCONST_CONTEXT_TIMELIMIT_10 1
#define UCONST_CONTEXT_TIMELIMIT_5 0
#define UCONST_CONTEXT_NUMBOTS_8 8
#define UCONST_CONTEXT_NUMBOTS_7 7
#define UCONST_CONTEXT_NUMBOTS_6 6
#define UCONST_CONTEXT_NUMBOTS_5 5
#define UCONST_CONTEXT_NUMBOTS_4 4
#define UCONST_CONTEXT_NUMBOTS_3 3
#define UCONST_CONTEXT_NUMBOTS_2 2
#define UCONST_CONTEXT_NUMBOTS_1 1
#define UCONST_CONTEXT_NUMBOTS_0 0
#define UCONST_CONTEXT_GOALSCORE_30 4
#define UCONST_CONTEXT_GOALSCORE_20 3
#define UCONST_CONTEXT_GOALSCORE_15 2
#define UCONST_CONTEXT_GOALSCORE_10 1
#define UCONST_CONTEXT_GOALSCORE_5 0
#define UCONST_CONTEXT_BOTSKILL_GODLIKE 8
#define UCONST_CONTEXT_BOTSKILL_INHUMAN 7
#define UCONST_CONTEXT_BOTSKILL_MASTERFUL 6
#define UCONST_CONTEXT_BOTSKILL_ADEPT 5
#define UCONST_CONTEXT_BOTSKILL_SKILLED 4
#define UCONST_CONTEXT_BOTSKILL_EXPERIENCED 3
#define UCONST_CONTEXT_BOTSKILL_AVERAGE 2
#define UCONST_CONTEXT_BOTSKILL_NOVICE 1
#define UCONST_CONTEXT_BOTSKILL_AUTOADJUSTSKILL 0
#define UCONST_CONTEXT_MAPNAME_CUSTOM 0
#define UCONST_CONTEXT_DEDICATEDSERVER 14
#define UCONST_CONTEXT_EMPTYSERVER 13
#define UCONST_CONTEXT_FULLSERVER 12
#define UCONST_CONTEXT_ALLOWKEYBOARD 11
#define UCONST_CONTEXT_FORCERESPAWN 10
#define UCONST_CONTEXT_CAMPAIGN 9
#define UCONST_CONTEXT_VSBOTS 8
#define UCONST_CONTEXT_LOCKEDSERVER 7
#define UCONST_CONTEXT_PURESERVER 6
#define UCONST_CONTEXT_MAPNAME 1
#define UCONST_CONTEXT_BOTSKILL 0
#define UCONST_CONTEXT_GAME_MODE_CAMPAIGN 7
#define UCONST_CONTEXT_GAME_MODE_CUSTOM 6
#define UCONST_CONTEXT_GAME_MODE_DUEL 5
#define UCONST_CONTEXT_GAME_MODE_TDM 4
#define UCONST_CONTEXT_GAME_MODE_VCTF 3
#define UCONST_CONTEXT_GAME_MODE_WAR 2
#define UCONST_CONTEXT_GAME_MODE_CTF 1
#define UCONST_CONTEXT_GAME_MODE_DM 0
#define UCONST_CONTEXT_GAME_MODE 0x0000800B
#define UCONST_CONTEXT_PRESENCE_MENUPRESENCE 0
#define UCONST_GS_CDKEY_PART_MAXLENGTH 4
#define UCONST_GS_EMAIL_MAXLENGTH 50
#define UCONST_GS_MESSAGE_MAXLENGTH 255
#define UCONST_GS_PASSWORD_MAXLENGTH 30
#define UCONST_GS_USERNAME_MAXLENGTH 15

struct UTDataStore_OnlineStats_eventGetElementProviderFromName_Parms
{
    FName FieldName;
    class UUTUIDataProvider_StatsElementProvider* ReturnValue;
    UTDataStore_OnlineStats_eventGetElementProviderFromName_Parms(EEventParm)
    {
    }
};
struct UTDataStore_OnlineStats_eventOnStatsReadComplete_Parms
{
    UBOOL bWasSuccessful;
    UTDataStore_OnlineStats_eventOnStatsReadComplete_Parms(EEventParm)
    {
    }
};
class UUTDataStore_OnlineStats : public UUIDataStore_OnlineStats
{
public:
    //## BEGIN PROPS UTDataStore_OnlineStats
    BYTE CurrentDetailsReadType;
    BITFIELD bInRead:1 GCC_BITFIELD_MAGIC;
    BITFIELD bInQueuePump:1;
    struct FUniqueNetId DetailsPlayerNetId;
    FStringNoInit DetailsPlayerNick;
    INT GameModeId;
    INT MatchTypeId;
    INT StatsReadObjectStartIndex;
    INT DetailedStatsRowIndex;
    class UClass* LeaderboardSettingsClass;
    class USettings* LeaderboardSettings;
    class UUIDataProvider_Settings* SettingsProvider;
    class UUTUIDataProvider_StatsGeneral* GeneralProvider;
    class UUTUIDataProvider_StatsWeapons* WeaponsProvider;
    class UUTUIDataProvider_StatsVehicles* VehiclesProvider;
    class UUTUIDataProvider_StatsVehicleWeapons* VehicleWeaponsProvider;
    class UUTUIDataProvider_StatsRewards* RewardsProvider;
    TArrayNoInit<class UOnlineStatsRead*> ReadQueue;
    FScriptDelegate __OnStatsReadComplete__Delegate;
    //## END PROPS UTDataStore_OnlineStats

    class UUTUIDataProvider_StatsElementProvider* eventGetElementProviderFromName(FName FieldName)
    {
        UTDataStore_OnlineStats_eventGetElementProviderFromName_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.FieldName=FieldName;
        ProcessEvent(FindFunctionChecked(UTGAME_GetElementProviderFromName),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnStatsReadComplete(UBOOL bWasSuccessful)
    {
        UTDataStore_OnlineStats_eventOnStatsReadComplete_Parms Parms(EC_EventParm);
        Parms.bWasSuccessful=bWasSuccessful ? FIRST_BITFIELD : FALSE;
        ProcessDelegate(UTGAME_OnStatsReadComplete,&__OnStatsReadComplete__Delegate,&Parms);
    }
    DECLARE_CLASS(UUTDataStore_OnlineStats,UUIDataStore_OnlineStats,0|CLASS_Transient,UTGame)
	/**
	 * Initializes the dataproviders for all of the various character parts.
	 */
	virtual void InitializeDataStore();

	/**
	 * Builds a list of available fields from the array of properties in the
	 * game settings object
	 *
	 * @param OutFields	out value that receives the list of exposed properties
	 */
	virtual void GetSupportedDataFields(TArray<FUIDataProviderField>& OutFields);

	/* === UIListElementProvider === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags();

	/**
	 * Returns the number of list elements associated with the data tag specified.
	 *
	 * @param	FieldName	the name of the property to get the element count for.  guaranteed to be one of the values returned
	 *						from GetElementProviderTags.
	 *
	 * @return	the total number of elements that are required to fully represent the data specified.
	 */
	virtual INT GetElementCount( FName FieldName );

	/**
	 * Retrieves the list elements associated with the data tag specified.
	 *
	 * @param	FieldName		the name of the property to get the element count for.  guaranteed to be one of the values returned
	 *							from GetElementProviderTags.
	 * @param	out_Elements	will be filled with the elements associated with the data specified by DataTag.
	 *
	 * @return	TRUE if this data store contains a list element data provider matching the tag specified.
	 */
	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	/**
	 * Retrieves a UIListElementCellProvider for the specified data tag that can provide the list with the available cells for this list element.
	 * Used by the UI editor to know which cells are available for binding to individual list cells.
	 *
	 * @param	FieldName		the tag of the list element data field that we want the schema for.
	 *
	 * @return	a pointer to some instance of the data provider for the tag specified.  only used for enumerating the available
	 *			cell bindings, so doesn't need to actually contain any data (i.e. can be the CDO for the data provider class, for example)
	 */
	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName );

	/**
	 * Retrieves a UIListElementCellProvider for the specified data tag that can provide the list with the values for the cells
	 * of the list element indicated by CellValueProvider.DataSourceIndex
	 *
	 * @param	FieldName		the tag of the list element data field that we want the values for
	 * @param	ListIndex		the list index for the element to get values for
	 *
	 * @return	a pointer to an instance of the data provider that contains the value for the data field and list index specified
	 */
	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex );

   	virtual TScriptInterface<class IUIListElementProvider> ResolveListElementProvider( const FString& PropertyName );
};

struct UTUIDataStore_Content_eventGetElementProviderFromName_Parms
{
    FName FieldName;
    class UUTUIDataProvider_SimpleElementProvider* ReturnValue;
    UTUIDataStore_Content_eventGetElementProviderFromName_Parms(EEventParm)
    {
    }
};
class UUTUIDataStore_Content : public UUIDataStore, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UTUIDataStore_Content
    class UUTUIDataProvider_InstalledContent* InstalledContentProvider;
    class UUTUIDataProvider_AvailableContent* AvailableContentProvider;
    //## END PROPS UTUIDataStore_Content

    class UUTUIDataProvider_SimpleElementProvider* eventGetElementProviderFromName(FName FieldName)
    {
        UTUIDataStore_Content_eventGetElementProviderFromName_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.FieldName=FieldName;
        ProcessEvent(FindFunctionChecked(UTGAME_GetElementProviderFromName),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUTUIDataStore_Content,UUIDataStore,0|CLASS_Transient,UTGame)
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
	/**
	 * Initializes the dataproviders for all of the various character parts.
	 */
	virtual void InitializeDataStore();

	/**
	 * Builds a list of available fields from the array of properties in the
	 * game settings object
	 *
	 * @param OutFields	out value that receives the list of exposed properties
	 */
	virtual void GetSupportedDataFields(TArray<FUIDataProviderField>& OutFields);

	/* === UIListElementProvider === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags();

	/**
	 * Returns the number of list elements associated with the data tag specified.
	 *
	 * @param	FieldName	the name of the property to get the element count for.  guaranteed to be one of the values returned
	 *						from GetElementProviderTags.
	 *
	 * @return	the total number of elements that are required to fully represent the data specified.
	 */
	virtual INT GetElementCount( FName FieldName );

	/**
	 * Retrieves the list elements associated with the data tag specified.
	 *
	 * @param	FieldName		the name of the property to get the element count for.  guaranteed to be one of the values returned
	 *							from GetElementProviderTags.
	 * @param	out_Elements	will be filled with the elements associated with the data specified by DataTag.
	 *
	 * @return	TRUE if this data store contains a list element data provider matching the tag specified.
	 */
	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	/**
	 * Retrieves a UIListElementCellProvider for the specified data tag that can provide the list with the available cells for this list element.
	 * Used by the UI editor to know which cells are available for binding to individual list cells.
	 *
	 * @param	FieldName		the tag of the list element data field that we want the schema for.
	 *
	 * @return	a pointer to some instance of the data provider for the tag specified.  only used for enumerating the available
	 *			cell bindings, so doesn't need to actually contain any data (i.e. can be the CDO for the data provider class, for example)
	 */
	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName );

	/**
	 * Retrieves a UIListElementCellProvider for the specified data tag that can provide the list with the values for the cells
	 * of the list element indicated by CellValueProvider.DataSourceIndex
	 *
	 * @param	FieldName		the tag of the list element data field that we want the values for
	 * @param	ListIndex		the list index for the element to get values for
	 *
	 * @return	a pointer to an instance of the data provider that contains the value for the data field and list index specified
	 */
	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex );

   	virtual TScriptInterface<class IUIListElementProvider> ResolveListElementProvider( const FString& PropertyName );
};

class UUTCharFamilyAssetStore : public UObject
{
public:
    //## BEGIN PROPS UTCharFamilyAssetStore
    FStringNoInit FamilyID;
    TArrayNoInit<class UObject*> FamilyAssets;
    INT NumPendingPackages;
    FLOAT StartLoadTime;
    //## END PROPS UTCharFamilyAssetStore

    DECLARE_CLASS(UUTCharFamilyAssetStore,UObject,0,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTCharFamilyAssetStore)
};

struct FCustomAIData
{
    FLOAT Tactics;
    FLOAT StrafingAbility;
    FLOAT Accuracy;
    FLOAT Aggressiveness;
    FLOAT CombatStyle;
    FLOAT Jumpiness;
    FLOAT ReactionTime;
    FStringNoInit FavoriteWeapon;

    /** Constructors */
    FCustomAIData() {}
    FCustomAIData(EEventParm)
    {
        appMemzero(this, sizeof(FCustomAIData));
    }
};

struct FCharacterInfo
{
    FStringNoInit CharID;
    FStringNoInit FamilyID;
    FStringNoInit CharName;
    FStringNoInit Description;
    FStringNoInit PreviewImageMarkup;
    FStringNoInit Faction;
    struct FCustomAIData AIData;
    FStringNoInit ExtraInfo;
    BITFIELD bLocked:1;
    BITFIELD bRestrictInSinglePlayer:1;

    /** Constructors */
    FCharacterInfo() {}
    FCharacterInfo(EEventParm)
    {
        appMemzero(this, sizeof(FCharacterInfo));
    }
};

struct FFactionInfo
{
    FStringNoInit Faction;
    FStringNoInit PreviewImageMarkup;
    FStringNoInit FriendlyName;
    FStringNoInit Description;

    /** Constructors */
    FFactionInfo() {}
    FFactionInfo(EEventParm)
    {
        appMemzero(this, sizeof(FFactionInfo));
    }
};

struct FCharPortraitSetup
{
    FName CenterOnBone;
    FVector MeshOffset;
    FRotator MeshRot;
    FLOAT CamFOV;
    FRotator DirLightRot;
    FLOAT DirLightBrightness;
    FColor DirLightColor;
    FRotator DirLight2Rot;
    FLOAT DirLight2Brightness;
    FColor DirLight2Color;
    FRotator DirLight3Rot;
    FLOAT DirLight3Brightness;
    FColor DirLight3Color;
    FLOAT SkyBrightness;
    FColor SkyColor;
    FLOAT SkyLowerBrightness;
    FColor SkyLowerColor;
    FVector PortraitBackgroundTranslation;
    INT TextureSize;

    /** Constructors */
    FCharPortraitSetup() {}
    FCharPortraitSetup(EEventParm)
    {
        appMemzero(this, sizeof(FCharPortraitSetup));
    }
};

class UUTCharInfo : public UObject
{
public:
    //## BEGIN PROPS UTCharInfo
    TArrayNoInit<struct FCharacterInfo> Characters;
    TArrayNoInit<struct FFactionInfo> Factions;
    TArrayNoInit<class UClass*> Families;
    FLOAT LOD1DisplayFactor;
    FLOAT LOD2DisplayFactor;
    FLOAT LOD3DisplayFactor;
    TArrayNoInit<FString> UnlockableChars;
    struct FCharPortraitSetup PortraitSetup;
    class UStaticMesh* PortraitBackgroundMesh;
    //## END PROPS UTCharInfo

    struct FCharacterInfo FindCharacter(const FString& InFaction,const FString& InCharID);
    class UClass* FindFamilyInfo(const FString& InFamilyID);
    class UUTCharFamilyAssetStore* LoadFamilyAssets(const FString& InFamilyID,UBOOL bBlocking,UBOOL bArms);
    class UTexture* MakeCharPortraitTexture(class USkeletalMesh* CharMesh,struct FCharPortraitSetup Setup,class UStaticMesh* BackgroundMesh);
    DECLARE_FUNCTION(execFindCharacter)
    {
        P_GET_STR(InFaction);
        P_GET_STR(InCharID);
        P_FINISH;
        *(struct FCharacterInfo*)Result=FindCharacter(InFaction,InCharID);
    }
    DECLARE_FUNCTION(execFindFamilyInfo)
    {
        P_GET_STR(InFamilyID);
        P_FINISH;
        *(class UClass**)Result=FindFamilyInfo(InFamilyID);
    }
    DECLARE_FUNCTION(execLoadFamilyAssets)
    {
        P_GET_STR(InFamilyID);
        P_GET_UBOOL(bBlocking);
        P_GET_UBOOL(bArms);
        P_FINISH;
        *(class UUTCharFamilyAssetStore**)Result=LoadFamilyAssets(InFamilyID,bBlocking,bArms);
    }
    DECLARE_FUNCTION(execMakeCharPortraitTexture)
    {
        P_GET_OBJECT(USkeletalMesh,CharMesh);
        P_GET_STRUCT(struct FCharPortraitSetup,Setup);
        P_GET_OBJECT(UStaticMesh,BackgroundMesh);
        P_FINISH;
        *(class UTexture**)Result=MakeCharPortraitTexture(CharMesh,Setup,BackgroundMesh);
    }
    DECLARE_CLASS(UUTCharInfo,UObject,0|CLASS_Config,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("CharInfo");}

	/** Sets/unsets bit in CurrentStatus for the supplied character name. */
	INT	SetCharLockedStatus(const FString& CharName, UBOOL bLocked, INT CurrentStatus);

	/** See if a particular character is unlocked.*/
	UBOOL CharIsUnlocked(const FString& CharName, INT CurrentStatus);
};

#endif // !INCLUDED_UTGAME_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AUTAmmoPickupFactory,-1,execTransformAmmoType);
AUTOGENERATE_FUNCTION(AUTAvoidMarker,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTCarriedObject,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTCarriedObject,-1,execSetHUDLocation);
AUTOGENERATE_FUNCTION(UUTCharInfo,-1,execMakeCharPortraitTexture);
AUTOGENERATE_FUNCTION(UUTCharInfo,-1,execLoadFamilyAssets);
AUTOGENERATE_FUNCTION(UUTCharInfo,-1,execFindFamilyInfo);
AUTOGENERATE_FUNCTION(UUTCharInfo,-1,execFindCharacter);
AUTOGENERATE_FUNCTION(UUTCheatManager,-1,execUnlockAllChars);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execSetUseTiltForwardAndBack);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execSetOnlyUseControllerTiltInput);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execSetControllerTiltActive);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execSetControllerTiltDesiredIfAvailable);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execIsControllerTiltActive);
AUTOGENERATE_FUNCTION(AUTConsolePlayerController,-1,execGetTargetAdhesionFrictionTarget);
AUTOGENERATE_FUNCTION(AUTEmitCameraEffect,-1,execUpdateLocation);
AUTOGENERATE_FUNCTION(UUTExplosionLight,-1,execResetLight);
AUTOGENERATE_FUNCTION(AUTGame,-1,execSortPlayerScores);
AUTOGENERATE_FUNCTION(AUTGame,-1,execIsPureGame);
AUTOGENERATE_FUNCTION(AUTGame,-1,execIsLowGoreVersion);
AUTOGENERATE_FUNCTION(AUTGameObjective,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTGameObjective,-1,execRenderMyLinks);
AUTOGENERATE_FUNCTION(AUTGameObjective,-1,execDrawIcon);
AUTOGENERATE_FUNCTION(AUTGameObjective,-1,execSetHUDLocation);
AUTOGENERATE_FUNCTION(UUTGameSettingsCommon,-1,execBlobToString);
AUTOGENERATE_FUNCTION(UUTGameSettingsCommon,-1,execStringToBlob);
AUTOGENERATE_FUNCTION(UUTGameViewportClient,-1,execLoadRandomLocalizedHintMessage);
AUTOGENERATE_FUNCTION(UUTLeaderboardWriteBase,-1,execSetPureServerMode);
AUTOGENERATE_FUNCTION(UUTLeaderboardWriteBase,-1,execSetFloatStatFromMapping);
AUTOGENERATE_FUNCTION(UUTLeaderboardWriteBase,-1,execSetIntStatFromMapping);
AUTOGENERATE_FUNCTION(UUTLeaderboardWriteBase,-1,execGetPropertyIdFromStatType);
AUTOGENERATE_FUNCTION(UUTLeaderboardWriteBase,-1,execPrintDebugInformation);
AUTOGENERATE_FUNCTION(UUTMapInfo,-1,execUpdateHUDLocation);
AUTOGENERATE_FUNCTION(UUTMapInfo,-1,execUpdateNodes);
AUTOGENERATE_FUNCTION(UUTMapInfo,-1,execRenderAdditionalInformation);
AUTOGENERATE_FUNCTION(UUTMapInfo,-1,execRenderLinks);
AUTOGENERATE_FUNCTION(UUTParticleSystemComponent,-1,execSetFOV);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execNativePostRenderFor);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execSuggestJumpVelocity);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execSetHUDLocation);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execIsInvisible);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execSetMaxStepHeight);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execHeroFits);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execGetTargetLocation);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execEnsureOverlayComponentLast);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execRestorePreRagdollCollisionComponent);
AUTOGENERATE_FUNCTION(AUTPawn,-1,execGetBoundingCylinder);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execIsMouseAvailable);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execIsKeyboardAvailable);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execSetHardwarePhysicsEnabled);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execSetGamma);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execGetUIPlayerIndex);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execResetProfileToDefault);
AUTOGENERATE_FUNCTION(AUTPlayerController,-1,execIsEpicInternal);
AUTOGENERATE_FUNCTION(UUTPlayerInput,-1,execGetUTBindNameFromCommand);
AUTOGENERATE_FUNCTION(UUTPlayerInput,-1,execForceFlushOfInput);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execResetKeysToDefault);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execResetToDefault);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execUpdateGetItOn);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execIncrementMixItUp);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execUpdateAroundTheWorld);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execGetAchievementUnlockCriteria);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execSetAchievementValue);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execGetAchievementValue);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execUpdateAchievementCount);
AUTOGENERATE_FUNCTION(UUTProfileSettings,-1,execUpdateAchievementBitMask);
AUTOGENERATE_FUNCTION(AUTProjectile,-1,execGetTerminalVelocity);
AUTOGENERATE_FUNCTION(AUTScout,-1,execSuggestJumpVelocity);
AUTOGENERATE_FUNCTION(UUTSkeletalMeshComponent,-1,execSetFOV);
AUTOGENERATE_FUNCTION(AUTTeamAI,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTVoteCollector,-1,execGetMapIndex);
AUTOGENERATE_FUNCTION(AUTVoteReplicationInfo,-1,execGetMapIndex);
AUTOGENERATE_FUNCTION(AUTWeap_RocketLauncher,-1,execCanLockOnTo);
AUTOGENERATE_FUNCTION(AUTWeap_RocketLauncher,-1,execUpdateLockTarget);
AUTOGENERATE_FUNCTION(AUTWeap_RocketLauncher,-1,execCheckTargetLock);
AUTOGENERATE_FUNCTION(AUTWeapon,-1,execEnsureWeaponOverlayComponentLast);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef UTGAME_NATIVE_DEFS
#define UTGAME_NATIVE_DEFS

DECLARE_NATIVE_TYPE(UTGame,AForcedDirVolume);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryAI);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryMover);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryPickup);
DECLARE_NATIVE_TYPE(UTGame,UUTActorFactoryVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTAmmo_BioRifle);
DECLARE_NATIVE_TYPE(UTGame,AUTAmmoPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTArmorPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTArmorPickupLight);
DECLARE_NATIVE_TYPE(UTGame,AUTAvoidMarker);
DECLARE_NATIVE_TYPE(UTGame,AUTBeamWeapon);
DECLARE_NATIVE_TYPE(UTGame,AUTCarriedObject);
DECLARE_NATIVE_TYPE(UTGame,UUTCharFamilyAssetStore);
DECLARE_NATIVE_TYPE(UTGame,UUTCharInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTCheatManager);
DECLARE_NATIVE_TYPE(UTGame,AUTConsolePlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTConsolePlayerInput);
DECLARE_NATIVE_TYPE(UTGame,AUTCTFFlag);
DECLARE_NATIVE_TYPE(UTGame,UUTDataStore_OnlineStats);
DECLARE_NATIVE_TYPE(UTGame,AUTDefensePoint);
DECLARE_NATIVE_TYPE(UTGame,AUTDroppedPickup);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitCameraEffect);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitter);
DECLARE_NATIVE_TYPE(UTGame,AUTEmitterPool);
DECLARE_NATIVE_TYPE(UTGame,AUTEntryPlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTExplosionLight);
DECLARE_NATIVE_TYPE(UTGame,UUTFamilyInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTGame);
DECLARE_NATIVE_TYPE(UTGame,AUTGameObjective);
DECLARE_NATIVE_TYPE(UTGame,AUTGameReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTGameSettingsCommon);
DECLARE_NATIVE_TYPE(UTGame,UUTGameViewportClient);
DECLARE_NATIVE_TYPE(UTGame,AUTHealthPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTHealthPickupLight);
DECLARE_NATIVE_TYPE(UTGame,AUTHoldSpot);
DECLARE_NATIVE_TYPE(UTGame,AUTInventory);
DECLARE_NATIVE_TYPE(UTGame,AUTInventoryManager);
DECLARE_NATIVE_TYPE(UTGame,AUTItemPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTJumpPad);
DECLARE_NATIVE_TYPE(UTGame,UUTJumpPadReachSpec);
DECLARE_NATIVE_TYPE(UTGame,AUTKActor);
DECLARE_NATIVE_TYPE(UTGame,UUTLeaderboardSettings);
DECLARE_NATIVE_TYPE(UTGame,UUTLeaderboardWriteBase);
DECLARE_NATIVE_TYPE(UTGame,AUTLinkedReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTMapInfo);
DECLARE_NATIVE_TYPE(UTGame,UUTMapMusicInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTMutator);
DECLARE_NATIVE_TYPE(UTGame,UUTParticleSystemComponent);
DECLARE_NATIVE_TYPE(UTGame,AUTPawn);
DECLARE_NATIVE_TYPE(UTGame,UUTPhysicalMaterialProperty);
DECLARE_NATIVE_TYPE(UTGame,AUTPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTPickupFactory_HealthVial);
DECLARE_NATIVE_TYPE(UTGame,AUTPickupLight);
DECLARE_NATIVE_TYPE(UTGame,AUTPlayerController);
DECLARE_NATIVE_TYPE(UTGame,UUTPlayerInput);
DECLARE_NATIVE_TYPE(UTGame,AUTPlayerReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTPowerupPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,UUTProfileSettings);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_FlakShard);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_Grenade);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_Rocket);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_ScorpionGlob_Base);
DECLARE_NATIVE_TYPE(UTGame,AUTProj_SeekingRocket);
DECLARE_NATIVE_TYPE(UTGame,AUTProjectile);
DECLARE_NATIVE_TYPE(UTGame,AUTReplicatedEmitter);
DECLARE_NATIVE_TYPE(UTGame,AUTScout);
DECLARE_NATIVE_TYPE(UTGame,UUTSkeletalMeshComponent);
DECLARE_NATIVE_TYPE(UTGame,AUTSlowVolume);
DECLARE_NATIVE_TYPE(UTGame,AUTTeamAI);
DECLARE_NATIVE_TYPE(UTGame,AUTTeamInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTTeamPlayerStart);
DECLARE_NATIVE_TYPE(UTGame,AUTTeleporterBase);
DECLARE_NATIVE_TYPE(UTGame,AUTTimedPowerup);
DECLARE_NATIVE_TYPE(UTGame,UUTTrajectoryReachSpec);
DECLARE_NATIVE_TYPE(UTGame,AUTTranslocatorDest);
DECLARE_NATIVE_TYPE(UTGame,UUTTranslocatorReachSpec);
DECLARE_NATIVE_TYPE(UTGame,UUTTypes);
DECLARE_NATIVE_TYPE(UTGame,UUTUIDataStore_Content);
DECLARE_NATIVE_TYPE(UTGame,AUTVoteCollector);
DECLARE_NATIVE_TYPE(UTGame,AUTVoteReplicationInfo);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_FlakCannon);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_ImpactHammer);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_LinkGun);
DECLARE_NATIVE_TYPE(UTGame,AUTWeap_RocketLauncher);
DECLARE_NATIVE_TYPE(UTGame,AUTWeapon);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponLocker);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponLockerPickupLight);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponPickupFactory);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponPickupLight);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponShield);

#define AUTO_INITIALIZE_REGISTRANTS_UTGAME \
	AForcedDirVolume::StaticClass(); \
	UUTActorFactoryAI::StaticClass(); \
	UUTActorFactoryMover::StaticClass(); \
	UUTActorFactoryPickup::StaticClass(); \
	UUTActorFactoryVehicle::StaticClass(); \
	AUTAmmo_BioRifle::StaticClass(); \
	AUTAmmoPickupFactory::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTAmmoPickupFactoryNative; \
	AUTArmorPickupFactory::StaticClass(); \
	AUTArmorPickupLight::StaticClass(); \
	AUTAvoidMarker::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTAvoidMarkerNative; \
	AUTBeamWeapon::StaticClass(); \
	AUTCarriedObject::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTCarriedObjectNative; \
	UUTCharFamilyAssetStore::StaticClass(); \
	UUTCharInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTCharInfoNative; \
	UUTCheatManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTCheatManagerNative; \
	AUTConsolePlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTConsolePlayerControllerNative; \
	UUTConsolePlayerInput::StaticClass(); \
	AUTCTFFlag::StaticClass(); \
	UUTDataStore_OnlineStats::StaticClass(); \
	AUTDefensePoint::StaticClass(); \
	UUTDemoRecDriver::StaticClass(); \
	AUTDroppedPickup::StaticClass(); \
	AUTEmitCameraEffect::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTEmitCameraEffectNative; \
	AUTEmitter::StaticClass(); \
	AUTEmitterPool::StaticClass(); \
	AUTEntryPlayerController::StaticClass(); \
	UUTExplosionLight::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTExplosionLightNative; \
	UUTFamilyInfo::StaticClass(); \
	AUTGame::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTGameNative; \
	AUTGameObjective::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTGameObjectiveNative; \
	AUTGameReplicationInfo::StaticClass(); \
	UUTGameSettingsCommon::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTGameSettingsCommonNative; \
	UUTGameViewportClient::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTGameViewportClientNative; \
	AUTHealthPickupFactory::StaticClass(); \
	AUTHealthPickupLight::StaticClass(); \
	AUTHoldSpot::StaticClass(); \
	AUTInventory::StaticClass(); \
	AUTInventoryManager::StaticClass(); \
	AUTItemPickupFactory::StaticClass(); \
	AUTJumpPad::StaticClass(); \
	UUTJumpPadReachSpec::StaticClass(); \
	AUTKActor::StaticClass(); \
	UUTLeaderboardSettings::StaticClass(); \
	UUTLeaderboardWriteBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTLeaderboardWriteBaseNative; \
	UUTLevelCheckCommandlet::StaticClass(); \
	AUTLinkedReplicationInfo::StaticClass(); \
	UUTMapInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTMapInfoNative; \
	UUTMapMusicInfo::StaticClass(); \
	AUTMutator::StaticClass(); \
	UUTParticleSystemComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTParticleSystemComponentNative; \
	AUTPawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTPawnNative; \
	UUTPhysicalMaterialProperty::StaticClass(); \
	AUTPickupFactory::StaticClass(); \
	AUTPickupFactory_HealthVial::StaticClass(); \
	AUTPickupLight::StaticClass(); \
	AUTPlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTPlayerControllerNative; \
	UUTPlayerInput::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTPlayerInputNative; \
	AUTPlayerReplicationInfo::StaticClass(); \
	AUTPowerupPickupFactory::StaticClass(); \
	UUTProfileSettings::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTProfileSettingsNative; \
	AUTProj_FlakShard::StaticClass(); \
	AUTProj_Grenade::StaticClass(); \
	AUTProj_Rocket::StaticClass(); \
	AUTProj_ScorpionGlob_Base::StaticClass(); \
	AUTProj_SeekingRocket::StaticClass(); \
	AUTProjectile::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTProjectileNative; \
	UUTReplaceActorCommandlet::StaticClass(); \
	AUTReplicatedEmitter::StaticClass(); \
	AUTScout::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTScoutNative; \
	UUTSkeletalMeshComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTSkeletalMeshComponentNative; \
	AUTSlowVolume::StaticClass(); \
	AUTTeamAI::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTTeamAINative; \
	AUTTeamInfo::StaticClass(); \
	AUTTeamPlayerStart::StaticClass(); \
	AUTTeleporterBase::StaticClass(); \
	AUTTimedPowerup::StaticClass(); \
	UUTTrajectoryReachSpec::StaticClass(); \
	AUTTranslocatorDest::StaticClass(); \
	UUTTranslocatorReachSpec::StaticClass(); \
	UUTTypes::StaticClass(); \
	UUTUIDataStore_Content::StaticClass(); \
	AUTVoteCollector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVoteCollectorNative; \
	AUTVoteReplicationInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVoteReplicationInfoNative; \
	AUTWeap_FlakCannon::StaticClass(); \
	AUTWeap_ImpactHammer::StaticClass(); \
	AUTWeap_LinkGun::StaticClass(); \
	AUTWeap_RocketLauncher::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTWeap_RocketLauncherNative; \
	AUTWeapon::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTWeaponNative; \
	AUTWeaponLocker::StaticClass(); \
	AUTWeaponLockerPickupLight::StaticClass(); \
	AUTWeaponPickupFactory::StaticClass(); \
	AUTWeaponPickupLight::StaticClass(); \
	AUTWeaponShield::StaticClass(); \

#endif // UTGAME_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AUTAmmoPickupFactory) GUTGameAUTAmmoPickupFactoryNatives[] = 
{ 
	MAP_NATIVE(AUTAmmoPickupFactory,execTransformAmmoType)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTAmmoPickupFactory);

NATIVE_INFO(AUTAvoidMarker) GUTGameAUTAvoidMarkerNatives[] = 
{ 
	MAP_NATIVE(AUTAvoidMarker,execGetTeamNum)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTAvoidMarker);

NATIVE_INFO(AUTCarriedObject) GUTGameAUTCarriedObjectNatives[] = 
{ 
	MAP_NATIVE(AUTCarriedObject,execGetTeamNum)
	MAP_NATIVE(AUTCarriedObject,execSetHUDLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTCarriedObject);

NATIVE_INFO(UUTCharInfo) GUTGameUUTCharInfoNatives[] = 
{ 
	MAP_NATIVE(UUTCharInfo,execMakeCharPortraitTexture)
	MAP_NATIVE(UUTCharInfo,execLoadFamilyAssets)
	MAP_NATIVE(UUTCharInfo,execFindFamilyInfo)
	MAP_NATIVE(UUTCharInfo,execFindCharacter)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTCharInfo);

NATIVE_INFO(UUTCheatManager) GUTGameUUTCheatManagerNatives[] = 
{ 
	MAP_NATIVE(UUTCheatManager,execUnlockAllChars)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTCheatManager);

NATIVE_INFO(AUTConsolePlayerController) GUTGameAUTConsolePlayerControllerNatives[] = 
{ 
	MAP_NATIVE(AUTConsolePlayerController,execSetUseTiltForwardAndBack)
	MAP_NATIVE(AUTConsolePlayerController,execSetOnlyUseControllerTiltInput)
	MAP_NATIVE(AUTConsolePlayerController,execSetControllerTiltActive)
	MAP_NATIVE(AUTConsolePlayerController,execSetControllerTiltDesiredIfAvailable)
	MAP_NATIVE(AUTConsolePlayerController,execIsControllerTiltActive)
	MAP_NATIVE(AUTConsolePlayerController,execGetTargetAdhesionFrictionTarget)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTConsolePlayerController);

NATIVE_INFO(AUTEmitCameraEffect) GUTGameAUTEmitCameraEffectNatives[] = 
{ 
	MAP_NATIVE(AUTEmitCameraEffect,execUpdateLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTEmitCameraEffect);

NATIVE_INFO(UUTExplosionLight) GUTGameUUTExplosionLightNatives[] = 
{ 
	MAP_NATIVE(UUTExplosionLight,execResetLight)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTExplosionLight);

NATIVE_INFO(AUTGame) GUTGameAUTGameNatives[] = 
{ 
	MAP_NATIVE(AUTGame,execSortPlayerScores)
	MAP_NATIVE(AUTGame,execIsPureGame)
	MAP_NATIVE(AUTGame,execIsLowGoreVersion)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTGame);

NATIVE_INFO(AUTGameObjective) GUTGameAUTGameObjectiveNatives[] = 
{ 
	MAP_NATIVE(AUTGameObjective,execGetTeamNum)
	MAP_NATIVE(AUTGameObjective,execRenderMyLinks)
	MAP_NATIVE(AUTGameObjective,execDrawIcon)
	MAP_NATIVE(AUTGameObjective,execSetHUDLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTGameObjective);

NATIVE_INFO(UUTGameSettingsCommon) GUTGameUUTGameSettingsCommonNatives[] = 
{ 
	MAP_NATIVE(UUTGameSettingsCommon,execBlobToString)
	MAP_NATIVE(UUTGameSettingsCommon,execStringToBlob)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTGameSettingsCommon);

NATIVE_INFO(UUTGameViewportClient) GUTGameUUTGameViewportClientNatives[] = 
{ 
	MAP_NATIVE(UUTGameViewportClient,execLoadRandomLocalizedHintMessage)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTGameViewportClient);

NATIVE_INFO(UUTLeaderboardWriteBase) GUTGameUUTLeaderboardWriteBaseNatives[] = 
{ 
	MAP_NATIVE(UUTLeaderboardWriteBase,execSetPureServerMode)
	MAP_NATIVE(UUTLeaderboardWriteBase,execSetFloatStatFromMapping)
	MAP_NATIVE(UUTLeaderboardWriteBase,execSetIntStatFromMapping)
	MAP_NATIVE(UUTLeaderboardWriteBase,execGetPropertyIdFromStatType)
	MAP_NATIVE(UUTLeaderboardWriteBase,execPrintDebugInformation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTLeaderboardWriteBase);

NATIVE_INFO(UUTMapInfo) GUTGameUUTMapInfoNatives[] = 
{ 
	MAP_NATIVE(UUTMapInfo,execUpdateHUDLocation)
	MAP_NATIVE(UUTMapInfo,execUpdateNodes)
	MAP_NATIVE(UUTMapInfo,execRenderAdditionalInformation)
	MAP_NATIVE(UUTMapInfo,execRenderLinks)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTMapInfo);

NATIVE_INFO(UUTParticleSystemComponent) GUTGameUUTParticleSystemComponentNatives[] = 
{ 
	MAP_NATIVE(UUTParticleSystemComponent,execSetFOV)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTParticleSystemComponent);

NATIVE_INFO(AUTPawn) GUTGameAUTPawnNatives[] = 
{ 
	MAP_NATIVE(AUTPawn,execNativePostRenderFor)
	MAP_NATIVE(AUTPawn,execSuggestJumpVelocity)
	MAP_NATIVE(AUTPawn,execSetHUDLocation)
	MAP_NATIVE(AUTPawn,execIsInvisible)
	MAP_NATIVE(AUTPawn,execSetMaxStepHeight)
	MAP_NATIVE(AUTPawn,execHeroFits)
	MAP_NATIVE(AUTPawn,execGetTargetLocation)
	MAP_NATIVE(AUTPawn,execEnsureOverlayComponentLast)
	MAP_NATIVE(AUTPawn,execRestorePreRagdollCollisionComponent)
	MAP_NATIVE(AUTPawn,execGetBoundingCylinder)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTPawn);

NATIVE_INFO(AUTPlayerController) GUTGameAUTPlayerControllerNatives[] = 
{ 
	MAP_NATIVE(AUTPlayerController,execIsMouseAvailable)
	MAP_NATIVE(AUTPlayerController,execIsKeyboardAvailable)
	MAP_NATIVE(AUTPlayerController,execSetHardwarePhysicsEnabled)
	MAP_NATIVE(AUTPlayerController,execSetGamma)
	MAP_NATIVE(AUTPlayerController,execGetUIPlayerIndex)
	MAP_NATIVE(AUTPlayerController,execResetProfileToDefault)
	MAP_NATIVE(AUTPlayerController,execIsEpicInternal)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTPlayerController);

NATIVE_INFO(UUTPlayerInput) GUTGameUUTPlayerInputNatives[] = 
{ 
	MAP_NATIVE(UUTPlayerInput,execGetUTBindNameFromCommand)
	MAP_NATIVE(UUTPlayerInput,execForceFlushOfInput)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTPlayerInput);

NATIVE_INFO(UUTProfileSettings) GUTGameUUTProfileSettingsNatives[] = 
{ 
	MAP_NATIVE(UUTProfileSettings,execResetKeysToDefault)
	MAP_NATIVE(UUTProfileSettings,execResetToDefault)
	MAP_NATIVE(UUTProfileSettings,execUpdateGetItOn)
	MAP_NATIVE(UUTProfileSettings,execIncrementMixItUp)
	MAP_NATIVE(UUTProfileSettings,execUpdateAroundTheWorld)
	MAP_NATIVE(UUTProfileSettings,execGetAchievementUnlockCriteria)
	MAP_NATIVE(UUTProfileSettings,execSetAchievementValue)
	MAP_NATIVE(UUTProfileSettings,execGetAchievementValue)
	MAP_NATIVE(UUTProfileSettings,execUpdateAchievementCount)
	MAP_NATIVE(UUTProfileSettings,execUpdateAchievementBitMask)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTProfileSettings);

NATIVE_INFO(AUTProjectile) GUTGameAUTProjectileNatives[] = 
{ 
	MAP_NATIVE(AUTProjectile,execGetTerminalVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTProjectile);

NATIVE_INFO(AUTScout) GUTGameAUTScoutNatives[] = 
{ 
	MAP_NATIVE(AUTScout,execSuggestJumpVelocity)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTScout);

NATIVE_INFO(UUTSkeletalMeshComponent) GUTGameUUTSkeletalMeshComponentNatives[] = 
{ 
	MAP_NATIVE(UUTSkeletalMeshComponent,execSetFOV)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTSkeletalMeshComponent);

NATIVE_INFO(AUTTeamAI) GUTGameAUTTeamAINatives[] = 
{ 
	MAP_NATIVE(AUTTeamAI,execGetTeamNum)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTTeamAI);

NATIVE_INFO(AUTVoteCollector) GUTGameAUTVoteCollectorNatives[] = 
{ 
	MAP_NATIVE(AUTVoteCollector,execGetMapIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVoteCollector);

NATIVE_INFO(AUTVoteReplicationInfo) GUTGameAUTVoteReplicationInfoNatives[] = 
{ 
	MAP_NATIVE(AUTVoteReplicationInfo,execGetMapIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVoteReplicationInfo);

NATIVE_INFO(AUTWeap_RocketLauncher) GUTGameAUTWeap_RocketLauncherNatives[] = 
{ 
	MAP_NATIVE(AUTWeap_RocketLauncher,execCanLockOnTo)
	MAP_NATIVE(AUTWeap_RocketLauncher,execUpdateLockTarget)
	MAP_NATIVE(AUTWeap_RocketLauncher,execCheckTargetLock)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTWeap_RocketLauncher);

NATIVE_INFO(AUTWeapon) GUTGameAUTWeaponNatives[] = 
{ 
	MAP_NATIVE(AUTWeapon,execEnsureWeaponOverlayComponentLast)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTWeapon);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,ForcedDirVolume,TypeToForce)
VERIFY_CLASS_OFFSET_NODIE(A,ForcedDirVolume,TouchingVehicles)
VERIFY_CLASS_SIZE_NODIE(AForcedDirVolume)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryAI)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryMover,EventClass)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryMover)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryPickup,InventoryClass)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryPickup)
VERIFY_CLASS_OFFSET_NODIE(U,UTActorFactoryVehicle,TeamNum)
VERIFY_CLASS_SIZE_NODIE(UUTActorFactoryVehicle)
VERIFY_CLASS_SIZE_NODIE(AUTAmmo_BioRifle)
VERIFY_CLASS_OFFSET_NODIE(A,UTAmmoPickupFactory,AmmoAmount)
VERIFY_CLASS_OFFSET_NODIE(A,UTAmmoPickupFactory,TransformedClass)
VERIFY_CLASS_SIZE_NODIE(AUTAmmoPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTArmorPickupFactory,ShieldAmount)
VERIFY_CLASS_OFFSET_NODIE(A,UTArmorPickupFactory,ParticleEffects)
VERIFY_CLASS_SIZE_NODIE(AUTArmorPickupFactory)
VERIFY_CLASS_SIZE_NODIE(AUTArmorPickupLight)
VERIFY_CLASS_OFFSET_NODIE(A,UTAvoidMarker,TeamNum)
VERIFY_CLASS_OFFSET_NODIE(A,UTAvoidMarker,CollisionCylinder)
VERIFY_CLASS_SIZE_NODIE(AUTAvoidMarker)
VERIFY_CLASS_OFFSET_NODIE(A,UTBeamWeapon,BeamTemplate)
VERIFY_CLASS_OFFSET_NODIE(A,UTBeamWeapon,BeamWeaponFireWaveForm)
VERIFY_CLASS_SIZE_NODIE(AUTBeamWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,UTCarriedObject,LastAnchor)
VERIFY_CLASS_OFFSET_NODIE(A,UTCarriedObject,PickUpWaveForm)
VERIFY_CLASS_SIZE_NODIE(AUTCarriedObject)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharFamilyAssetStore,FamilyID)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharFamilyAssetStore,StartLoadTime)
VERIFY_CLASS_SIZE_NODIE(UUTCharFamilyAssetStore)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharInfo,Characters)
VERIFY_CLASS_OFFSET_NODIE(U,UTCharInfo,PortraitBackgroundMesh)
VERIFY_CLASS_SIZE_NODIE(UUTCharInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTCheatManager,LMC)
VERIFY_CLASS_OFFSET_NODIE(U,UTCheatManager,RecogObject)
VERIFY_CLASS_SIZE_NODIE(UUTCheatManager)
VERIFY_CLASS_OFFSET_NODIE(A,UTConsolePlayerController,ProfileSettingToUE3BindingMapping360)
VERIFY_CLASS_OFFSET_NODIE(A,UTConsolePlayerController,ProfileSettingToUE3BindingMappingPS3)
VERIFY_CLASS_SIZE_NODIE(AUTConsolePlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTConsolePlayerInput,SensitivityMultiplier)
VERIFY_CLASS_OFFSET_NODIE(U,UTConsolePlayerInput,HoverBoardPitchMultiplier)
VERIFY_CLASS_SIZE_NODIE(UUTConsolePlayerInput)
VERIFY_CLASS_OFFSET_NODIE(A,UTCTFFlag,RespawnEffect)
VERIFY_CLASS_OFFSET_NODIE(A,UTCTFFlag,LastLocationPingTime)
VERIFY_CLASS_SIZE_NODIE(AUTCTFFlag)
VERIFY_CLASS_OFFSET_NODIE(U,UTDataStore_OnlineStats,CurrentDetailsReadType)
VERIFY_CLASS_OFFSET_NODIE(U,UTDataStore_OnlineStats,__OnStatsReadComplete__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTDataStore_OnlineStats)
VERIFY_CLASS_OFFSET_NODIE(A,UTDefensePoint,CurrentUser)
VERIFY_CLASS_OFFSET_NODIE(A,UTDefensePoint,TeamSprites)
VERIFY_CLASS_SIZE_NODIE(AUTDefensePoint)
VERIFY_CLASS_OFFSET_NODIE(A,UTDroppedPickup,YawRotationRate)
VERIFY_CLASS_OFFSET_NODIE(A,UTDroppedPickup,MyLightEnvironment)
VERIFY_CLASS_SIZE_NODIE(AUTDroppedPickup)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitCameraEffect,DistFromCamera)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitCameraEffect,Cam)
VERIFY_CLASS_SIZE_NODIE(AUTEmitCameraEffect)
VERIFY_CLASS_SIZE_NODIE(AUTEmitter)
VERIFY_CLASS_OFFSET_NODIE(A,UTEmitterPool,RelativeExplosionLights)
VERIFY_CLASS_SIZE_NODIE(AUTEmitterPool)
VERIFY_CLASS_OFFSET_NODIE(A,UTEntryPlayerController,EntryPostProcessChain)
VERIFY_CLASS_OFFSET_NODIE(A,UTEntryPlayerController,OldPlayer)
VERIFY_CLASS_SIZE_NODIE(AUTEntryPlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTExplosionLight,HighDetailFrameTime)
VERIFY_CLASS_OFFSET_NODIE(U,UTExplosionLight,__OnLightFinished__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTExplosionLight)
VERIFY_CLASS_OFFSET_NODIE(U,UTFamilyInfo,DefaultHeadPortrait)
VERIFY_CLASS_OFFSET_NODIE(U,UTFamilyInfo,BaseTranslationOffset)
VERIFY_CLASS_SIZE_NODIE(UUTFamilyInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTGame,Acronym)
VERIFY_CLASS_OFFSET_NODIE(A,UTGame,MaxHeroCount)
VERIFY_CLASS_SIZE_NODIE(AUTGame)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameObjective,DefenderTeamIndex)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameObjective,AttackLinearColor)
VERIFY_CLASS_SIZE_NODIE(AUTGameObjective)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameReplicationInfo,WeaponBerserk)
VERIFY_CLASS_OFFSET_NODIE(A,UTGameReplicationInfo,LastUsedMidgameTab)
VERIFY_CLASS_SIZE_NODIE(AUTGameReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTGameSettingsCommon,MaxPlayers)
VERIFY_CLASS_OFFSET_NODIE(U,UTGameSettingsCommon,MinNetPlayers)
VERIFY_CLASS_SIZE_NODIE(UUTGameSettingsCommon)
VERIFY_CLASS_OFFSET_NODIE(U,UTGameViewportClient,LevelActionMessages)
VERIFY_CLASS_OFFSET_NODIE(U,UTGameViewportClient,LoadingScreenHintMessageFont)
VERIFY_CLASS_SIZE_NODIE(UUTGameViewportClient)
VERIFY_CLASS_OFFSET_NODIE(A,UTHealthPickupFactory,HealingAmount)
VERIFY_CLASS_SIZE_NODIE(AUTHealthPickupFactory)
VERIFY_CLASS_SIZE_NODIE(AUTHealthPickupLight)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoldSpot,HoldVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoldSpot,LastAnchor)
VERIFY_CLASS_SIZE_NODIE(AUTHoldSpot)
VERIFY_CLASS_SIZE_NODIE(AUTInventory)
VERIFY_CLASS_OFFSET_NODIE(A,UTInventoryManager,AmmoStorage)
VERIFY_CLASS_OFFSET_NODIE(A,UTInventoryManager,LastAdjustWeaponTime)
VERIFY_CLASS_SIZE_NODIE(AUTInventoryManager)
VERIFY_CLASS_OFFSET_NODIE(A,UTItemPickupFactory,PickupSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTItemPickupFactory,RespawnTime)
VERIFY_CLASS_SIZE_NODIE(AUTItemPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTJumpPad,JumpVelocity)
VERIFY_CLASS_OFFSET_NODIE(A,UTJumpPad,JumpAmbientSound)
VERIFY_CLASS_SIZE_NODIE(AUTJumpPad)
VERIFY_CLASS_SIZE_NODIE(UUTJumpPadReachSpec)
VERIFY_CLASS_OFFSET_NODIE(A,UTKActor,Health)
VERIFY_CLASS_OFFSET_NODIE(A,UTKActor,__OnEncroach__Delegate)
VERIFY_CLASS_SIZE_NODIE(AUTKActor)
VERIFY_CLASS_SIZE_NODIE(UUTLeaderboardSettings)
VERIFY_CLASS_OFFSET_NODIE(U,UTLeaderboardWriteBase,PureViewIds)
VERIFY_CLASS_OFFSET_NODIE(U,UTLeaderboardWriteBase,StatNameToStatIdMapping)
VERIFY_CLASS_SIZE_NODIE(UUTLeaderboardWriteBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTLinkedReplicationInfo,NextReplicationInfo)
VERIFY_CLASS_SIZE_NODIE(AUTLinkedReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapInfo,RecommendedPlayersMin)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapInfo,Sensors)
VERIFY_CLASS_SIZE_NODIE(UUTMapInfo)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapMusicInfo,MapMusic)
VERIFY_CLASS_OFFSET_NODIE(U,UTMapMusicInfo,MapStingers)
VERIFY_CLASS_SIZE_NODIE(UUTMapMusicInfo)
VERIFY_CLASS_SIZE_NODIE(AUTMutator)
VERIFY_CLASS_OFFSET_NODIE(U,UTParticleSystemComponent,FOV)
VERIFY_CLASS_OFFSET_NODIE(U,UTParticleSystemComponent,SavedScale3D)
VERIFY_CLASS_SIZE_NODIE(UUTParticleSystemComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTPawn,UnfeignFailedCount)
VERIFY_CLASS_OFFSET_NODIE(A,UTPawn,DefaultHeight)
VERIFY_CLASS_SIZE_NODIE(AUTPawn)
VERIFY_CLASS_OFFSET_NODIE(U,UTPhysicalMaterialProperty,MaterialType)
VERIFY_CLASS_SIZE_NODIE(UUTPhysicalMaterialProperty)
VERIFY_CLASS_OFFSET_NODIE(A,UTPickupFactory,YawRotationRate)
VERIFY_CLASS_OFFSET_NODIE(A,UTPickupFactory,PickUpWaveForm)
VERIFY_CLASS_SIZE_NODIE(AUTPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(A,UTPickupFactory_HealthVial,AdjacentVials)
VERIFY_CLASS_SIZE_NODIE(AUTPickupFactory_HealthVial)
VERIFY_CLASS_SIZE_NODIE(AUTPickupLight)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerController,IdentifiedTeam)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerController,HeartBeatSoundComponent)
VERIFY_CLASS_SIZE_NODIE(AUTPlayerController)
VERIFY_CLASS_OFFSET_NODIE(U,UTPlayerInput,LastDuckTime)
VERIFY_CLASS_OFFSET_NODIE(U,UTPlayerInput,ForcedDoubleClick)
VERIFY_CLASS_SIZE_NODIE(UUTPlayerInput)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerReplicationInfo,spree)
VERIFY_CLASS_OFFSET_NODIE(A,UTPlayerReplicationInfo,LastHeroChargeTime)
VERIFY_CLASS_SIZE_NODIE(AUTPlayerReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTPowerupPickupFactory,Spinner)
VERIFY_CLASS_OFFSET_NODIE(A,UTPowerupPickupFactory,ParticleEffects)
VERIFY_CLASS_SIZE_NODIE(AUTPowerupPickupFactory)
VERIFY_CLASS_OFFSET_NODIE(U,UTProfileSettings,DigitalButtonActionsToCommandMapping)
VERIFY_CLASS_OFFSET_NODIE(U,UTProfileSettings,CampaignBoneNames)
VERIFY_CLASS_SIZE_NODIE(UUTProfileSettings)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_FlakShard,Bounces)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_FlakShard,ShortRangeKillAnim)
VERIFY_CLASS_SIZE_NODIE(AUTProj_FlakShard)
VERIFY_CLASS_SIZE_NODIE(AUTProj_Grenade)
VERIFY_CLASS_SIZE_NODIE(AUTProj_Rocket)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScorpionGlob_Base,LastTraceTime)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_ScorpionGlob_Base,FearSpot)
VERIFY_CLASS_SIZE_NODIE(AUTProj_ScorpionGlob_Base)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_SeekingRocket,Seeking)
VERIFY_CLASS_OFFSET_NODIE(A,UTProj_SeekingRocket,BaseTrackingStrength)
VERIFY_CLASS_SIZE_NODIE(AUTProj_SeekingRocket)
VERIFY_CLASS_OFFSET_NODIE(A,UTProjectile,AmbientSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTProjectile,InstigatorBaseVehicle)
VERIFY_CLASS_SIZE_NODIE(AUTProjectile)
VERIFY_CLASS_OFFSET_NODIE(A,UTReplicatedEmitter,EmitterTemplate)
VERIFY_CLASS_OFFSET_NODIE(A,UTReplicatedEmitter,ServerLifeSpan)
VERIFY_CLASS_SIZE_NODIE(AUTReplicatedEmitter)
VERIFY_CLASS_OFFSET_NODIE(A,UTScout,MaxDoubleJumpHeight)
VERIFY_CLASS_OFFSET_NODIE(A,UTScout,SizePersonFindName)
VERIFY_CLASS_SIZE_NODIE(AUTScout)
VERIFY_CLASS_OFFSET_NODIE(U,UTSkeletalMeshComponent,FOV)
VERIFY_CLASS_OFFSET_NODIE(U,UTSkeletalMeshComponent,ClearStreamingTime)
VERIFY_CLASS_SIZE_NODIE(UUTSkeletalMeshComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTSlowVolume,ScalingFactor)
VERIFY_CLASS_OFFSET_NODIE(A,UTSlowVolume,InsideCameraEffect)
VERIFY_CLASS_SIZE_NODIE(AUTSlowVolume)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamAI,Team)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamAI,ImportantVehicleFactories)
VERIFY_CLASS_SIZE_NODIE(AUTTeamAI)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamInfo,DesiredTeamSize)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamInfo,TeamColorNames)
VERIFY_CLASS_SIZE_NODIE(AUTTeamInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamPlayerStart,TeamNumber)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeamPlayerStart,TeamSprites)
VERIFY_CLASS_SIZE_NODIE(AUTTeamPlayerStart)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeleporterBase,PortalCaptureComponent)
VERIFY_CLASS_OFFSET_NODIE(A,UTTeleporterBase,TeleportingSound)
VERIFY_CLASS_SIZE_NODIE(AUTTeleporterBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTTimedPowerup,TimeRemaining)
VERIFY_CLASS_OFFSET_NODIE(A,UTTimedPowerup,PP_Scene_Desaturation)
VERIFY_CLASS_SIZE_NODIE(AUTTimedPowerup)
VERIFY_CLASS_SIZE_NODIE(UUTTrajectoryReachSpec)
VERIFY_CLASS_OFFSET_NODIE(A,UTTranslocatorDest,StartPoints)
VERIFY_CLASS_SIZE_NODIE(AUTTranslocatorDest)
VERIFY_CLASS_OFFSET_NODIE(U,UTTranslocatorReachSpec,CachedVelocity)
VERIFY_CLASS_OFFSET_NODIE(U,UTTranslocatorReachSpec,OriginalGravityZ)
VERIFY_CLASS_SIZE_NODIE(UUTTranslocatorReachSpec)
VERIFY_CLASS_SIZE_NODIE(UUTTypes)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIDataStore_Content,InstalledContentProvider)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIDataStore_Content,AvailableContentProvider)
VERIFY_CLASS_SIZE_NODIE(UUTUIDataStore_Content)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteCollector,Votes)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteCollector,WinningIndex)
VERIFY_CLASS_SIZE_NODIE(AUTVoteCollector)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteReplicationInfo,Collector)
VERIFY_CLASS_OFFSET_NODIE(A,UTVoteReplicationInfo,LeadingMap)
VERIFY_CLASS_SIZE_NODIE(AUTVoteReplicationInfo)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_FlakCannon,SpreadDist)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_FlakCannon,CenterShardClass)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_FlakCannon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_ImpactHammer,MinDamage)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_ImpactHammer,ImpactKillCameraAnim)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_ImpactHammer)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_LinkGun,LinkedTo)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_LinkGun,HighPowerMuzzleFlashTemplate)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_LinkGun)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_RocketLauncher,LoadedFireMode)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeap_RocketLauncher,WeaponAltFireLaunchEnd)
VERIFY_CLASS_SIZE_NODIE(AUTWeap_RocketLauncher)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeapon,AmmoPickupClass)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeapon,AdditionalHintString)
VERIFY_CLASS_SIZE_NODIE(AUTWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponLocker,Weapons)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponLocker,NextProximityCheckTime)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponLocker)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponLockerPickupLight)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPickupFactory,WeaponPickupClass)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPickupFactory,Customers)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponPickupFactory)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponPickupLight)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponShield)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
