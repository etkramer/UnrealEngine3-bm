/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_UTGAME_VEHICLE_ENUMS
#define INCLUDED_UTGAME_VEHICLE_ENUMS 1

enum ETeamSpawning
{
    TS_All                  =0,
    TS_AxonOnly             =1,
    TS_NecrisOnly           =2,
    TS_MAX                  =3,
};
enum EAIVehiclePurpose
{
    AIP_Offensive           =0,
    AIP_Defensive           =1,
    AIP_Any                 =2,
    AIP_MAX                 =3,
};

#endif // !INCLUDED_UTGAME_VEHICLE_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName UTGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(ActivateRocketBoosters)
AUTOGENERATE_NAME(ApplyMorphHeal)
AUTOGENERATE_NAME(BelowSpeedThreshold)
AUTOGENERATE_NAME(BladeHit)
AUTOGENERATE_NAME(BoardJumpEffect)
AUTOGENERATE_NAME(BreakTowLink)
AUTOGENERATE_NAME(CheckReset)
AUTOGENERATE_NAME(DeactivateRocketBoosters)
AUTOGENERATE_NAME(DisplayWeaponBar)
AUTOGENERATE_NAME(EnableFullSteering)
AUTOGENERATE_NAME(GetBarrelLocationAndRotation)
AUTOGENERATE_NAME(GetDesiredAimPoint)
AUTOGENERATE_NAME(HideBoard)
AUTOGENERATE_NAME(HoverboardLanded)
AUTOGENERATE_NAME(IncomingMissile)
AUTOGENERATE_NAME(IsAimCorrect)
AUTOGENERATE_NAME(JumpOutCheck)
AUTOGENERATE_NAME(LockOnWarning)
AUTOGENERATE_NAME(MantaDuckEffect)
AUTOGENERATE_NAME(MantaJumpEffect)
AUTOGENERATE_NAME(MorphTargetDestroyed)
AUTOGENERATE_NAME(OnPropertyChange)
AUTOGENERATE_NAME(PlayTakeHitEffects)
AUTOGENERATE_NAME(RBPenetrationDestroy)
AUTOGENERATE_NAME(ReceivedHealthChange)
AUTOGENERATE_NAME(RequestDodge)
AUTOGENERATE_NAME(SelfDestruct)
AUTOGENERATE_NAME(SetKeyVehicle)
AUTOGENERATE_NAME(SetParticleEffect)
AUTOGENERATE_NAME(SetTeamNum)
AUTOGENERATE_NAME(SpawnRoosterEffect)
AUTOGENERATE_NAME(SpawnTowCableEffects)
AUTOGENERATE_NAME(SpawnVehicle)
AUTOGENERATE_NAME(TakeFireDamage)
AUTOGENERATE_NAME(TakeWaterDamage)
AUTOGENERATE_NAME(ToggleAnimBoard)

#ifndef NAMES_ONLY

#ifndef INCLUDED_UTGAME_VEHICLE_CLASSES
#define INCLUDED_UTGAME_VEHICLE_CLASSES 1

struct UTVehicleWeapon_eventIsAimCorrect_Parms
{
    UBOOL ReturnValue;
    UTVehicleWeapon_eventIsAimCorrect_Parms(EEventParm)
    {
    }
};
struct UTVehicleWeapon_eventGetDesiredAimPoint_Parms
{
    class AActor* TargetActor;
    FVector ReturnValue;
    UTVehicleWeapon_eventGetDesiredAimPoint_Parms(EEventParm)
    {
    }
};
class AUTVehicleWeapon : public AUTWeapon
{
public:
    //## BEGIN PROPS UTVehicleWeapon
    INT SeatIndex;
    class AUTVehicle* MyVehicle;
    TArrayNoInit<FName> FireTriggerTags;
    TArrayNoInit<FName> AltFireTriggerTags;
    TArrayNoInit<struct FMaterialImpactEffect> ImpactEffects;
    TArrayNoInit<struct FMaterialImpactEffect> AltImpactEffects;
    struct FMaterialImpactEffect DefaultImpactEffect;
    struct FMaterialImpactEffect DefaultAltImpactEffect;
    class USoundCue* BulletWhip;
    FLOAT LastCorrectAimTime;
    FLOAT LastInCorrectAimTime;
    FLOAT CurrentCrosshairScaling;
    FLOAT AimTraceRange;
    TArrayNoInit<class AActor*> AimingTraceIgnoredActors;
    FLOAT MaxFinalAimAdjustment;
    BITFIELD bPlaySoundFromSocket:1;
    BITFIELD bCurrentlyZoomed:1;
    BITFIELD bIgnoreSocketPitchRotation:1;
    BITFIELD bIgnoreDownwardPitch:1;
    BITFIELD bDebugTurret:1;
    class UClass* VehicleClass;
    //## END PROPS UTVehicleWeapon

    UBOOL eventIsAimCorrect()
    {
        UTVehicleWeapon_eventIsAimCorrect_Parms Parms(EC_EventParm);
        Parms.ReturnValue=FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_IsAimCorrect),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetDesiredAimPoint(class AActor** TargetActor=NULL)
    {
        UTVehicleWeapon_eventGetDesiredAimPoint_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        if(TargetActor){Parms.TargetActor=*TargetActor;}
        ProcessEvent(FindFunctionChecked(UTGAME_GetDesiredAimPoint),&Parms);
        if ( TargetActor ) { *TargetActor=Parms.TargetActor; }
        return Parms.ReturnValue;
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleWeapon,AUTWeapon,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
};

class AUTVWeap_TowCable : public AUTVehicleWeapon
{
public:
    //## BEGIN PROPS UTVWeap_TowCable
    BITFIELD bLinked:1;
    FLOAT LastLinkStartTime;
    class AUTVehicle_Hoverboard* MyHoverboard;
    class AUTVehicle* PotentialTowTruck;
    class USoundCue* FireFailSound;
    FLOAT MaxAttachRange;
    FLOAT CrossScaler;
    FLOAT CrossScaleTime;
    class AUTVehicle* LastPotentialTowTruck;
    FName LastPointName;
    class UTexture2D* CrossHairTexture;
    FLOAT LastLinkHintTime;
    //## END PROPS UTVWeap_TowCable

    DECLARE_CLASS(AUTVWeap_TowCable,AUTVehicleWeapon,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTVehicleFactory_eventSpawnVehicle_Parms
{
    UTVehicleFactory_eventSpawnVehicle_Parms(EEventParm)
    {
    }
};
class AUTVehicleFactory : public ANavigationPoint
{
public:
    //## BEGIN PROPS UTVehicleFactory
    FStringNoInit VehicleClassPath;
    class UClass* VehicleClass;
    class AUTVehicle* ChildVehicle;
    FLOAT SpawnZOffset;
    FLOAT RespawnProgress;
    FLOAT RespawnRateModifier;
    BITFIELD bMayReverseSpawnDirection:1;
    BITFIELD bStartNeutral:1;
    BITFIELD bHasLockedVehicle:1;
    BITFIELD bDisabled:1;
    BITFIELD bReplicateChildVehicle:1;
    BITFIELD bKeyVehicle:1;
    BITFIELD bForceAvoidReversing:1;
    BITFIELD bIgnoreOnPS3:1;
    class AUTGameObjective* ReverseObjective;
    INT TeamNum;
    FVector HUDLocation;
    TArrayNoInit<FRotator> InitialGunRotations;
    BYTE TeamSpawningControl;
    //## END PROPS UTVehicleFactory

    virtual void SetHUDLocation(FVector NewHUDLocation);
    virtual BYTE GetTeamNum();
    void eventSpawnVehicle()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnVehicle),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleFactory,ANavigationPoint,0|CLASS_NativeReplication,UTGame)
	virtual void CheckForErrors();
	virtual void TickSpecial( FLOAT DeltaSeconds );
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual void Spawned();
	virtual void PostLoad();
	virtual void StripData(UE3::EPlatformType TargetPlatform);
};

struct UTVehicleBase_eventHoldGameObject_Parms
{
    class AUTCarriedObject* GameObj;
    UTVehicleBase_eventHoldGameObject_Parms(EEventParm)
    {
    }
};
class AUTVehicleBase : public ASVehicle
{
public:
    //## BEGIN PROPS UTVehicleBase
    BITFIELD bShouldEject:1;
    class UTexture2D* HUDIcons;
    struct FTextureCoordinates HudCoords;
    //## END PROPS UTVehicleBase

    void eventHoldGameObject(class AUTCarriedObject* GameObj)
    {
        UTVehicleBase_eventHoldGameObject_Parms Parms(EC_EventParm);
        Parms.GameObj=GameObj;
        ProcessEvent(FindFunctionChecked(UTGAME_HoldGameObject),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicleBase,ASVehicle,0|CLASS_Config,UTGame)
	virtual UBOOL ReachedDesiredRotation();
};

struct FWeaponEffectInfo
{
    FName SocketName;
    FVector Offset;
    FVector Scale3D;
    class UStaticMeshComponent* Effect;

    /** Constructors */
    FWeaponEffectInfo() {}
    FWeaponEffectInfo(EEventParm)
    {
        appMemzero(this, sizeof(FWeaponEffectInfo));
    }
};

struct FVehicleSeat
{
    class APawn* StoragePawn;
    class AVehicle* SeatPawn;
    class UClass* GunClass;
    class AUTVehicleWeapon* Gun;
    TArrayNoInit<FName> GunSocket;
    TArrayNoInit<FName> GunPivotPoints;
    INT BarrelIndex;
    FStringNoInit TurretVarPrefix;
    TArrayNoInit<struct FWeaponEffectInfo> WeaponEffects;
    FName WeaponRotationName;
    FName FlashLocationName;
    FName FlashCountName;
    FName FiringModeName;
    FPointer WeaponRotationProperty;
    FPointer FlashLocationProperty;
    FPointer FlashCountProperty;
    FPointer FiringModeProperty;
    FRotator LastWeaponRotation;
    TArrayNoInit<FName> TurretControls;
    FVector AimPoint;
    class AActor* AimTarget;
    FLOAT PivotFireOffsetZ;
    BITFIELD bDisableOffsetZAdjust:1;
    FName CameraTag;
    FVector CameraBaseOffset;
    FVector CameraSafeOffset;
    FLOAT CameraOffset;
    FLOAT CameraEyeHeight;
    FLOAT ViewPitchMin;
    FLOAT ViewPitchMax;
    BITFIELD bSeatVisible:1;
    FName SeatBone;
    FVector SeatOffset;
    FRotator SeatRotation;
    FName SeatSocket;
    class UClass* MuzzleFlashLightClass;
    class UUTExplosionLight* MuzzleFlashLight;
    class UClass* ImpactFlashLightClass;
    FLOAT DriverDamageMult;
    class UAudioComponent* SeatMotionAudio;
    class AVehicleMovementEffect* SeatMovementEffect;
    FVector2D SeatIconPOS;

    /** Constructors */
    FVehicleSeat() {}
    FVehicleSeat(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleSeat));
    }
};

struct FVehicleEffect
{
    FName EffectStartTag;
    FName EffectEndTag;
    BITFIELD bRestartRunning:1;
    BITFIELD bHighDetailOnly:1;
    class UParticleSystem* EffectTemplate;
    class UParticleSystem* EffectTemplate_Blue;
    FName EffectSocket;
    class UParticleSystemComponent* EffectRef;

    /** Constructors */
    FVehicleEffect() {}
    FVehicleEffect(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleEffect));
    }
};

struct FVehicleAnim
{
    FName AnimTag;
    TArrayNoInit<FName> AnimSeqs;
    FLOAT AnimRate;
    BITFIELD bAnimLoopLastSeq:1;
    FName AnimPlayerName;

    /** Constructors */
    FVehicleAnim() {}
    FVehicleAnim(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleAnim));
    }
};

struct FVehicleSound
{
    FName SoundStartTag;
    FName SoundEndTag;
    class USoundCue* SoundTemplate;
    class UAudioComponent* SoundRef;

    /** Constructors */
    FVehicleSound() {}
    FVehicleSound(EEventParm)
    {
        appMemzero(this, sizeof(FVehicleSound));
    }
};

struct FFDamageMorphTargets
{
    FName MorphNodeName;
    class UMorphNodeWeight* MorphNode;
    FName LinkedMorphNodeName;
    INT LinkedMorphNodeIndex;
    FName InfluenceBone;
    INT Health;
    TArrayNoInit<FName> DamagePropNames;

    /** Constructors */
    FFDamageMorphTargets() {}
    FFDamageMorphTargets(EEventParm)
    {
        appMemzero(this, sizeof(FFDamageMorphTargets));
    }
};

struct FDamageParamScales
{
    FName DamageParamName;
    FLOAT Scale;

    /** Constructors */
    FDamageParamScales() {}
    FDamageParamScales(EEventParm)
    {
        appMemzero(this, sizeof(FDamageParamScales));
    }
};

struct FBurnOutDatum
{
    class UMaterialInstanceTimeVarying* MITV;
    FLOAT CurrValue;

    /** Constructors */
    FBurnOutDatum() {}
    FBurnOutDatum(EEventParm)
    {
        appMemzero(this, sizeof(FBurnOutDatum));
    }
};

struct FMaterialList
{
    TArrayNoInit<class UMaterialInterface*> Materials;

    /** Constructors */
    FMaterialList() {}
    FMaterialList(EEventParm)
    {
        appMemzero(this, sizeof(FMaterialList));
    }
};

struct FTimePosition
{
    FVector Position;
    FLOAT Time;

    /** Constructors */
    FTimePosition() {}
    FTimePosition(EEventParm)
    {
        appMemzero(this, sizeof(FTimePosition));
    }
};

#define UCONST_UTVEHICLE_UNSET_TEAM 128

struct UTVehicle_eventMorphTargetDestroyed_Parms
{
    INT MorphNodeIndex;
    UTVehicle_eventMorphTargetDestroyed_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventApplyMorphHeal_Parms
{
    INT Amount;
    UTVehicle_eventApplyMorphHeal_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventReceivedHealthChange_Parms
{
    UTVehicle_eventReceivedHealthChange_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventRBPenetrationDestroy_Parms
{
    UTVehicle_eventRBPenetrationDestroy_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventOnPropertyChange_Parms
{
    FName PropName;
    UTVehicle_eventOnPropertyChange_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventGetBarrelLocationAndRotation_Parms
{
    INT SeatIndex;
    FVector SocketLocation;
    FRotator SocketRotation;
    UTVehicle_eventGetBarrelLocationAndRotation_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventGetHomingTarget_Parms
{
    class AUTProjectile* Seeker;
    class AController* InstigatedBy;
    class AActor* ReturnValue;
    UTVehicle_eventGetHomingTarget_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventPlayTakeHitEffects_Parms
{
    UTVehicle_eventPlayTakeHitEffects_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventCheckReset_Parms
{
    UTVehicle_eventCheckReset_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventLockOnWarning_Parms
{
    class AUTProjectile* IncomingMissile;
    UTVehicle_eventLockOnWarning_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventIncomingMissile_Parms
{
    class AProjectile* P;
    UTVehicle_eventIncomingMissile_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventSetTeamNum_Parms
{
    BYTE T;
    UTVehicle_eventSetTeamNum_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventSetKeyVehicle_Parms
{
    UTVehicle_eventSetKeyVehicle_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventTakeFireDamage_Parms
{
    UTVehicle_eventTakeFireDamage_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventTakeWaterDamage_Parms
{
    UTVehicle_eventTakeWaterDamage_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventJumpOutCheck_Parms
{
    UTVehicle_eventJumpOutCheck_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventDisplayWeaponBar_Parms
{
    class UCanvas* Canvas;
    class AUTHUD* HUD;
    UTVehicle_eventDisplayWeaponBar_Parms(EEventParm)
    {
    }
};
struct UTVehicle_eventSelfDestruct_Parms
{
    class AActor* ImpactedActor;
    UTVehicle_eventSelfDestruct_Parms(EEventParm)
    {
    }
};
class AUTVehicle : public AUTVehicleBase
{
public:
    //## BEGIN PROPS UTVehicle
    BITFIELD bDriverHoldsFlag:1;
    BITFIELD bCanCarryFlag:1;
    BITFIELD bTeamLocked:1;
    BITFIELD bValidLinkTarget:1;
    BITFIELD bEnteringUnlocks:1;
    BITFIELD bHasCustomEntryRadius:1;
    BITFIELD bKeyVehicle:1;
    BITFIELD bHasTowCable:1;
    BITFIELD bUseAlternatePaths:1;
    BITFIELD bEjectPassengersWhenFlipped:1;
    BITFIELD bMustBeUpright:1;
    BITFIELD bStickDeflectionThrottle:1;
    BITFIELD bShouldAutoCenterViewPitch:1;
    BITFIELD bHasWeaponBar:1;
    BITFIELD bNeverReset:1;
    BITFIELD bEjectKilledBodies:1;
    BITFIELD bLightArmor:1;
    BITFIELD bShouldLeaveForCombat:1;
    BITFIELD bDrawHealthOnHUD:1;
    BITFIELD bDriverCastsShadow:1;
    BITFIELD bHasBeenDriven:1;
    BITFIELD bDropDetailWhenDriving:1;
    BITFIELD bFrontalCollision:1;
    BITFIELD bFrontalCollisionWithFixed:1;
    BITFIELD bLookSteerOnNormalControls:1;
    BITFIELD bLookSteerOnSimpleControls:1;
    BITFIELD bUsingLookSteer:1;
    BITFIELD bAllowedExit:1;
    BITFIELD bFindGroundExit:1;
    BITFIELD bHomingTarget:1;
    BITFIELD bRequestedEntryWithFlag:1;
    BITFIELD bTakeWaterDamageWhileDriving:1;
    BITFIELD bInitializedVehicleEffects:1;
    BITFIELD bRagdollDriverOnDarkwalkerHorn:1;
    BITFIELD bDeadVehicle:1;
    BITFIELD bHasTurretExplosion:1;
    BITFIELD bIsBurning:1;
    BITFIELD bIsScraping:1;
    BITFIELD bPostRenderTraceSucceeded:1;
    BITFIELD bShowLocked:1;
    BITFIELD bPlayingSpawnEffect:1;
    BITFIELD bReducedFallingCollisionDamage:1;
    BITFIELD bIsInDestroyablePenetration:1;
    BITFIELD bRotateCameraUnderVehicle:1;
    BITFIELD bNoZSmoothing:1;
    BITFIELD bLimitCameraZLookingUp:1;
    BITFIELD bNoFollowJumpZ:1;
    BITFIELD bFixedCamZ:1;
    BITFIELD bCameraNeverHidesVehicle:1;
    BITFIELD bStopDeathCamera:1;
    BITFIELD bIsConsoleTurning:1;
    BITFIELD bAcceptTurretJump:1;
    BITFIELD bShowDamageDebug:1;
    BITFIELD bStealthVehicle:1;
    BITFIELD bIsDisabled:1;
    BITFIELD bIsTowingHoverboard:1;
    BITFIELD bAllowTowFromAllDirections:1;
    BITFIELD bNoZDampingInAir:1;
    BITFIELD bNoZDamping:1;
    BITFIELD bHasEnemyVehicleSound:1;
    BITFIELD bIsNecrisVehicle:1;
    BITFIELD bSpectatedView:1;
    class USoundCue* VehicleLockedSound;
    BYTE AIPurpose;
    BYTE Team;
    BYTE LinkedToCount;
    class AActor* NoPassengerObjective;
    FLOAT DeflectionReverseThresh;
    class UPhysicalMaterial* DrivingPhysicalMaterial;
    class UPhysicalMaterial* DefaultPhysicalMaterial;
    FLOAT LastCheckUpsideDownTime;
    FLOAT FlippedCount;
    class UDynamicLightEnvironmentComponent* LightEnvironment;
    FLOAT VehicleLostTime;
    FLOAT PlayerStartTime;
    FLOAT RespawnTime;
    FLOAT InitialSpawnDelay;
    FLOAT LinkHealMult;
    class UAudioComponent* LinkedToAudio;
    class USoundCue* LinkedToCue;
    class USoundCue* LinkedEndSound;
    FLOAT MaxDesireability;
    FLOAT ObjectiveGetOutDist;
    TArrayNoInit<class USoundCue*> HornSounds;
    FLOAT HornAIRadius;
    FLOAT LastHornTime;
    INT HornIndex;
    FLOAT LeftStickDirDeadZone;
    FLOAT LookSteerSensitivity;
    FLOAT LookSteerDamping;
    FLOAT LookSteerDeadZone;
    FLOAT ConsoleSteerScale;
    class USoundCue* LockedOnSound;
    class UClass* RanOverDamageType;
    FLOAT MinRunOverSpeed;
    class USoundCue* RanOverSound;
    INT StolenAnnouncementIndex;
    class USoundCue* StolenSound;
    FLOAT LastRunOverWarningTime;
    FLOAT MinRunOverWarningAim;
    class AUTVehicle* NextVehicle;
    class AUTVehicleFactory* ParentFactory;
    class AUTBot* Reservation;
    FLOAT ResetTime;
    FStringNoInit VehiclePositionString;
    FStringNoInit VehicleNameString;
    struct FObjectiveAnnouncementInfo NeedToPickUpAnnouncement;
    FLOAT TeamBeaconMaxDist;
    FLOAT TeamBeaconPlayerInfoMaxDist;
    FLOAT HUDExtent;
    FLOAT WaterDamage;
    FLOAT AccumulatedWaterDamage;
    class UClass* VehicleDrowningDamType;
    class UClass* ExplosionLightClass;
    FLOAT MaxExplosionLightDistance;
    FRotator WeaponRotation;
    TArrayNoInit<struct FVehicleSeat> Seats;
    INT SeatMask;
    TArrayNoInit<struct FVehicleEffect> VehicleEffects;
    class AEmitter* DeathExplosion;
    FLOAT TimeTilSecondaryVehicleExplosion;
    TArrayNoInit<struct FVehicleAnim> VehicleAnims;
    TArrayNoInit<struct FVehicleSound> VehicleSounds;
    TArrayNoInit<struct FDamageParamScales> DamageParamScaleLevels;
    TArrayNoInit<struct FFDamageMorphTargets> DamageMorphTargets;
    TArrayNoInit<class UUTSkelControl_Damage*> DamageSkelControls;
    INT ClientHealth;
    class UMaterialInstanceConstant* DamageMaterialInstance[2];
    TArrayNoInit<class UMaterialInterface*> TeamMaterials;
    class UClass* VehiclePieceClass;
    FLOAT DamageSmokeThreshold;
    FLOAT FireDamageThreshold;
    FLOAT FireDamagePerSec;
    FLOAT UpsideDownDamagePerSec;
    FLOAT OccupiedUpsideDownDamagePerSec;
    FLOAT AccruedFireDamage;
    class UClass* ExplosionDamageType;
    class AController* KillerController;
    FLOAT MaxImpactEffectDistance;
    FLOAT MaxFireEffectDistance;
    FLOAT LastJumpOutCheck;
    class UParticleSystem* ExplosionTemplate;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> BigExplosionTemplates;
    class UParticleSystem* SecondaryExplosion;
    FName BigExplosionSocket;
    FLOAT MaxWheelEffectDistSq;
    FName WaterEffectType;
    TArrayNoInit<struct FBurnOutDatum> BurnOutMaterialInstances;
    FLOAT BurnOutTime;
    FLOAT DeadVehicleLifeSpan;
    FLOAT ExplosionDamage;
    FLOAT ExplosionRadius;
    FLOAT ExplosionMomentum;
    FLOAT ExplosionInAirAngVel;
    class UCameraAnim* DeathExplosionShake;
    FLOAT InnerExplosionShakeRadius;
    FLOAT OuterExplosionShakeRadius;
    FName TurretScaleControlName;
    FName TurretSocketName;
    TArrayNoInit<struct FDistanceBasedParticleTemplate> DistanceTurretExplosionTemplates;
    FVector TurretOffset;
    class AUTVehicleDeathPiece* DestroyedTurret;
    class UStaticMesh* DestroyedTurretTemplate;
    FLOAT TurretExplosiveForce;
    class USoundCue* ExplosionSound;
    class USoundCue* ImpactHitSound;
    FLOAT LastDeathImpactTime;
    class USoundCue* LargeChunkImpactSound;
    class USoundCue* MediumChunkImpactSound;
    class USoundCue* SmallChunkImpactSound;
    FLOAT RemainingBurn;
    FName BurnTimeParameterName;
    class UAudioComponent* ScrapeSound;
    class UAudioComponent* TireAudioComp;
    TArrayNoInit<struct FMaterialSoundEffect> TireSoundList;
    FName CurrentTireMaterial;
    FLOAT SpawnRadius;
    FName DrivingAnim;
    class USoundCue* SpawnInSound;
    class USoundCue* SpawnOutSound;
    class USoundCue* BoostPadSound;
    FVector FlagOffset;
    FRotator FlagRotation;
    FName FlagBone;
    FVector HUDLocation;
    FLOAT MapSize;
    struct FTextureCoordinates IconCoords;
    struct FTextureCoordinates FlipToolTipIconCoords;
    struct FTextureCoordinates EnterToolTipIconCoords;
    struct FTextureCoordinates DropFlagIconCoords;
    struct FTextureCoordinates DropOrbIconCoords;
    FLOAT LastPostRenderTraceTime;
    FLOAT ShowLockedMaxDist;
    INT LastHealth;
    FLOAT HealthPulseTime;
    FVector TeamBeaconOffset;
    class AUTPlayerReplicationInfo* PassengerPRI;
    FVector PassengerTeamBeaconOffset;
    TArrayNoInit<class UParticleSystem*> SpawnInTemplates;
    TArrayNoInit<struct FMaterialList> SpawnMaterialLists;
    FName SpawnMaterialParameterName;
    FInterpCurveFloat SpawnMaterialParameterCurve;
    TArrayNoInit<class UMaterialInterface*> OriginalMaterials;
    FLOAT SpawnInTime;
    class UMaterialInterface* BurnOutMaterial[2];
    FLOAT CollisionDamageMult;
    FLOAT LastCollisionDamageTime;
    FLOAT DestroyOnPenetrationThreshold;
    FLOAT DestroyOnPenetrationDuration;
    FLOAT TimeInDestroyablePenetration;
    FLOAT SeatCameraScale;
    FLOAT OldCamPosZ;
    FLOAT CameraSmoothingFactor;
    FLOAT DefaultFOV;
    TArrayNoInit<struct FTimePosition> OldPositions;
    FLOAT CameraLag;
    FVector CameraOffset;
    FLOAT LookForwardDist;
    FLOAT MinCameraDistSq;
    FVector OldCameraPosition;
    TArrayNoInit<class AUTBot*> Trackers;
    struct FTakeHitInfo LastTakeHitInfo;
    FLOAT LastTakeHitTimeout;
    FLOAT DisabledTime;
    FLOAT TimeLastDisabled;
    class UParticleSystem* DisabledTemplate;
    class UParticleSystemComponent* DisabledEffectComponent;
    TArrayNoInit<FName> HoverBoardAttachSockets;
    TArrayNoInit<UBOOL> HoverBoardSocketInUse;
    TArrayNoInit<struct FMaterialParticleEffect> WheelParticleEffects;
    class UStaticMesh* ReferenceMovementMesh;
    FLOAT ExtraReachDownThreshold;
    FLOAT LastEnemyWarningTime;
    TArrayNoInit<class USoundNodeWave*> EnemyVehicleSound;
    TArrayNoInit<class USoundNodeWave*> VehicleDestroyedSound;
    FLOAT HeroBonus;
    //## END PROPS UTVehicle

    virtual FRotator SeatWeaponRotation(INT SeatIndex,FRotator NewRot=FRotator(EC_EventParm),UBOOL bReadValue=FALSE);
    virtual FVector SeatFlashLocation(INT SeatIndex,FVector NewLoc=FVector(EC_EventParm),UBOOL bReadValue=FALSE);
    virtual BYTE SeatFlashCount(INT SeatIndex,BYTE NewCount=0,UBOOL bReadValue=FALSE);
    virtual BYTE SeatFiringMode(INT SeatIndex,BYTE NewFireMode=0,UBOOL bReadValue=FALSE);
    virtual void ForceWeaponRotation(INT SeatIndex,FRotator NewRotation);
    virtual FVector GetSeatPivotPoint(INT SeatIndex);
    virtual INT GetBarrelIndex(INT SeatIndex);
    virtual void SetHUDLocation(FVector NewHUDLocation);
    virtual UBOOL InUseableRange(class AUTPlayerController* PC,FLOAT Dist);
    virtual void NativePostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector CameraPosition,FVector CameraDir);
    virtual BYTE GetTeamNum();
    virtual void InitDamageSkel();
    virtual void UpdateDamageMaterial();
    virtual void ApplyMorphDamage(FVector HitLocation,INT Damage,FVector Momentum);
    virtual class AActor* GetAlternateLockTarget();
    DECLARE_FUNCTION(execSeatWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FRotator,NewRot,FRotator(EC_EventParm));
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(FRotator*)Result=SeatWeaponRotation(SeatIndex,NewRot,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashLocation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT_OPTX(FVector,NewLoc,FVector(EC_EventParm));
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(FVector*)Result=SeatFlashLocation(SeatIndex,NewLoc,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFlashCount)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewCount,0);
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(BYTE*)Result=SeatFlashCount(SeatIndex,NewCount,bReadValue);
    }
    DECLARE_FUNCTION(execSeatFiringMode)
    {
        P_GET_INT(SeatIndex);
        P_GET_BYTE_OPTX(NewFireMode,0);
        P_GET_UBOOL_OPTX(bReadValue,FALSE);
        P_FINISH;
        *(BYTE*)Result=SeatFiringMode(SeatIndex,NewFireMode,bReadValue);
    }
    DECLARE_FUNCTION(execForceWeaponRotation)
    {
        P_GET_INT(SeatIndex);
        P_GET_STRUCT(FRotator,NewRotation);
        P_FINISH;
        ForceWeaponRotation(SeatIndex,NewRotation);
    }
    DECLARE_FUNCTION(execGetSeatPivotPoint)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(FVector*)Result=GetSeatPivotPoint(SeatIndex);
    }
    DECLARE_FUNCTION(execGetBarrelIndex)
    {
        P_GET_INT(SeatIndex);
        P_FINISH;
        *(INT*)Result=GetBarrelIndex(SeatIndex);
    }
    DECLARE_FUNCTION(execIsSeatControllerReplicationViewer);
    DECLARE_FUNCTION(execInUseableRange)
    {
        P_GET_OBJECT(AUTPlayerController,PC);
        P_GET_FLOAT(Dist);
        P_FINISH;
        *(UBOOL*)Result=InUseableRange(PC,Dist);
    }
    DECLARE_FUNCTION(execInitDamageSkel)
    {
        P_FINISH;
        InitDamageSkel();
    }
    DECLARE_FUNCTION(execUpdateDamageMaterial)
    {
        P_FINISH;
        UpdateDamageMaterial();
    }
    DECLARE_FUNCTION(execApplyMorphDamage)
    {
        P_GET_STRUCT(FVector,HitLocation);
        P_GET_INT(Damage);
        P_GET_STRUCT(FVector,Momentum);
        P_FINISH;
        ApplyMorphDamage(HitLocation,Damage,Momentum);
    }
    DECLARE_FUNCTION(execGetAlternateLockTarget)
    {
        P_FINISH;
        *(class AActor**)Result=GetAlternateLockTarget();
    }
    void eventMorphTargetDestroyed(INT MorphNodeIndex)
    {
        UTVehicle_eventMorphTargetDestroyed_Parms Parms(EC_EventParm);
        Parms.MorphNodeIndex=MorphNodeIndex;
        ProcessEvent(FindFunctionChecked(UTGAME_MorphTargetDestroyed),&Parms);
    }
    void eventApplyMorphHeal(INT Amount)
    {
        UTVehicle_eventApplyMorphHeal_Parms Parms(EC_EventParm);
        Parms.Amount=Amount;
        ProcessEvent(FindFunctionChecked(UTGAME_ApplyMorphHeal),&Parms);
    }
    void eventReceivedHealthChange()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ReceivedHealthChange),NULL);
    }
    void eventRBPenetrationDestroy()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_RBPenetrationDestroy),NULL);
    }
    void eventOnPropertyChange(FName PropName)
    {
        UTVehicle_eventOnPropertyChange_Parms Parms(EC_EventParm);
        Parms.PropName=PropName;
        ProcessEvent(FindFunctionChecked(UTGAME_OnPropertyChange),&Parms);
    }
    void eventGetBarrelLocationAndRotation(INT SeatIndex,FVector& SocketLocation,FRotator* SocketRotation=NULL)
    {
        UTVehicle_eventGetBarrelLocationAndRotation_Parms Parms(EC_EventParm);
        Parms.SeatIndex=SeatIndex;
        Parms.SocketLocation=SocketLocation;
        if(SocketRotation){Parms.SocketRotation=*SocketRotation;}
        ProcessEvent(FindFunctionChecked(UTGAME_GetBarrelLocationAndRotation),&Parms);
        SocketLocation=Parms.SocketLocation;
        if ( SocketRotation ) { *SocketRotation=Parms.SocketRotation; }
    }
    class AActor* eventGetHomingTarget(class AUTProjectile* Seeker,class AController* InstigatedBy)
    {
        UTVehicle_eventGetHomingTarget_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.Seeker=Seeker;
        Parms.InstigatedBy=InstigatedBy;
        ProcessEvent(FindFunctionChecked(UTGAME_GetHomingTarget),&Parms);
        return Parms.ReturnValue;
    }
    void eventPlayTakeHitEffects()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_PlayTakeHitEffects),NULL);
    }
    void eventCheckReset()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_CheckReset),NULL);
    }
    void eventLockOnWarning(class AUTProjectile* IncomingMissile)
    {
        UTVehicle_eventLockOnWarning_Parms Parms(EC_EventParm);
        Parms.IncomingMissile=IncomingMissile;
        ProcessEvent(FindFunctionChecked(UTGAME_LockOnWarning),&Parms);
    }
    void eventIncomingMissile(class AProjectile* P)
    {
        UTVehicle_eventIncomingMissile_Parms Parms(EC_EventParm);
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(UTGAME_IncomingMissile),&Parms);
    }
    void eventSetTeamNum(BYTE T)
    {
        UTVehicle_eventSetTeamNum_Parms Parms(EC_EventParm);
        Parms.T=T;
        ProcessEvent(FindFunctionChecked(UTGAME_SetTeamNum),&Parms);
    }
    void eventSetKeyVehicle()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SetKeyVehicle),NULL);
    }
    void eventTakeFireDamage()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TakeFireDamage),NULL);
    }
    void eventTakeWaterDamage()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_TakeWaterDamage),NULL);
    }
    void eventJumpOutCheck()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_JumpOutCheck),NULL);
    }
    void eventDisplayWeaponBar(class UCanvas* Canvas,class AUTHUD* HUD)
    {
        UTVehicle_eventDisplayWeaponBar_Parms Parms(EC_EventParm);
        Parms.Canvas=Canvas;
        Parms.HUD=HUD;
        ProcessEvent(FindFunctionChecked(UTGAME_DisplayWeaponBar),&Parms);
    }
    void eventSelfDestruct(class AActor* ImpactedActor)
    {
        UTVehicle_eventSelfDestruct_Parms Parms(EC_EventParm);
        Parms.ImpactedActor=ImpactedActor;
        ProcessEvent(FindFunctionChecked(UTGAME_SelfDestruct),&Parms);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle,AUTVehicleBase,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual FVector GetDampingForce(const FVector& InForce);
	void RequestTrackingFor(AUTBot *Bot);
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual UBOOL JumpOutCheck(AActor *GoalActor, FLOAT Distance, FLOAT ZDiff);
	virtual FLOAT GetMaxRiseForce();
	INT* GetOptimizedRepList( BYTE* InDefault, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel );
	virtual void OnRigidBodyCollision(const FRigidBodyCollisionInfo& Info0, const FRigidBodyCollisionInfo& Info1, const FCollisionImpactData& RigidCollisionData);
	virtual void PostEditChange(UProperty* PropertyThatChanged);
	virtual void ApplyWeaponRotation(INT SeatIndex, FRotator NewRotation);
	UBOOL CheckAutoDestruct(ATeamInfo* InstigatorTeam, FLOAT CheckRadius);
	virtual void PreNetReceive();
	virtual void PostNetReceive();
	virtual UBOOL ReachThresholdTest(const FVector& TestPosition, const FVector& Dest, AActor* GoalActor, FLOAT UpThresholdAdjust, FLOAT DownThresholdAdjust, FLOAT ThresholdAdjust);
	virtual void InitForPathfinding(AActor* Goal, ANavigationPoint* EndAnchor);
};

class AUTHoverVehicle : public AUTVehicle
{
public:
    //## BEGIN PROPS UTHoverVehicle
    TArrayNoInit<INT> GroundEffectIndices;
    FLOAT MaxGroundEffectDist;
    FName GroundEffectDistParameterName;
    class UParticleSystem* WaterGroundEffect;
    FLOAT CustomGravityScaling;
    FLOAT StallZGravityScaling;
    FLOAT FullAirSpeed;
    //## END PROPS UTHoverVehicle

    DECLARE_ABSTRACT_CLASS(AUTHoverVehicle,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
	virtual FLOAT GetGravityZ();
};

class AUTAirVehicle : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTAirVehicle
    TArrayNoInit<INT> ContrailEffectIndices;
    FName ContrailColorParameterName;
    BITFIELD bAutoLand:1;
    FLOAT PushForce;
    FStringNoInit RadarLockMessage;
    FLOAT LastRadarLockWarnTime;
    //## END PROPS UTAirVehicle

    virtual FLOAT GetGravityZ();
    DECLARE_ABSTRACT_CLASS(AUTAirVehicle,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class AUTVehicle_Cicada : public AUTAirVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Cicada
    FVector TurretFlashLocation;
    FRotator TurretWeaponRotation;
    BYTE TurretFlashCount;
    BYTE TurretFiringMode;
    BITFIELD bFreelanceStart:1 GCC_BITFIELD_MAGIC;
    TArrayNoInit<INT> JetEffectIndices;
    class UParticleSystem* TurretBeamTemplate;
    class UUTSkelControl_JetThruster* JetControl;
    FName JetScalingParam;
    //## END PROPS UTVehicle_Cicada

    DECLARE_ABSTRACT_CLASS(AUTVehicle_Cicada,AUTAirVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
	virtual UBOOL HasRelevantDriver();
};

struct FTowInfoData
{
    class AUTVehicle* TowTruck;
    FName TowAttachPoint;

    /** Constructors */
    FTowInfoData() {}
    FTowInfoData(EEventParm)
    {
        appMemzero(this, sizeof(FTowInfoData));
    }
};

struct UTVehicle_Hoverboard_eventBelowSpeedThreshold_Parms
{
    UTVehicle_Hoverboard_eventBelowSpeedThreshold_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventSpawnTowCableEffects_Parms
{
    UTVehicle_Hoverboard_eventSpawnTowCableEffects_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventSpawnRoosterEffect_Parms
{
    UTVehicle_Hoverboard_eventSpawnRoosterEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventHoverboardLanded_Parms
{
    UTVehicle_Hoverboard_eventHoverboardLanded_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventHideBoard_Parms
{
    UTVehicle_Hoverboard_eventHideBoard_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventToggleAnimBoard_Parms
{
    UBOOL bAnimBoard;
    FLOAT delay;
    UTVehicle_Hoverboard_eventToggleAnimBoard_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventBreakTowLink_Parms
{
    UTVehicle_Hoverboard_eventBreakTowLink_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventBoardJumpEffect_Parms
{
    UTVehicle_Hoverboard_eventBoardJumpEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Hoverboard_eventRequestDodge_Parms
{
    UTVehicle_Hoverboard_eventRequestDodge_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Hoverboard : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Hoverboard
    class UUTSkeletalMeshComponent* HoverboardMesh;
    FVector MeshLocationOffset;
    FRotator MeshRotationOffset;
    FLOAT JumpForceMag;
    FLOAT DodgeForceMag;
    FLOAT TrickJumpWarmupMax;
    FLOAT JumpCheckTraceDist;
    FLOAT TrickJumpWarmup;
    FLOAT TrickSpinWarmup;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    BITFIELD bInAJump:1;
    BITFIELD bLeftGround:1;
    BITFIELD bDoHoverboardJump:1;
    BITFIELD bIsDodging:1;
    BITFIELD bTrickJumping:1;
    BITFIELD bGrabbingBoard:1;
    BITFIELD bGrab1:1;
    BITFIELD bGrab2:1;
    BITFIELD bForceSpinWarmup:1;
    BITFIELD bDisableRepulsorsAtMaxFallSpeed:1;
    BITFIELD bInTow:1;
    BITFIELD bNoVehicleEntry:1;
    FLOAT TakeoffYaw;
    FLOAT AutoSpin;
    FLOAT SpinHeadingOffset;
    FLOAT SpinSpeed;
    FLOAT LandedCountdown;
    FVector DodgeForce;
    FLOAT LeanUprightStiffness;
    FLOAT LeanUprightDamping;
    class URB_StayUprightSetup* LeanUprightConstraintSetup;
    class URB_ConstraintInstance* LeanUprightConstraintInstance;
    class URB_ConstraintSetup* FootBoardConstraintSetup;
    class URB_ConstraintInstance* LeftFootBoardConstraintInstance;
    class URB_ConstraintInstance* RightFootBoardConstraintInstance;
    FVector GroundNormal;
    FLOAT CurrentLookYaw;
    class USkelControlSingleBone* SpineTurnControl;
    class USkelControlLookAt* TowControl;
    FLOAT MaxTrackYaw;
    FLOAT CurrentHeadYaw;
    FLOAT HoverboardSlalomMaxAngle;
    FLOAT SlalomSpeed;
    FLOAT CurrentSteerOffset;
    FLOAT TurnLeanFactor;
    FLOAT MaxLeanPitchSpeed;
    FLOAT TargetPitch;
    FLOAT DownhillDownForce;
    FLOAT WaterCheckLevel;
    class URB_DistanceJointSetup* DistanceJointSetup;
    class URB_ConstraintInstance* DistanceJointInstance;
    FLOAT MaxTowDistance;
    struct FTowInfoData TowInfo;
    FVector TowLocalAttachPos;
    FLOAT HoverboardTowSlalomMaxAngle;
    FLOAT CurrentTowDistance;
    FLOAT TowDistanceChangeSpeed;
    FLOAT TowLineBlockedBreakTime;
    FLOAT TowLineBlockedFor;
    class UParticleSystemComponent* TowBeamEmitter;
    class UParticleSystemComponent* TowBeamEndPointEffect;
    FName TowBeamIntensityName;
    class UParticleSystemComponent* HoverboardDust;
    class UParticleSystem* RedDustEffect;
    class UParticleSystem* BlueDustEffect;
    FName DustVelMagParamName;
    FName DustBoardHeightParamName;
    FName DustVelParamName;
    class UParticleSystemComponent* ThrusterEffect;
    FName ThrusterEffectSocket;
    class UParticleSystem* RedThrusterEffect;
    class UParticleSystem* BlueThrusterEffect;
    class UParticleSystem* TowBeamTeamEmitters[2];
    class UParticleSystem* TowBeamTeamEndPoints[2];
    FName TowBeamEndParameterName;
    class UParticleSystemComponent* RoosterEffect;
    class UParticleSystem* RoosterEffectTemplate;
    FLOAT RoosterTurnScale;
    class UAudioComponent* RoosterNoise;
    class USoundCue* RoosterSoundCue;
    class UAudioComponent* CurveSound;
    class USoundCue* EngineThrustSound;
    class USoundCue* TurnSound;
    class USoundCue* JumpSound;
    class USoundCue* OverWaterSound;
    class UAudioComponent* TowLoopComponent;
    class USoundCue* TowLoopCue;
    class USoundCue* TowStartedSound;
    class USoundCue* TowEndedSound;
    FLOAT CameraInitialOut;
    FVector HoverCamOffset;
    FRotator HoverCamRotOffset;
    FVector VelLookAtOffset;
    FVector VelBasedCamOffset;
    FLOAT VelRollFactor;
    FLOAT HoverCamMaxVelUsed;
    FLOAT ViewRollRate;
    INT CurrentViewRoll;
    FLOAT TargetPhysicsWeight;
    FLOAT PhysWeightBlendTimeToGo;
    FLOAT PhysWeightBlendTime;
    BYTE DoubleClickMove;
    class UStaticMeshComponent* HandleMesh;
    INT FallingDamageRagdollThreshold;
    FLOAT ImpactGroundResetPhysRiderThresh;
    FLOAT BigImpactPhysRiderZVel;
    FLOAT LastTryTowCableTime;
    FLOAT DesiredSpeedSquared;
    FLOAT LastDesiredSpeedTime;
    //## END PROPS UTVehicle_Hoverboard

    void AttachTowCable();
    DECLARE_FUNCTION(execAttachTowCable)
    {
        P_FINISH;
        AttachTowCable();
    }
    void eventBelowSpeedThreshold()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_BelowSpeedThreshold),NULL);
    }
    void eventSpawnTowCableEffects()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnTowCableEffects),NULL);
    }
    void eventSpawnRoosterEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SpawnRoosterEffect),NULL);
    }
    void eventHoverboardLanded()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_HoverboardLanded),NULL);
    }
    void eventHideBoard()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_HideBoard),NULL);
    }
    void eventToggleAnimBoard(UBOOL bAnimBoard,FLOAT delay)
    {
        UTVehicle_Hoverboard_eventToggleAnimBoard_Parms Parms(EC_EventParm);
        Parms.bAnimBoard=bAnimBoard ? FIRST_BITFIELD : FALSE;
        Parms.delay=delay;
        ProcessEvent(FindFunctionChecked(UTGAME_ToggleAnimBoard),&Parms);
    }
    void eventBreakTowLink()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_BreakTowLink),NULL);
    }
    void eventBoardJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_BoardJumpEffect),NULL);
    }
    void eventRequestDodge()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_RequestDodge),NULL);
    }
    DECLARE_CLASS(AUTVehicle_Hoverboard,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual void VehicleUnpackRBState();

#if WITH_NOVODEX
	virtual void PostInitRigidBody(NxActor* nActor, NxActorDesc& ActorDesc, UPrimitiveComponent* PrimComp);
#endif // WITH_NOVODEX
};

struct UTVehicle_Manta_eventMantaDuckEffect_Parms
{
    UTVehicle_Manta_eventMantaDuckEffect_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Manta_eventMantaJumpEffect_Parms
{
    UTVehicle_Manta_eventMantaJumpEffect_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Manta : public AUTHoverVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Manta
    FLOAT JumpForceMag;
    FLOAT MaxJumpZVel;
    FLOAT JumpCheckTraceDist;
    FLOAT JumpDelay;
    FLOAT LastJumpTime;
    FLOAT DuckForceMag;
    BITFIELD bDoBikeJump:1;
    BITFIELD bHoldingDuck:1;
    BITFIELD bPressingAltFire:1;
    class USoundCue* JumpSound;
    class USoundCue* DuckSound;
    FLOAT BladeBlur;
    FLOAT DesiredBladeBlur;
    INT FanEffectIndex;
    FName FanEffectParameterName;
    FName FlameJetEffectParameterName;
    FLOAT FlameJetValue;
    FLOAT DesiredFlameJetValue;
    FLOAT FullWheelSuspensionTravel;
    FLOAT CrouchedWheelSuspensionTravel;
    FLOAT SuspensionTravelAdjustSpeed;
    FLOAT FullWheelSuspensionStiffness;
    FLOAT CrouchedWheelSuspensionStiffness;
    FLOAT BoneOffsetZAdjust;
    FLOAT CrouchedAirSpeed;
    //## END PROPS UTVehicle_Manta

    void eventMantaDuckEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MantaDuckEffect),NULL);
    }
    void eventMantaJumpEffect()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_MantaJumpEffect),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Manta,AUTHoverVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct UTVehicle_Scorpion_eventBladeHit_Parms
{
    class AActor* HitActor;
    FVector HitLocation;
    UBOOL bLeftBlade;
    UTVehicle_Scorpion_eventBladeHit_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventDeactivateRocketBoosters_Parms
{
    UTVehicle_Scorpion_eventDeactivateRocketBoosters_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventEnableFullSteering_Parms
{
    UTVehicle_Scorpion_eventEnableFullSteering_Parms(EEventParm)
    {
    }
};
struct UTVehicle_Scorpion_eventActivateRocketBoosters_Parms
{
    UTVehicle_Scorpion_eventActivateRocketBoosters_Parms(EEventParm)
    {
    }
};
class AUTVehicle_Scorpion : public AUTVehicle
{
public:
    //## BEGIN PROPS UTVehicle_Scorpion
    class UUTAnimBlendByWeapon* BladeBlend;
    BITFIELD bBrakeLightOn:1;
    BITFIELD bReverseLightOn:1;
    BITFIELD bHeadlightsOn:1;
    BITFIELD bBladesExtended:1;
    BITFIELD bLeftBladeBroken:1;
    BITFIELD bRightBladeBroken:1;
    BITFIELD bBoostersActivated:1;
    BITFIELD bSteeringLimited:1;
    BITFIELD bScriptedBoosters:1;
    BITFIELD bSelfDestructArmed:1;
    BITFIELD bTryToBoost:1;
    BITFIELD bWasThrottle:1;
    FLOAT BladeBreakPoint;
    FName BrakeLightParameterName;
    FName ReverseLightParameterName;
    FName HeadLightParameterName;
    FName RightBladeStartSocket;
    FName RightBladeEndSocket;
    FName LeftBladeStartSocket;
    FName LeftBladeEndSocket;
    class UClass* BladeDamageType;
    class USoundCue* BladeBreakSound;
    class USoundCue* BladeExtendSound;
    class USoundCue* BladeRetractSound;
    FLOAT BoosterForceMagnitude;
    class AController* SelfDestructInstigator;
    FLOAT BoosterCheckRadius;
    FLOAT MaxBoostDuration;
    FLOAT BoostStartTime;
    FLOAT BoostChargeDuration;
    FLOAT BoostChargeTime;
    class UAudioComponent* BoosterSound;
    struct FTextureCoordinates BoostToolTipIconCoords;
    struct FTextureCoordinates EjectToolTipIconCoords;
    class UClass* SelfDestructDamageType;
    FLOAT BoostPowerSpeed;
    FLOAT BoostReleaseTime;
    FLOAT BoostReleaseDelay;
    class USoundCue* SelfDestructSoundCue;
    class USoundCue* SelfDestructReadyCue;
    class USoundCue* SelfDestructWarningSound;
    class USoundCue* SelfDestructEnabledSound;
    class USoundCue* SelfDestructEnabledLoop;
    class UCameraAnim* RedBoostCamAnim;
    class UCameraAnim* BlueBoostCamAnim;
    class USoundCue* SuspensionShiftSound;
    class UAudioComponent* SelfDestructEnabledComponent;
    class UAudioComponent* SelfDestructWarningComponent;
    class UAudioComponent* SelfDestructReadyComponent;
    class USoundCue* EjectSoundCue;
    FLOAT BoosterFOVAngle;
    class UUTAnimBlendByWeapon* BoosterBlend;
    FLOAT ThrottleStartTime;
    FLOAT BoostUprightTorqueFactor;
    FLOAT BoostUprightMaxTorque;
    FLOAT DefaultUprightTorqueFactor;
    FLOAT DefaultUprightMaxTorque;
    class UPointLightComponent* LeftBoosterLight;
    class UPointLightComponent* RightBoosterLight;
    class ARB_ConstraintActor* BladeVictimConstraint[2];
    class UStaticMesh* ScorpionHood;
    FLOAT RocketSpeed;
    FLOAT SelfDestructSpeedSquared;
    FLOAT LockSuspensionTravel;
    FLOAT LockSuspensionStiffness;
    FLOAT BoostSteerFactors[3];
    class UParticleSystem* SelfDestructExplosionTemplate;
    class UClass* HatchGibClass;
    class UStaticMesh* BrokenBladeMesh;
    //## END PROPS UTVehicle_Scorpion

    UBOOL ReadyToSelfDestruct();
    DECLARE_FUNCTION(execReadyToSelfDestruct)
    {
        P_FINISH;
        *(UBOOL*)Result=ReadyToSelfDestruct();
    }
    void eventBladeHit(class AActor* HitActor,FVector HitLocation,UBOOL bLeftBlade)
    {
        UTVehicle_Scorpion_eventBladeHit_Parms Parms(EC_EventParm);
        Parms.HitActor=HitActor;
        Parms.HitLocation=HitLocation;
        Parms.bLeftBlade=bLeftBlade ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_BladeHit),&Parms);
    }
    void eventDeactivateRocketBoosters()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_DeactivateRocketBoosters),NULL);
    }
    void eventEnableFullSteering()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_EnableFullSteering),NULL);
    }
    void eventActivateRocketBoosters()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_ActivateRocketBoosters),NULL);
    }
    DECLARE_ABSTRACT_CLASS(AUTVehicle_Scorpion,AUTVehicle,0|CLASS_Config,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

class AUTWeaponPawn : public AUTVehicleBase
{
public:
    //## BEGIN PROPS UTWeaponPawn
    class AUTVehicleWeapon* MyVehicleWeapon;
    class AUTVehicle* MyVehicle;
    INT MySeatIndex;
    //## END PROPS UTWeaponPawn

    virtual FVector GetTargetLocation(class AActor* RequestedBy=NULL,UBOOL bRequestAlternateLoc=FALSE) const;
    DECLARE_CLASS(AUTWeaponPawn,AUTVehicleBase,0|CLASS_Config|CLASS_NativeReplication,UTGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
	virtual AVehicle* GetVehicleBase();
	INT* GetOptimizedRepList(BYTE* Recent, FPropertyRetirement* Retire, INT* Ptr, UPackageMap* Map, UActorChannel* Channel);
};

class AVehicleMovementEffect : public AActor
{
public:
    //## BEGIN PROPS VehicleMovementEffect
    class UStaticMeshComponent* AirEffect;
    FLOAT MinVelocityForAirEffect;
    FLOAT MaxVelocityForAirEffect;
    FName AirEffectScalar;
    FLOAT AirMaxDelta;
    FLOAT AirCurrentLevel;
    //## END PROPS VehicleMovementEffect

    DECLARE_CLASS(AVehicleMovementEffect,AActor,0,UTGame)
	virtual void TickSpecial(FLOAT DeltaTime);
};

class UUTVehicleSimCar : public USVehicleSimCar
{
public:
    //## BEGIN PROPS UTVehicleSimCar
    FInterpCurveFloat TorqueVSpeedCurve;
    FInterpCurveFloat EngineRPMCurve;
    FLOAT LSDFactor;
    FLOAT ThrottleSpeed;
    FLOAT MinRPM;
    FLOAT MaxRPM;
    FLOAT ActualThrottle;
    BITFIELD bForceThrottle:1;
    BITFIELD bHasForcedThrottle:1;
    BITFIELD bDriverlessBraking:1;
    BITFIELD bAutoHandbrake:1;
    FLOAT SteeringReductionFactor;
    FLOAT SteeringReductionRampUpRate;
    FLOAT CurrentSteeringReduction;
    INT NumWheelsForFullSteering;
    FLOAT SteeringReductionSpeed;
    FLOAT SteeringReductionMinSpeed;
    FLOAT MinHardTurnSpeed;
    FLOAT HardTurnMotorTorque;
    FLOAT HandbrakeSpeed;
    FLOAT ActualHandbrake;
    FLOAT FrontalCollisionGripFactor;
    FLOAT ConsoleHardTurnGripFactor;
    FLOAT SpeedBasedTurnDamping;
    FLOAT AirControlTurnTorque;
    FLOAT InAirUprightTorqueFactor;
    FLOAT InAirUprightMaxTorque;
    //## END PROPS UTVehicleSimCar

    DECLARE_CLASS(UUTVehicleSimCar,USVehicleSimCar,0,UTGame)
	// SVehicleSimBase interface.
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateHandbrake(ASVehicle* Vehicle);
};

class UUTVehicleSimChopper : public USVehicleSimBase
{
public:
    //## BEGIN PROPS UTVehicleSimChopper
    FLOAT MaxThrustForce;
    FLOAT MaxReverseForce;
    FLOAT LongDamping;
    FLOAT MaxStrafeForce;
    FLOAT LatDamping;
    FLOAT DirectionChangeForce;
    FLOAT MaxRiseForce;
    FLOAT UpDamping;
    FLOAT TurnTorqueFactor;
    FLOAT TurnTorqueMax;
    FLOAT TurnDamping;
    FLOAT MaxYawRate;
    FLOAT PitchTorqueFactor;
    FLOAT PitchTorqueMax;
    FLOAT PitchDamping;
    FLOAT RollTorqueTurnFactor;
    FLOAT RollTorqueStrafeFactor;
    FLOAT RollTorqueMax;
    FLOAT RollDamping;
    FLOAT StopThreshold;
    FLOAT MaxRandForce;
    FLOAT RandForceInterval;
    BITFIELD bAllowZThrust:1;
    BITFIELD bFullThrustOnDirectionChange:1;
    BITFIELD bShouldCutThrustMaxOnImpact:1;
    BITFIELD bRecentlyHit:1;
    BITFIELD bStrafeAffectsTurnDamping:1;
    BITFIELD bHeadingInitialized:1;
    BITFIELD bStabilizeStops:1;
    FLOAT StrafeTurnDamping;
    FLOAT TargetHeading;
    FLOAT TargetPitch;
    FLOAT PitchViewCorrelation;
    FVector RandForce;
    FVector RandTorque;
    FLOAT AccumulatedTime;
    FLOAT StabilizationForceMultiplier;
    FLOAT CurrentStabilizationMultiplier;
    FVector OldVelocity;
    FLOAT StoppedBrakeTorque;
    FLOAT HardLimitAirSpeedScale;
    //## END PROPS UTVehicleSimChopper

    DECLARE_CLASS(UUTVehicleSimChopper,USVehicleSimBase,0,UTGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	virtual FVector StabilizationForce(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	virtual FVector StabilizationTorque(ASVehicle* Vehicle, FLOAT DeltaTime, UBOOL bShouldStabilize);
	FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UUTVehicleSimHover : public UUTVehicleSimChopper
{
public:
    //## BEGIN PROPS UTVehicleSimHover
    BITFIELD bDisableWheelsWhenOff:1;
    BITFIELD bRepulsorCollisionEnabled:1;
    BITFIELD bCanClimbSlopes:1;
    BITFIELD bUnPoweredDriving:1;
    //## END PROPS UTVehicleSimHover

    DECLARE_CLASS(UUTVehicleSimHover,UUTVehicleSimChopper,0,UTGame)
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	FLOAT GetEngineOutput(ASVehicle* Vehicle);
	virtual void GetRotationAxes(ASVehicle* Vehicle, FVector &DirX, FVector &DirY, FVector &DirZ);
};

class UUTVehicleSimHoverboard : public USVehicleSimBase
{
public:
    //## BEGIN PROPS UTVehicleSimHoverboard
    FLOAT MaxThrustForce;
    FLOAT UphillHelpThrust;
    FLOAT MaxUphillHelpThrust;
    FLOAT MaxReverseForce;
    FLOAT MaxReverseVelocity;
    FLOAT LongDamping;
    FLOAT MaxStrafeForce;
    FLOAT LatDamping;
    FLOAT MaxRiseForce;
    FLOAT TurnTorqueFactor;
    FLOAT SpinTurnTorqueScale;
    FLOAT MaxTurnTorque;
    FInterpCurveFloat TurnDampingSpeedFunc;
    BITFIELD bIsOverDeepWater:1;
    FLOAT StopThreshold;
    FLOAT FlyingTowTurnDamping;
    FLOAT FlyingTowRelVelDamping;
    FLOAT TowRelVelDamping;
    //## END PROPS UTVehicleSimHoverboard

    DECLARE_CLASS(UUTVehicleSimHoverboard,USVehicleSimBase,0,UTGame)
    virtual void ProcessCarInput(ASVehicle* Vehicle);
	virtual void UpdateVehicle(ASVehicle* Vehicle, FLOAT DeltaTime);
	FLOAT GetEngineOutput(ASVehicle* Vehicle);
};

struct UTVehicleWheel_eventSetParticleEffect_Parms
{
    class AUTVehicle* OwnerVehicle;
    class UParticleSystem* NewTemplate;
    UTVehicleWheel_eventSetParticleEffect_Parms(EEventParm)
    {
    }
};
class UUTVehicleWheel : public USVehicleWheel
{
public:
    //## BEGIN PROPS UTVehicleWheel
    BITFIELD bUseMaterialSpecificEffects:1;
    BITFIELD bDisableWheelOnDeath:1;
    class UParticleSystemComponent* OldWheelParticleComp;
    FLOAT EffectDesiredSpinDir;
    //## END PROPS UTVehicleWheel

    void eventSetParticleEffect(class AUTVehicle* OwnerVehicle,class UParticleSystem* NewTemplate)
    {
        UTVehicleWheel_eventSetParticleEffect_Parms Parms(EC_EventParm);
        Parms.OwnerVehicle=OwnerVehicle;
        Parms.NewTemplate=NewTemplate;
        ProcessEvent(FindFunctionChecked(UTGAME_SetParticleEffect),&Parms);
    }
    DECLARE_CLASS(UUTVehicleWheel,USVehicleWheel,0,UTGame)
	/** @return whether this wheel should have a particle component attached to it */
	virtual UBOOL WantsParticleComponent();
};

#endif // !INCLUDED_UTGAME_VEHICLE_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(AUTAirVehicle,-1,execGetGravityZ);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetAlternateLockTarget);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execApplyMorphDamage);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execUpdateDamageMaterial);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execInitDamageSkel);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execNativePostRenderFor);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execInUseableRange);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSetHUDLocation);
AUTOGENERATE_FUNCTION(AUTVehicle,999,execIsSeatControllerReplicationViewer);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetBarrelIndex);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execGetSeatPivotPoint);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execForceWeaponRotation);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFiringMode);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFlashCount);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatFlashLocation);
AUTOGENERATE_FUNCTION(AUTVehicle,-1,execSeatWeaponRotation);
AUTOGENERATE_FUNCTION(AUTVehicle_Hoverboard,-1,execAttachTowCable);
AUTOGENERATE_FUNCTION(AUTVehicle_Scorpion,-1,execReadyToSelfDestruct);
AUTOGENERATE_FUNCTION(AUTVehicleFactory,-1,execGetTeamNum);
AUTOGENERATE_FUNCTION(AUTVehicleFactory,-1,execSetHUDLocation);
AUTOGENERATE_FUNCTION(AUTWeaponPawn,-1,execGetTargetLocation);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef UTGAME_VEHICLE_NATIVE_DEFS
#define UTGAME_VEHICLE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(UTGame,AUTAirVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTHoverVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Cicada);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Hoverboard);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Manta);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicle_Scorpion);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleBase);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleFactory);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimCar);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimChopper);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimHover);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleSimHoverboard);
DECLARE_NATIVE_TYPE(UTGame,AUTVehicleWeapon);
DECLARE_NATIVE_TYPE(UTGame,UUTVehicleWheel);
DECLARE_NATIVE_TYPE(UTGame,AUTVWeap_TowCable);
DECLARE_NATIVE_TYPE(UTGame,AUTWeaponPawn);
DECLARE_NATIVE_TYPE(UTGame,AVehicleMovementEffect);

#define AUTO_INITIALIZE_REGISTRANTS_UTGAME_VEHICLE \
	AUTAirVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTAirVehicleNative; \
	AUTHoverVehicle::StaticClass(); \
	AUTVehicle::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicleNative; \
	AUTVehicle_Cicada::StaticClass(); \
	AUTVehicle_Hoverboard::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_HoverboardNative; \
	AUTVehicle_Manta::StaticClass(); \
	AUTVehicle_Scorpion::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicle_ScorpionNative; \
	AUTVehicleBase::StaticClass(); \
	AUTVehicleFactory::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTVehicleFactoryNative; \
	UUTVehicleSimCar::StaticClass(); \
	UUTVehicleSimChopper::StaticClass(); \
	UUTVehicleSimHover::StaticClass(); \
	UUTVehicleSimHoverboard::StaticClass(); \
	AUTVehicleWeapon::StaticClass(); \
	UUTVehicleWheel::StaticClass(); \
	AUTVWeap_TowCable::StaticClass(); \
	AUTWeaponPawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameAUTWeaponPawnNative; \
	AVehicleMovementEffect::StaticClass(); \

#endif // UTGAME_VEHICLE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AUTAirVehicle) GUTGameAUTAirVehicleNatives[] = 
{ 
	MAP_NATIVE(AUTAirVehicle,execGetGravityZ)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTAirVehicle);

NATIVE_INFO(AUTVehicle) GUTGameAUTVehicleNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle,execGetAlternateLockTarget)
	MAP_NATIVE(AUTVehicle,execApplyMorphDamage)
	MAP_NATIVE(AUTVehicle,execUpdateDamageMaterial)
	MAP_NATIVE(AUTVehicle,execInitDamageSkel)
	MAP_NATIVE(AUTVehicle,execGetTeamNum)
	MAP_NATIVE(AUTVehicle,execNativePostRenderFor)
	MAP_NATIVE(AUTVehicle,execInUseableRange)
	MAP_NATIVE(AUTVehicle,execSetHUDLocation)
	MAP_NATIVE(AUTVehicle,execIsSeatControllerReplicationViewer)
	MAP_NATIVE(AUTVehicle,execGetBarrelIndex)
	MAP_NATIVE(AUTVehicle,execGetSeatPivotPoint)
	MAP_NATIVE(AUTVehicle,execForceWeaponRotation)
	MAP_NATIVE(AUTVehicle,execSeatFiringMode)
	MAP_NATIVE(AUTVehicle,execSeatFlashCount)
	MAP_NATIVE(AUTVehicle,execSeatFlashLocation)
	MAP_NATIVE(AUTVehicle,execSeatWeaponRotation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle);

NATIVE_INFO(AUTVehicle_Hoverboard) GUTGameAUTVehicle_HoverboardNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Hoverboard,execAttachTowCable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Hoverboard);

NATIVE_INFO(AUTVehicle_Scorpion) GUTGameAUTVehicle_ScorpionNatives[] = 
{ 
	MAP_NATIVE(AUTVehicle_Scorpion,execReadyToSelfDestruct)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicle_Scorpion);

NATIVE_INFO(AUTVehicleFactory) GUTGameAUTVehicleFactoryNatives[] = 
{ 
	MAP_NATIVE(AUTVehicleFactory,execGetTeamNum)
	MAP_NATIVE(AUTVehicleFactory,execSetHUDLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTVehicleFactory);

NATIVE_INFO(AUTWeaponPawn) GUTGameAUTWeaponPawnNatives[] = 
{ 
	MAP_NATIVE(AUTWeaponPawn,execGetTargetLocation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,AUTWeaponPawn);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,UTAirVehicle,ContrailEffectIndices)
VERIFY_CLASS_OFFSET_NODIE(A,UTAirVehicle,LastRadarLockWarnTime)
VERIFY_CLASS_SIZE_NODIE(AUTAirVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoverVehicle,GroundEffectIndices)
VERIFY_CLASS_OFFSET_NODIE(A,UTHoverVehicle,FullAirSpeed)
VERIFY_CLASS_SIZE_NODIE(AUTHoverVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle,VehicleLockedSound)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle,HeroBonus)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Cicada,TurretFlashLocation)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Cicada,JetScalingParam)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Cicada)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Hoverboard,HoverboardMesh)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Hoverboard,LastDesiredSpeedTime)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Hoverboard)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Manta,JumpForceMag)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Manta,CrouchedAirSpeed)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Manta)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scorpion,BladeBlend)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicle_Scorpion,BrokenBladeMesh)
VERIFY_CLASS_SIZE_NODIE(AUTVehicle_Scorpion)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleBase,HUDIcons)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleBase,HudCoords)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleBase)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory,VehicleClassPath)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleFactory,TeamSpawningControl)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleFactory)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimCar,TorqueVSpeedCurve)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimCar,InAirUprightMaxTorque)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimCar)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimChopper,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimChopper,HardLimitAirSpeedScale)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimChopper)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimHover)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverboard,MaxThrustForce)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleSimHoverboard,TowRelVelDamping)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleSimHoverboard)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleWeapon,SeatIndex)
VERIFY_CLASS_OFFSET_NODIE(A,UTVehicleWeapon,VehicleClass)
VERIFY_CLASS_SIZE_NODIE(AUTVehicleWeapon)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleWheel,OldWheelParticleComp)
VERIFY_CLASS_OFFSET_NODIE(U,UTVehicleWheel,EffectDesiredSpinDir)
VERIFY_CLASS_SIZE_NODIE(UUTVehicleWheel)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_TowCable,LastLinkStartTime)
VERIFY_CLASS_OFFSET_NODIE(A,UTVWeap_TowCable,LastLinkHintTime)
VERIFY_CLASS_SIZE_NODIE(AUTVWeap_TowCable)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPawn,MyVehicleWeapon)
VERIFY_CLASS_OFFSET_NODIE(A,UTWeaponPawn,MySeatIndex)
VERIFY_CLASS_SIZE_NODIE(AUTWeaponPawn)
VERIFY_CLASS_OFFSET_NODIE(A,VehicleMovementEffect,AirEffect)
VERIFY_CLASS_OFFSET_NODIE(A,VehicleMovementEffect,AirCurrentLevel)
VERIFY_CLASS_SIZE_NODIE(AVehicleMovementEffect)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
