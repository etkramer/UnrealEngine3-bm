/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2008 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_UTGAME_UIFRONTEND_ENUMS
#define INCLUDED_UTGAME_UIFRONTEND_ENUMS 1

enum EModImport
{
    MODIMPORT_Inactive      =0,
    MODIMPORT_Started       =1,
    MODIMPORT_Unpacking     =2,
    MODIMPORT_Finished      =3,
    MODIMPORT_Failed        =4,
    MODIMPORT_PackageName   =5,
    MODIMPORT_MAX           =6,
};
enum EPossibleVideoSettings
{
    PVS_ScreenPercentage    =0,
    PVS_TextureDetail       =1,
    PVS_WorldDetail         =2,
    PVS_FXDetail            =3,
    PVS_DecalQuality        =4,
    PVS_LightingQuality     =5,
    PVS_ShadowQuality       =6,
    PVS_PostProcessQuality  =7,
    PVS_VSyncValue          =8,
    PVS_SmoothFramerate     =9,
    PVS_PlayerFOV           =10,
    PVS_MAX                 =11,
};

#endif // !INCLUDED_UTGAME_UIFRONTEND_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName UTGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetNumLoggedInPlayers)
AUTOGENERATE_NAME(GetPlayerInput)
AUTOGENERATE_NAME(GetWeaponClass)
AUTOGENERATE_NAME(MarkDirty)
AUTOGENERATE_NAME(OnAcceptOptions)
AUTOGENERATE_NAME(OnCreditsFinished)
AUTOGENERATE_NAME(OnOptionChanged)
AUTOGENERATE_NAME(OnOptionFocused)
AUTOGENERATE_NAME(SetPlayerFOV)
AUTOGENERATE_NAME(SetupOptionBindings)
AUTOGENERATE_NAME(UpdateModState)
AUTOGENERATE_NAME(UpdateProfileLabels)
AUTOGENERATE_NAME(UpdatePS3InstallState)

#ifndef NAMES_ONLY

#ifndef INCLUDED_UTGAME_UIFRONTEND_CLASSES
#define INCLUDED_UTGAME_UIFRONTEND_CLASSES 1

struct FGeneratedStatisticInfo
{
    FName DataTag;
    class UUILabel* KeyObj;
    class UUILabel* ValueObj;

    /** Constructors */
    FGeneratedStatisticInfo() {}
    FGeneratedStatisticInfo(EEventParm)
    {
        appMemzero(this, sizeof(FGeneratedStatisticInfo));
    }
};

class UUTUIStatsList : public UUIScrollFrame, public IUIDataStoreSubscriber
{
public:
    //## BEGIN PROPS UTUIStatsList
    TArrayNoInit<struct FGeneratedStatisticInfo> GeneratedObjects;
    struct FUIDataStoreBinding DataSource;
    TScriptInterface<class IUIListElementProvider> DataProvider;
    //## END PROPS UTUIStatsList

    virtual void RegenerateOptions();
    virtual void RepositionOptions();
    virtual void SetStatsIndex(INT ResultIdx);
    virtual void SetDataStoreBinding(const FString& MarkupText,INT BindingIndex=-1);
    virtual FString GetDataStoreBinding(INT BindingIndex=-1) const;
    virtual UBOOL RefreshSubscriberValue(INT BindingIndex=-1);
    virtual void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,UBOOL bValuesInvalidated,FName PropertyTag,class UUIDataProvider* SourceProvider,INT ArrayIndex);
    virtual void GetBoundDataStores(TArray<class UUIDataStore*>& out_BoundDataStores);
    virtual void ClearBoundDataStores();
    DECLARE_FUNCTION(execRegenerateOptions)
    {
        P_FINISH;
        RegenerateOptions();
    }
    DECLARE_FUNCTION(execRepositionOptions)
    {
        P_FINISH;
        RepositionOptions();
    }
    DECLARE_FUNCTION(execSetStatsIndex)
    {
        P_GET_INT(ResultIdx);
        P_FINISH;
        SetStatsIndex(ResultIdx);
    }
    DECLARE_FUNCTION(execSetDataStoreBinding)
    {
        P_GET_STR(MarkupText);
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        SetDataStoreBinding(MarkupText,BindingIndex);
    }
    DECLARE_FUNCTION(execGetDataStoreBinding)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(FString*)Result=GetDataStoreBinding(BindingIndex);
    }
    DECLARE_FUNCTION(execRefreshSubscriberValue)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(UBOOL*)Result=RefreshSubscriberValue(BindingIndex);
    }
    DECLARE_FUNCTION(execNotifyDataStoreValueUpdated)
    {
        P_GET_OBJECT(UUIDataStore,SourceDataStore);
        P_GET_UBOOL(bValuesInvalidated);
        P_GET_NAME(PropertyTag);
        P_GET_OBJECT(UUIDataProvider,SourceProvider);
        P_GET_INT(ArrayIndex);
        P_FINISH;
        NotifyDataStoreValueUpdated(SourceDataStore,bValuesInvalidated,PropertyTag,SourceProvider,ArrayIndex);
    }
    DECLARE_FUNCTION(execGetBoundDataStores)
    {
        P_GET_TARRAY_REF(class UUIDataStore*,out_BoundDataStores);
        P_FINISH;
        GetBoundDataStores(out_BoundDataStores);
    }
    DECLARE_FUNCTION(execClearBoundDataStores)
    {
        P_FINISH;
        ClearBoundDataStores();
    }
    DECLARE_CLASS(UUTUIStatsList,UUIScrollFrame,0|CLASS_Config,UTGame)
    virtual UObject* GetUObjectInterfaceUIDataStoreSubscriber(){return this;}
	/* === UUIObject interface === */
	/**
	 * Repositions all option widgets.
	 */
	virtual void ResolveFacePosition( EUIWidgetFace Face );

	/* === UUIScreenObject interface === */
	/**
	 * Perform all initialization for this widget. Called on all widgets when a scene is opened,
	 * once the scene has been completely initialized.
	 * For widgets added at runtime, called after the widget has been inserted into its parent's
	 * list of children.
	 *
	 * @param	inOwnerScene	the scene to add this widget to.
	 * @param	inOwner			the container widget that will contain this widget.  Will be NULL if the widget
	 *							is being added to the scene's list of children.
	 */
	virtual void Initialize( UUIScene* inOwnerScene, UUIObject* inOwner=NULL );
};

class UUTUITabPage_EpicContent : public UUTTabPage
{
public:
    //## BEGIN PROPS UTUITabPage_EpicContent
    class UUIList* ContentList;
    class UUILabel* StatusLabel;
    class UUTUIDataStore_Content* ContentDataStore;
    TScriptInterface<class IInterface> NewsInterface;
    class UUTUIScene_MessageBox* MessageBoxReference;
    //## END PROPS UTUITabPage_EpicContent

    virtual void LaunchWebBrowser(const FString& URL);
    DECLARE_FUNCTION(execLaunchWebBrowser)
    {
        P_GET_STR(URL);
        P_FINISH;
        LaunchWebBrowser(URL);
    }
    DECLARE_CLASS(UUTUITabPage_EpicContent,UUTTabPage,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUITabPage_EpicContent)
};

struct FGeneratedObjectInfo
{
    FName OptionProviderName;
    class UUIObject* LabelObj;
    class UUIObject* OptionObj;
    class UUIDataProvider* OptionProvider;
    FLOAT OptionY;
    FLOAT OptionHeight;
    FLOAT OptionX;
    FLOAT OptionWidth;

    /** Constructors */
    FGeneratedObjectInfo() {}
    FGeneratedObjectInfo(EEventParm)
    {
        appMemzero(this, sizeof(FGeneratedObjectInfo));
    }
};

struct UTUIOptionList_eventSetupOptionBindings_Parms
{
    UTUIOptionList_eventSetupOptionBindings_Parms(EEventParm)
    {
    }
};
struct UTUIOptionList_eventOnAcceptOptions_Parms
{
    class UUIScreenObject* InObject;
    INT PlayerIndex;
    UTUIOptionList_eventOnAcceptOptions_Parms(EEventParm)
    {
    }
};
struct UTUIOptionList_eventOnOptionChanged_Parms
{
    class UUIScreenObject* InObject;
    FName OptionName;
    INT PlayerIndex;
    UTUIOptionList_eventOnOptionChanged_Parms(EEventParm)
    {
    }
};
struct UTUIOptionList_eventOnOptionFocused_Parms
{
    class UUIScreenObject* InObject;
    class UUIDataProvider* OptionProvider;
    UTUIOptionList_eventOnOptionFocused_Parms(EEventParm)
    {
    }
};
class UUTUIOptionList : public UUTDrawPanel, public IUIDataStoreSubscriber
{
public:
    //## BEGIN PROPS UTUIOptionList
    class UUIScrollbar* VerticalScrollbar;
    INT CurrentIndex;
    INT PreviousIndex;
    FLOAT StartMovementTime;
    BITFIELD bAnimatingBGPrefab:1;
    BITFIELD bRegenOptions:1;
    BITFIELD bDragging:1;
    BITFIELD bUpArrowPressed:1;
    BITFIELD bDownArrowPressed:1;
    TArrayNoInit<struct FGeneratedObjectInfo> GeneratedObjects;
    struct FUIDataStoreBinding DataSource;
    TScriptInterface<class IUIListElementProvider> DataProvider;
    class UUIPrefab* BGPrefab;
    class UUIPrefabInstance* BGPrefabInstance;
    INT MaxVisibleItems;
    FLOAT ScrollArrowWidth;
    FColor ArrowColor;
    class UTexture2D* SelectionImage;
    class UTexture2D* ArrowImage;
    FLOAT DragDeadZone;
    FLOAT SelectionSpeed;
    FLOAT LastDragSelection;
    FVector DragClickPosition;
    FLOAT UpArrowBounds[4];
    FLOAT DownArrowBounds[4];
    FScriptDelegate __OnOptionFocused__Delegate;
    FScriptDelegate __OnOptionChanged__Delegate;
    FScriptDelegate __OnAcceptOptions__Delegate;
    //## END PROPS UTUIOptionList

    virtual void RegenerateOptions();
    virtual void RepositionOptions();
    virtual void SetSelectedOptionIndex(INT OptionIdx);
    virtual void InitializeComboboxWidgets();
    virtual void InitializeScrollbars();
    virtual void SetDataStoreBinding(const FString& MarkupText,INT BindingIndex=-1);
    virtual FString GetDataStoreBinding(INT BindingIndex=-1) const;
    virtual UBOOL RefreshSubscriberValue(INT BindingIndex=-1);
    virtual void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,UBOOL bValuesInvalidated,FName PropertyTag,class UUIDataProvider* SourceProvider,INT ArrayIndex);
    virtual void GetBoundDataStores(TArray<class UUIDataStore*>& out_BoundDataStores);
    virtual void ClearBoundDataStores();
    DECLARE_FUNCTION(execRegenerateOptions)
    {
        P_FINISH;
        RegenerateOptions();
    }
    DECLARE_FUNCTION(execRepositionOptions)
    {
        P_FINISH;
        RepositionOptions();
    }
    DECLARE_FUNCTION(execSetSelectedOptionIndex)
    {
        P_GET_INT(OptionIdx);
        P_FINISH;
        SetSelectedOptionIndex(OptionIdx);
    }
    DECLARE_FUNCTION(execInitializeComboboxWidgets)
    {
        P_FINISH;
        InitializeComboboxWidgets();
    }
    DECLARE_FUNCTION(execInitializeScrollbars)
    {
        P_FINISH;
        InitializeScrollbars();
    }
    DECLARE_FUNCTION(execSetDataStoreBinding)
    {
        P_GET_STR(MarkupText);
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        SetDataStoreBinding(MarkupText,BindingIndex);
    }
    DECLARE_FUNCTION(execGetDataStoreBinding)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(FString*)Result=GetDataStoreBinding(BindingIndex);
    }
    DECLARE_FUNCTION(execRefreshSubscriberValue)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(UBOOL*)Result=RefreshSubscriberValue(BindingIndex);
    }
    DECLARE_FUNCTION(execNotifyDataStoreValueUpdated)
    {
        P_GET_OBJECT(UUIDataStore,SourceDataStore);
        P_GET_UBOOL(bValuesInvalidated);
        P_GET_NAME(PropertyTag);
        P_GET_OBJECT(UUIDataProvider,SourceProvider);
        P_GET_INT(ArrayIndex);
        P_FINISH;
        NotifyDataStoreValueUpdated(SourceDataStore,bValuesInvalidated,PropertyTag,SourceProvider,ArrayIndex);
    }
    DECLARE_FUNCTION(execGetBoundDataStores)
    {
        P_GET_TARRAY_REF(class UUIDataStore*,out_BoundDataStores);
        P_FINISH;
        GetBoundDataStores(out_BoundDataStores);
    }
    DECLARE_FUNCTION(execClearBoundDataStores)
    {
        P_FINISH;
        ClearBoundDataStores();
    }
    void eventSetupOptionBindings()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_SetupOptionBindings),NULL);
    }
    void delegateOnAcceptOptions(class UUIScreenObject* InObject,INT PlayerIndex)
    {
        UTUIOptionList_eventOnAcceptOptions_Parms Parms(EC_EventParm);
        Parms.InObject=InObject;
        Parms.PlayerIndex=PlayerIndex;
        ProcessDelegate(UTGAME_OnAcceptOptions,&__OnAcceptOptions__Delegate,&Parms);
    }
    void delegateOnOptionChanged(class UUIScreenObject* InObject,FName OptionName,INT PlayerIndex)
    {
        UTUIOptionList_eventOnOptionChanged_Parms Parms(EC_EventParm);
        Parms.InObject=InObject;
        Parms.OptionName=OptionName;
        Parms.PlayerIndex=PlayerIndex;
        ProcessDelegate(UTGAME_OnOptionChanged,&__OnOptionChanged__Delegate,&Parms);
    }
    void delegateOnOptionFocused(class UUIScreenObject* InObject,class UUIDataProvider* OptionProvider)
    {
        UTUIOptionList_eventOnOptionFocused_Parms Parms(EC_EventParm);
        Parms.InObject=InObject;
        Parms.OptionProvider=OptionProvider;
        ProcessDelegate(UTGAME_OnOptionFocused,&__OnOptionFocused__Delegate,&Parms);
    }
    DECLARE_CLASS(UUTUIOptionList,UUTDrawPanel,0|CLASS_Config,UTGame)
    virtual UObject* GetUObjectInterfaceUIDataStoreSubscriber(){return this;}
	/* === UUIObject interface === */
	/** Updates the positioning of the background prefab. */
	virtual void Tick_Widget(FLOAT DeltaTime);

	/**
	 * Repositions all option widgets.
	 */
	virtual void ResolveFacePosition( EUIWidgetFace Face );

	/* === UUIScreenObject interface === */
	/**
	 * Perform all initialization for this widget. Called on all widgets when a scene is opened,
	 * once the scene has been completely initialized.
	 * For widgets added at runtime, called after the widget has been inserted into its parent's
	 * list of children.
	 *
	 * @param	inOwnerScene	the scene to add this widget to.
	 * @param	inOwner			the container widget that will contain this widget.  Will be NULL if the widget
	 *							is being added to the scene's list of children.
	 */
	virtual void Initialize( UUIScene* inOwnerScene, UUIObject* inOwner=NULL );

	/**
	 * Generates a array of UI Action keys that this widget supports.
	 *
	 * @param	out_KeyNames	Storage for the list of supported keynames.
	 */
	virtual void GetSupportedUIActionKeyNames(TArray<FName> &out_KeyNames );

	/**
	 * Callback that happens the first time the scene is rendered, any widget positioning initialization should be done here.
	 *
	 * By default this function recursively calls itself on all of its children.
	 */
	virtual void PreInitialSceneUpdate();

	/**
	* Routes rendering calls to children of this screen object.
	*
	* @param	Canvas	the canvas to use for rendering
	* @param	UIPostProcessGroup	Group determines current pp pass that is being rendered
	*/
	virtual void Render_Children( FCanvas* Canvas, EUIPostProcessGroup UIPostProcessGroup );
};

struct FBindKeyData
{
    FName KeyName;
    FStringNoInit Command;
    class UPlayerInput* PInput;
    FName PreviousBinding;
    BITFIELD bPromptForDuplicate:1;
    BITFIELD bBindIsPrimary:1;

    /** Constructors */
    FBindKeyData() {}
    FBindKeyData(EEventParm)
    {
        appMemzero(this, sizeof(FBindKeyData));
    }
};

struct UTUIKeyBindingList_eventGetPlayerInput_Parms
{
    class UPlayerInput* ReturnValue;
    UTUIKeyBindingList_eventGetPlayerInput_Parms(EEventParm)
    {
    }
};
class UUTUIKeyBindingList : public UUTUIOptionList
{
public:
    //## BEGIN PROPS UTUIKeyBindingList
    INT NumButtons;
    BITFIELD bCurrentlyBindingKey:1;
    class UUIObject* CurrentlyBindingObject;
    class UUTUIScene_MessageBox* MessageBoxReference;
    class UUIScene* NonIntrusiveMessageBoxScene;
    TArrayNoInit<FString> CurrentBindings;
    TArrayNoInit<FString> StoredBindings;
    TArrayNoInit<FString> LocalizedFriendlyNames;
    TArrayNoInit<UBOOL> CrucialBindValues;
    struct FBindKeyData CurrKeyBindData;
    //## END PROPS UTUIKeyBindingList

    virtual void RegenerateOptions();
    virtual void RepositionOptions();
    virtual void RefreshBindingLabels();
    virtual FString GetBindKeyFromCommand(class UPlayerInput* PInput,const FString& Command,INT& StartIdx);
    DECLARE_FUNCTION(execRefreshBindingLabels)
    {
        P_FINISH;
        RefreshBindingLabels();
    }
    DECLARE_FUNCTION(execGetBindKeyFromCommand)
    {
        P_GET_OBJECT(UPlayerInput,PInput);
        P_GET_STR(Command);
        P_GET_INT_REF(StartIdx);
        P_FINISH;
        *(FString*)Result=GetBindKeyFromCommand(PInput,Command,StartIdx);
    }
    class UPlayerInput* eventGetPlayerInput()
    {
        UTUIKeyBindingList_eventGetPlayerInput_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        ProcessEvent(FindFunctionChecked(UTGAME_GetPlayerInput),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUTUIKeyBindingList,UUTUIOptionList,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIKeyBindingList)
};

struct UTUIFrontEnd_eventUpdatePS3InstallState_Parms
{
    INT CurrentFileNum;
    INT TotalFileNum;
    UBOOL bFinishedCancelling;
    UBOOL bHasError;
    UTUIFrontEnd_eventUpdatePS3InstallState_Parms(EEventParm)
    {
    }
};
struct UTUIFrontEnd_eventUpdateModState_Parms
{
    BYTE NewState;
    UTUIFrontEnd_eventUpdateModState_Parms(EEventParm)
    {
    }
};
class UUTUIFrontEnd : public UUTUIScene
{
public:
    //## BEGIN PROPS UTUIFrontEnd
    class UUTUIButtonBar* ButtonBar;
    class UUTUITabControl* TabControl;
    INT PreviousPageIndex;
    INT CurrentPageIndex;
    BYTE ImportState;
    class UUTUIScene_MessageBox* ImportingMessageBoxReference;
    BITFIELD bInstallingPS3:1;
    BITFIELD bCancellingInstallPS3:1;
    FStringNoInit TitleMarkupString;
    FStringNoInit VersionText;
    FVector2D VersionPos;
    class UFont* VersionFont;
    //## END PROPS UTUIFrontEnd

    virtual void BeginImportMod();
    virtual void BeginInstallPS3();
    virtual void CancelInstallPS3();
    virtual void SavePassword(const FString& Password);
    DECLARE_FUNCTION(execBeginImportMod)
    {
        P_FINISH;
        BeginImportMod();
    }
    DECLARE_FUNCTION(execBeginInstallPS3)
    {
        P_FINISH;
        BeginInstallPS3();
    }
    DECLARE_FUNCTION(execCancelInstallPS3)
    {
        P_FINISH;
        CancelInstallPS3();
    }
    DECLARE_FUNCTION(execSavePassword)
    {
        P_GET_STR(Password);
        P_FINISH;
        SavePassword(Password);
    }
    void eventUpdatePS3InstallState(INT CurrentFileNum,INT TotalFileNum,UBOOL bFinishedCancelling,UBOOL bHasError)
    {
        UTUIFrontEnd_eventUpdatePS3InstallState_Parms Parms(EC_EventParm);
        Parms.CurrentFileNum=CurrentFileNum;
        Parms.TotalFileNum=TotalFileNum;
        Parms.bFinishedCancelling=bFinishedCancelling ? FIRST_BITFIELD : FALSE;
        Parms.bHasError=bHasError ? FIRST_BITFIELD : FALSE;
        ProcessEvent(FindFunctionChecked(UTGAME_UpdatePS3InstallState),&Parms);
    }
    void eventUpdateModState(BYTE NewState)
    {
        UTUIFrontEnd_eventUpdateModState_Parms Parms(EC_EventParm);
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(UTGAME_UpdateModState),&Parms);
    }
    DECLARE_CLASS(UUTUIFrontEnd,UUTUIScene,0|CLASS_Config,UTGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

	virtual void Tick( FLOAT DeltaTime );
	virtual void Render_Scene( FCanvas* Canvas, EUIPostProcessGroup UIPostProcessGroup );

	/** Reads the encrypted password and decrypts the data */
	virtual FString GetPassword();
};

struct FCreditsImageSetData
{
    class USurface* TexImage;
    FStringNoInit TexImageName;
    struct FTextureCoordinates TexCoords;
    FStringNoInit LabelMarkup;

    /** Constructors */
    FCreditsImageSetData() {}
    FCreditsImageSetData(EEventParm)
    {
        appMemzero(this, sizeof(FCreditsImageSetData));
    }
};

struct FCreditsImageSet
{
    TArrayNoInit<struct FCreditsImageSetData> ImageData;

    /** Constructors */
    FCreditsImageSet() {}
    FCreditsImageSet(EEventParm)
    {
        appMemzero(this, sizeof(FCreditsImageSet));
    }
};

struct UTUIFrontEnd_Credits_eventOnCreditsFinished_Parms
{
    UTUIFrontEnd_Credits_eventOnCreditsFinished_Parms(EEventParm)
    {
    }
};
class UUTUIFrontEnd_Credits : public UUTUIFrontEnd
{
public:
    //## BEGIN PROPS UTUIFrontEnd_Credits
    FLOAT SceneTimeInSec;
    FLOAT DelayBeforePictures;
    FLOAT DelayAfterPictures;
    BITFIELD bFinishedPlaying:1;
    FLOAT StartTime;
    TArrayNoInit<struct FCreditsImageSet> ImageSets;
    INT CurrentObjectOffset;
    INT CurrentImageSet;
    class UUILabel* QuoteLabels[6];
    class UUIImage* PhotoImage[6];
    class UUILabel* TextLabels[3];
    INT CurrentTextSet;
    FLOAT StartOffset[3];
    TArrayNoInit<FString> TextSets;
    //## END PROPS UTUIFrontEnd_Credits

    virtual void SetupScene();
    DECLARE_FUNCTION(execSetupScene)
    {
        P_FINISH;
        SetupScene();
    }
    void eventOnCreditsFinished()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_OnCreditsFinished),NULL);
    }
    DECLARE_CLASS(UUTUIFrontEnd_Credits,UUTUIFrontEnd,0|CLASS_Config,UTGame)
	virtual void Tick( FLOAT DeltaTime );

	/**
	 * Changes the datastore bindings for widgets to the next image set.
	 *
	 * @param bFront Whether we are updating front or back widgets.
	 */
	void UpdateWidgets(UBOOL bFront);

	/**
	 * Updates the position and text for credits widgets.
	 */
	void UpdateCreditsText();

	/**
	 * Callback that happens the first time the scene is rendered, any widget positioning initialization should be done here.
	 *
	 * By default this function recursively calls itself on all of its children.
	 */
	virtual void PreInitialSceneUpdate();
};

struct FDescriptionMapping
{
    FName WidgetTag;
    FStringNoInit DataStoreMarkup;

    /** Constructors */
    FDescriptionMapping() {}
    FDescriptionMapping(EEventParm)
    {
        appMemzero(this, sizeof(FDescriptionMapping));
    }
};

class UUTUIFrontEnd_CustomScreen : public UUTUIFrontEnd
{
public:
    //## BEGIN PROPS UTUIFrontEnd_CustomScreen
    class UUILabel* DescriptionLabel;
    class UUIEditBox* KeyboardTargetEditBox;
    BITFIELD bIsPasswordKeyboard:1;
    TArrayNoInit<struct FDescriptionMapping> DescriptionMap;
    //## END PROPS UTUIFrontEnd_CustomScreen

    DECLARE_CLASS(UUTUIFrontEnd_CustomScreen,UUTUIFrontEnd,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIFrontEnd_CustomScreen)
};

class UUTUIFrontEnd_LoginScreen : public UUTUIFrontEnd_CustomScreen
{
public:
    //## BEGIN PROPS UTUIFrontEnd_LoginScreen
    FStringNoInit CreateProfileScene;
    class UUIEditBox* UserNameEditBox;
    class UUIEditBox* PasswordEditBox;
    class UUICheckbox* LocalLoginCheckBox;
    class UUICheckbox* SavePasswordCheckBox;
    class UUICheckbox* AutoLoginCheckBox;
    class UUTUIScene_MessageBox* MessageBoxReference;
    BYTE LoginErrorCode;
    BITFIELD bLoginOnShow:1 GCC_BITFIELD_MAGIC;
    BITFIELD bSavePassword:1;
    BITFIELD bAutoLogin:1;
    TArrayNoInit<FString> PlayerNames;
    //## END PROPS UTUIFrontEnd_LoginScreen

    virtual void CheckLoginProperties();
    DECLARE_FUNCTION(execCheckLoginProperties)
    {
        P_FINISH;
        CheckLoginProperties();
    }
    DECLARE_CLASS(UUTUIFrontEnd_LoginScreen,UUTUIFrontEnd_CustomScreen,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIFrontEnd_LoginScreen)
};

struct UTUIFrontEnd_SettingsVideoAdvanced_eventSetPlayerFOV_Parms
{
    INT NewFOV;
    UTUIFrontEnd_SettingsVideoAdvanced_eventSetPlayerFOV_Parms(EEventParm)
    {
    }
};
class UUTUIFrontEnd_SettingsVideoAdvanced : public UUTUIFrontEnd
{
public:
    //## BEGIN PROPS UTUIFrontEnd_SettingsVideoAdvanced
    TArrayNoInit<FName> SettingWidgetMapping;
    class UUTUITabPage_Options* OptionsPage;
    class UUTUIScene_MessageBox* MessageBoxReference;
    //## END PROPS UTUIFrontEnd_SettingsVideoAdvanced

    virtual void SetVideoSettingValue(BYTE Setting,INT Value);
    virtual void SetVideoSettingValueArray(const TArray<BYTE>& Settings,const TArray<INT>& Values);
    virtual INT GetVideoSettingValue(BYTE Setting);
    DECLARE_FUNCTION(execSetVideoSettingValue)
    {
        P_GET_BYTE(Setting);
        P_GET_INT(Value);
        P_FINISH;
        SetVideoSettingValue(Setting,Value);
    }
    DECLARE_FUNCTION(execSetVideoSettingValueArray)
    {
        P_GET_TARRAY(BYTE,Settings);
        P_GET_TARRAY(INT,Values);
        P_FINISH;
        SetVideoSettingValueArray(Settings,Values);
    }
    DECLARE_FUNCTION(execGetVideoSettingValue)
    {
        P_GET_BYTE(Setting);
        P_FINISH;
        *(INT*)Result=GetVideoSettingValue(Setting);
    }
    void eventSetPlayerFOV(INT NewFOV)
    {
        UTUIFrontEnd_SettingsVideoAdvanced_eventSetPlayerFOV_Parms Parms(EC_EventParm);
        Parms.NewFOV=NewFOV;
        ProcessEvent(FindFunctionChecked(UTGAME_SetPlayerFOV),&Parms);
    }
    DECLARE_CLASS(UUTUIFrontEnd_SettingsVideoAdvanced,UUTUIFrontEnd,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIFrontEnd_SettingsVideoAdvanced)
};

struct UTUIFrontEnd_WeaponPreference_eventGetWeaponClass_Parms
{
    FString ClassName;
    class UClass* ReturnValue;
    UTUIFrontEnd_WeaponPreference_eventGetWeaponClass_Parms(EEventParm)
    {
    }
};
struct UTUIFrontEnd_WeaponPreference_eventMarkDirty_Parms
{
    UTUIFrontEnd_WeaponPreference_eventMarkDirty_Parms(EEventParm)
    {
    }
};
class UUTUIFrontEnd_WeaponPreference : public UUTUIFrontEnd
{
public:
    //## BEGIN PROPS UTUIFrontEnd_WeaponPreference
    class UUIList* WeaponList;
    class UUILabel* DescriptionLabel;
    class UUILabel* DetailsLabel;
    class UUIScrollFrame* DescriptionScroller;
    class UUTUIDataStore_MenuItems* MenuDataStore;
    class UUTUIMeshWidget* WeaponMesh;
    TArrayNoInit<class UClass*> WeaponClasses;
    FLOAT BaseWeaponHeight;
    TArrayNoInit<FLOAT> OldPriorities;
    class UUIButton* ShiftUpButton;
    class UUIButton* ShiftDownButton;
    class UUILabel* ShiftUpLabel;
    class UUILabel* ShiftDownLabel;
    FScriptDelegate __MarkDirty__Delegate;
    //## END PROPS UTUIFrontEnd_WeaponPreference

    virtual void LoadINIDefaults();
    DECLARE_FUNCTION(execLoadINIDefaults)
    {
        P_FINISH;
        LoadINIDefaults();
    }
    class UClass* eventGetWeaponClass(const FString& ClassName)
    {
        UTUIFrontEnd_WeaponPreference_eventGetWeaponClass_Parms Parms(EC_EventParm);
        Parms.ReturnValue=NULL;
        Parms.ClassName=ClassName;
        ProcessEvent(FindFunctionChecked(UTGAME_GetWeaponClass),&Parms);
        return Parms.ReturnValue;
    }
    void delegateMarkDirty()
    {
        ProcessDelegate(UTGAME_MarkDirty,&__MarkDirty__Delegate,NULL);
    }
    DECLARE_CLASS(UUTUIFrontEnd_WeaponPreference,UUTUIFrontEnd,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIFrontEnd_WeaponPreference)
};

class UUTUIFrontEnd_MapSelection : public UUTUIScene
{
public:
    //## BEGIN PROPS UTUIFrontEnd_MapSelection
    //## END PROPS UTUIFrontEnd_MapSelection

    DECLARE_CLASS(UUTUIFrontEnd_MapSelection,UUTUIScene,0|CLASS_Config,UTGame)
    NO_DEFAULT_CONSTRUCTOR(UUTUIFrontEnd_MapSelection)
};

struct UTUIFrontEnd_TitleScreen_eventUpdateProfileLabels_Parms
{
    UTUIFrontEnd_TitleScreen_eventUpdateProfileLabels_Parms(EEventParm)
    {
    }
};
struct UTUIFrontEnd_TitleScreen_eventGetNumLoggedInPlayers_Parms
{
    INT ReturnValue;
    UTUIFrontEnd_TitleScreen_eventGetNumLoggedInPlayers_Parms(EEventParm)
    {
    }
};
class UUTUIFrontEnd_TitleScreen : public UUTUIScene
{
public:
    //## BEGIN PROPS UTUIFrontEnd_TitleScreen
    BITFIELD bInMovie:1;
    BITFIELD bUpdatePlayersOnNextTick:1;
    FLOAT TimeElapsed;
    FStringNoInit MovieName;
    FLOAT TimeTillAttractMovie;
    FStringNoInit MainMenuScene;
    //## END PROPS UTUIFrontEnd_TitleScreen

    virtual void UpdateGamePlayersArray();
    virtual void StartMovie();
    virtual void StopMovie();
    virtual void UpdateMovieStatus();
    DECLARE_FUNCTION(execUpdateGamePlayersArray)
    {
        P_FINISH;
        UpdateGamePlayersArray();
    }
    DECLARE_FUNCTION(execStartMovie)
    {
        P_FINISH;
        StartMovie();
    }
    DECLARE_FUNCTION(execStopMovie)
    {
        P_FINISH;
        StopMovie();
    }
    DECLARE_FUNCTION(execUpdateMovieStatus)
    {
        P_FINISH;
        UpdateMovieStatus();
    }
    void eventUpdateProfileLabels()
    {
        ProcessEvent(FindFunctionChecked(UTGAME_UpdateProfileLabels),NULL);
    }
    INT eventGetNumLoggedInPlayers()
    {
        UTUIFrontEnd_TitleScreen_eventGetNumLoggedInPlayers_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(UTGAME_GetNumLoggedInPlayers),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UUTUIFrontEnd_TitleScreen,UUTUIScene,0|CLASS_Config,UTGame)
	virtual void Tick( FLOAT DeltaTime );
};

#endif // !INCLUDED_UTGAME_UIFRONTEND_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(UUTUIFrontEnd,-1,execSavePassword);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd,-1,execCancelInstallPS3);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd,-1,execBeginInstallPS3);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd,-1,execBeginImportMod);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_Credits,-1,execSetupScene);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_LoginScreen,-1,execCheckLoginProperties);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_SettingsVideoAdvanced,-1,execGetVideoSettingValue);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_SettingsVideoAdvanced,-1,execSetVideoSettingValueArray);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_SettingsVideoAdvanced,-1,execSetVideoSettingValue);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_TitleScreen,-1,execUpdateMovieStatus);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_TitleScreen,-1,execStopMovie);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_TitleScreen,-1,execStartMovie);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_TitleScreen,-1,execUpdateGamePlayersArray);
AUTOGENERATE_FUNCTION(UUTUIFrontEnd_WeaponPreference,-1,execLoadINIDefaults);
AUTOGENERATE_FUNCTION(UUTUIKeyBindingList,-1,execGetBindKeyFromCommand);
AUTOGENERATE_FUNCTION(UUTUIKeyBindingList,-1,execRefreshBindingLabels);
AUTOGENERATE_FUNCTION(UUTUIKeyBindingList,-1,execRepositionOptions);
AUTOGENERATE_FUNCTION(UUTUIKeyBindingList,-1,execRegenerateOptions);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execClearBoundDataStores);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execGetBoundDataStores);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execNotifyDataStoreValueUpdated);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execRefreshSubscriberValue);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execGetDataStoreBinding);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execSetDataStoreBinding);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execInitializeScrollbars);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execInitializeComboboxWidgets);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execSetSelectedOptionIndex);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execRepositionOptions);
AUTOGENERATE_FUNCTION(UUTUIOptionList,-1,execRegenerateOptions);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execClearBoundDataStores);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execGetBoundDataStores);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execNotifyDataStoreValueUpdated);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execRefreshSubscriberValue);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execGetDataStoreBinding);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execSetDataStoreBinding);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execSetStatsIndex);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execRepositionOptions);
AUTOGENERATE_FUNCTION(UUTUIStatsList,-1,execRegenerateOptions);
AUTOGENERATE_FUNCTION(UUTUITabPage_EpicContent,-1,execLaunchWebBrowser);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef UTGAME_UIFRONTEND_NATIVE_DEFS
#define UTGAME_UIFRONTEND_NATIVE_DEFS

DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_Credits);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_CustomScreen);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_LoginScreen);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_MapSelection);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_SettingsVideoAdvanced);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_TitleScreen);
DECLARE_NATIVE_TYPE(UTGame,UUTUIFrontEnd_WeaponPreference);
DECLARE_NATIVE_TYPE(UTGame,UUTUIKeyBindingList);
DECLARE_NATIVE_TYPE(UTGame,UUTUIOptionList);
DECLARE_NATIVE_TYPE(UTGame,UUTUIStatsList);
DECLARE_NATIVE_TYPE(UTGame,UUTUITabPage_EpicContent);

#define AUTO_INITIALIZE_REGISTRANTS_UTGAME_UIFRONTEND \
	UUTUIFrontEnd::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEndNative; \
	UUTUIFrontEnd_Credits::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEnd_CreditsNative; \
	UUTUIFrontEnd_CustomScreen::StaticClass(); \
	UUTUIFrontEnd_LoginScreen::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEnd_LoginScreenNative; \
	UUTUIFrontEnd_MapSelection::StaticClass(); \
	UUTUIFrontEnd_SettingsVideoAdvanced::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEnd_SettingsVideoAdvancedNative; \
	UUTUIFrontEnd_TitleScreen::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEnd_TitleScreenNative; \
	UUTUIFrontEnd_WeaponPreference::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIFrontEnd_WeaponPreferenceNative; \
	UUTUIKeyBindingList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIKeyBindingListNative; \
	UUTUIOptionList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIOptionListNative; \
	UUTUIStatsList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUIStatsListNative; \
	UUTUITabPage_EpicContent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindUTGameUUTUITabPage_EpicContentNative; \

#endif // UTGAME_UIFRONTEND_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UUTUIFrontEnd) GUTGameUUTUIFrontEndNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd,execSavePassword)
	MAP_NATIVE(UUTUIFrontEnd,execCancelInstallPS3)
	MAP_NATIVE(UUTUIFrontEnd,execBeginInstallPS3)
	MAP_NATIVE(UUTUIFrontEnd,execBeginImportMod)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd);

NATIVE_INFO(UUTUIFrontEnd_Credits) GUTGameUUTUIFrontEnd_CreditsNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd_Credits,execSetupScene)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd_Credits);

NATIVE_INFO(UUTUIFrontEnd_LoginScreen) GUTGameUUTUIFrontEnd_LoginScreenNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd_LoginScreen,execCheckLoginProperties)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd_LoginScreen);

NATIVE_INFO(UUTUIFrontEnd_SettingsVideoAdvanced) GUTGameUUTUIFrontEnd_SettingsVideoAdvancedNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd_SettingsVideoAdvanced,execGetVideoSettingValue)
	MAP_NATIVE(UUTUIFrontEnd_SettingsVideoAdvanced,execSetVideoSettingValueArray)
	MAP_NATIVE(UUTUIFrontEnd_SettingsVideoAdvanced,execSetVideoSettingValue)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd_SettingsVideoAdvanced);

NATIVE_INFO(UUTUIFrontEnd_TitleScreen) GUTGameUUTUIFrontEnd_TitleScreenNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd_TitleScreen,execUpdateMovieStatus)
	MAP_NATIVE(UUTUIFrontEnd_TitleScreen,execStopMovie)
	MAP_NATIVE(UUTUIFrontEnd_TitleScreen,execStartMovie)
	MAP_NATIVE(UUTUIFrontEnd_TitleScreen,execUpdateGamePlayersArray)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd_TitleScreen);

NATIVE_INFO(UUTUIFrontEnd_WeaponPreference) GUTGameUUTUIFrontEnd_WeaponPreferenceNatives[] = 
{ 
	MAP_NATIVE(UUTUIFrontEnd_WeaponPreference,execLoadINIDefaults)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIFrontEnd_WeaponPreference);

NATIVE_INFO(UUTUIKeyBindingList) GUTGameUUTUIKeyBindingListNatives[] = 
{ 
	MAP_NATIVE(UUTUIKeyBindingList,execGetBindKeyFromCommand)
	MAP_NATIVE(UUTUIKeyBindingList,execRefreshBindingLabels)
	MAP_NATIVE(UUTUIKeyBindingList,execRepositionOptions)
	MAP_NATIVE(UUTUIKeyBindingList,execRegenerateOptions)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIKeyBindingList);

NATIVE_INFO(UUTUIOptionList) GUTGameUUTUIOptionListNatives[] = 
{ 
	MAP_NATIVE(UUTUIOptionList,execClearBoundDataStores)
	MAP_NATIVE(UUTUIOptionList,execGetBoundDataStores)
	MAP_NATIVE(UUTUIOptionList,execNotifyDataStoreValueUpdated)
	MAP_NATIVE(UUTUIOptionList,execRefreshSubscriberValue)
	MAP_NATIVE(UUTUIOptionList,execGetDataStoreBinding)
	MAP_NATIVE(UUTUIOptionList,execSetDataStoreBinding)
	MAP_NATIVE(UUTUIOptionList,execInitializeScrollbars)
	MAP_NATIVE(UUTUIOptionList,execInitializeComboboxWidgets)
	MAP_NATIVE(UUTUIOptionList,execSetSelectedOptionIndex)
	MAP_NATIVE(UUTUIOptionList,execRepositionOptions)
	MAP_NATIVE(UUTUIOptionList,execRegenerateOptions)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIOptionList);

NATIVE_INFO(UUTUIStatsList) GUTGameUUTUIStatsListNatives[] = 
{ 
	MAP_NATIVE(UUTUIStatsList,execClearBoundDataStores)
	MAP_NATIVE(UUTUIStatsList,execGetBoundDataStores)
	MAP_NATIVE(UUTUIStatsList,execNotifyDataStoreValueUpdated)
	MAP_NATIVE(UUTUIStatsList,execRefreshSubscriberValue)
	MAP_NATIVE(UUTUIStatsList,execGetDataStoreBinding)
	MAP_NATIVE(UUTUIStatsList,execSetDataStoreBinding)
	MAP_NATIVE(UUTUIStatsList,execSetStatsIndex)
	MAP_NATIVE(UUTUIStatsList,execRepositionOptions)
	MAP_NATIVE(UUTUIStatsList,execRegenerateOptions)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUIStatsList);

NATIVE_INFO(UUTUITabPage_EpicContent) GUTGameUUTUITabPage_EpicContentNatives[] = 
{ 
	MAP_NATIVE(UUTUITabPage_EpicContent,execLaunchWebBrowser)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(UTGame,UUTUITabPage_EpicContent);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd,ButtonBar)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd,VersionFont)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_Credits,SceneTimeInSec)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_Credits,TextSets)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_Credits)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_CustomScreen,DescriptionLabel)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_CustomScreen,DescriptionMap)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_CustomScreen)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_LoginScreen,CreateProfileScene)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_LoginScreen,PlayerNames)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_LoginScreen)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_MapSelection)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_SettingsVideoAdvanced,SettingWidgetMapping)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_SettingsVideoAdvanced,MessageBoxReference)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_SettingsVideoAdvanced)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_TitleScreen,TimeElapsed)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_TitleScreen,MainMenuScene)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_TitleScreen)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_WeaponPreference,WeaponList)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIFrontEnd_WeaponPreference,__MarkDirty__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTUIFrontEnd_WeaponPreference)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIKeyBindingList,NumButtons)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIKeyBindingList,CurrKeyBindData)
VERIFY_CLASS_SIZE_NODIE(UUTUIKeyBindingList)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIOptionList,VerticalScrollbar)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIOptionList,__OnAcceptOptions__Delegate)
VERIFY_CLASS_SIZE_NODIE(UUTUIOptionList)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIStatsList,GeneratedObjects)
VERIFY_CLASS_OFFSET_NODIE(U,UTUIStatsList,DataProvider)
VERIFY_CLASS_SIZE_NODIE(UUTUIStatsList)
VERIFY_CLASS_OFFSET_NODIE(U,UTUITabPage_EpicContent,ContentList)
VERIFY_CLASS_OFFSET_NODIE(U,UTUITabPage_EpicContent,MessageBoxReference)
VERIFY_CLASS_SIZE_NODIE(UUTUITabPage_EpicContent)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
